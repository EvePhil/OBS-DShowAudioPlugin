; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?ReleaseBuffer@DeviceAudioSource@@MEAAXXZ	; DeviceAudioSource::ReleaseBuffer
PUBLIC	?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z ; DeviceAudioSource::GetNextBuffer
PUBLIC	?GetDeviceName@DeviceAudioSource@@MEBAPEB_WXZ	; DeviceAudioSource::GetDeviceName
PUBLIC	??_R4DeviceAudioSource@@6B@			; DeviceAudioSource::`RTTI Complete Object Locator'
PUBLIC	??_R3DeviceAudioSource@@8			; DeviceAudioSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DeviceAudioSource@@8			; DeviceAudioSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AudioSource@@8			; AudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3AudioSource@@8				; AudioSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AudioSource@@8				; AudioSource::`RTTI Base Class Array'
PUBLIC	??_R0?AVAudioSource@@@8				; AudioSource `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@DeviceAudioSource@@8		; DeviceAudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDeviceAudioSource@@@8			; DeviceAudioSource `RTTI Type Descriptor'
PUBLIC	?Array@?$List@E@@QEBAPEAEXZ			; List<unsigned char>::Array
PUBLIC	?Num@?$List@E@@QEBAIXZ				; List<unsigned char>::Num
PUBLIC	?Remove@?$List@E@@QEAAXI@Z			; List<unsigned char>::Remove
PUBLIC	?RemoveRange@?$List@E@@QEAAXII@Z		; List<unsigned char>::RemoveRange
PUBLIC	??1?$List@E@@QEAA@XZ				; List<unsigned char>::~List<unsigned char>
PUBLIC	??_GDeviceAudioSource@@UEAAPEAXI@Z		; DeviceAudioSource::`scalar deleting destructor'
PUBLIC	?SetSize@?$List@E@@QEAAHI@Z			; List<unsigned char>::SetSize
PUBLIC	?AppendArray@?$List@E@@QEAAXPEBEI@Z		; List<unsigned char>::AppendArray
PUBLIC	?Clear@?$List@E@@QEAAXXZ			; List<unsigned char>::Clear
PUBLIC	??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@ ; `string'
PUBLIC	??_C@_1FK@OOEEKAAM@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg@ ; `string'
PUBLIC	??_7DeviceAudioSource@@6B@			; DeviceAudioSource::`vftable'
PUBLIC	_GUID_00000003_0000_0010_8000_00aa00389b71
EXTRN	?GetLatestTimestamp@AudioSource@@UEAA_NAEA_K@Z:PROC ; AudioSource::GetLatestTimestamp
EXTRN	?StopCapture@AudioSource@@UEAAXXZ:PROC		; AudioSource::StopCapture
EXTRN	?StartCapture@AudioSource@@UEAAXXZ:PROC		; AudioSource::StartCapture
EXTRN	?GetBufferedTime@AudioSource@@UEAA_KXZ:PROC	; AudioSource::GetBufferedTime
EXTRN	?GetNewestFrame@AudioSource@@UEAA_NPEAPEAM@Z:PROC ; AudioSource::GetNewestFrame
EXTRN	?GetBuffer@AudioSource@@UEAA_NPEAPEAM_K@Z:PROC	; AudioSource::GetBuffer
EXTRN	?GetEarliestTimestamp@AudioSource@@UEAA_NAEA_K@Z:PROC ; AudioSource::GetEarliestTimestamp
EXTRN	?QueryAudio@AudioSource@@UEAAIM@Z:PROC		; AudioSource::QueryAudio
EXTRN	__imp_?API@@3PEAVAPIInterface@@EA:QWORD
EXTRN	__imp_?Array@String@@QEBAPEA_WXZ:PROC
EXTRN	__imp_?OSCreateMutex@@YAPEAXXZ:PROC
EXTRN	__imp_?InitAudioData@AudioSource@@IEAAX_NIIIIK@Z:PROC
EXTRN	__imp_?OSCloseMutex@@YAXPEAX@Z:PROC
EXTRN	__imp_??1AudioSource@@UEAA@XZ:PROC
EXTRN	__imp_?QueryAudio@AudioSource@@UEAAIM@Z:PROC
EXTRN	__imp_?GetEarliestTimestamp@AudioSource@@UEAA_NAEA_K@Z:PROC
EXTRN	__imp_?GetBuffer@AudioSource@@UEAA_NPEAPEAM_K@Z:PROC
EXTRN	__imp_?GetNewestFrame@AudioSource@@UEAA_NPEAPEAM@Z:PROC
EXTRN	__imp_?GetBufferedTime@AudioSource@@UEAA_KXZ:PROC
EXTRN	__imp_?StartCapture@AudioSource@@UEAAXXZ:PROC
EXTRN	__imp_?StopCapture@AudioSource@@UEAAXXZ:PROC
EXTRN	__imp_?GetLatestTimestamp@AudioSource@@UEAA_NAEA_K@Z:PROC
EXTRN	??_EDeviceAudioSource@@UEAAPEAXI@Z:PROC		; DeviceAudioSource::`vector deleting destructor'
EXTRN	__imp_?AppWarning@@YAXPEB_WZZ:PROC
;	COMDAT _GUID_00000003_0000_0010_8000_00aa00389b71
CONST	SEGMENT
_GUID_00000003_0000_0010_8000_00aa00389b71 DD 03H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
CONST	ENDS
;	COMDAT ??_7DeviceAudioSource@@6B@
CONST	SEGMENT
??_7DeviceAudioSource@@6B@ DQ FLAT:??_R4DeviceAudioSource@@6B@ ; DeviceAudioSource::`vftable'
	DQ	FLAT:?GetDeviceName@DeviceAudioSource@@MEBAPEB_WXZ
	DQ	FLAT:?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
	DQ	FLAT:?ReleaseBuffer@DeviceAudioSource@@MEAAXXZ
	DQ	FLAT:??_EDeviceAudioSource@@UEAAPEAXI@Z
	DQ	FLAT:?QueryAudio@AudioSource@@UEAAIM@Z
	DQ	FLAT:?GetEarliestTimestamp@AudioSource@@UEAA_NAEA_K@Z
	DQ	FLAT:?GetBuffer@AudioSource@@UEAA_NPEAPEAM_K@Z
	DQ	FLAT:?GetNewestFrame@AudioSource@@UEAA_NPEAPEAM@Z
	DQ	FLAT:?GetBufferedTime@AudioSource@@UEAA_KXZ
	DQ	FLAT:?StartCapture@AudioSource@@UEAAXXZ
	DQ	FLAT:?StopCapture@AudioSource@@UEAAXXZ
	DQ	FLAT:?GetLatestTimestamp@AudioSource@@UEAA_NAEA_K@Z
CONST	ENDS
;	COMDAT ??_R4DeviceAudioSource@@6B@
rdata$r	SEGMENT
??_R4DeviceAudioSource@@6B@ DD 01H			; DeviceAudioSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDeviceAudioSource@@@8
	DD	imagerel ??_R3DeviceAudioSource@@8
	DD	imagerel ??_R4DeviceAudioSource@@6B@
rdata$r	ENDS
;	COMDAT ??_R3DeviceAudioSource@@8
rdata$r	SEGMENT
??_R3DeviceAudioSource@@8 DD 00H			; DeviceAudioSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2DeviceAudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R2DeviceAudioSource@@8
rdata$r	SEGMENT
??_R2DeviceAudioSource@@8 DD imagerel ??_R1A@?0A@EA@DeviceAudioSource@@8 ; DeviceAudioSource::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AudioSource@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AudioSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AudioSource@@8 DD imagerel ??_R0?AVAudioSource@@@8 ; AudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R3AudioSource@@8
rdata$r	SEGMENT
??_R3AudioSource@@8 DD 00H				; AudioSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2AudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R2AudioSource@@8
rdata$r	SEGMENT
??_R2AudioSource@@8 DD imagerel ??_R1A@?0A@EA@AudioSource@@8 ; AudioSource::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVAudioSource@@@8
_DATA	SEGMENT
??_R0?AVAudioSource@@@8 DQ FLAT:??_7type_info@@6B@	; AudioSource `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAudioSource@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DeviceAudioSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DeviceAudioSource@@8 DD imagerel ??_R0?AVDeviceAudioSource@@@8 ; DeviceAudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DeviceAudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDeviceAudioSource@@@8
_DATA	SEGMENT
??_R0?AVDeviceAudioSource@@@8 DQ FLAT:??_7type_info@@6B@ ; DeviceAudioSource `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDeviceAudioSource@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_1FK@OOEEKAAM@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg@
CONST	SEGMENT
??_C@_1FK@OOEEKAAM@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg@ DB 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ':', 00H, ':', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'R', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, ':', 00H, ' ', 00H, ' ', 00H
	DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd'
	DB	00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'f'
	DB	00H, 'i', 00H, 'e', 00H, 'd', 00H, '.', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@
CONST	SEGMENT
??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@ DB 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ':', 00H, ':', 00H, 'A', 00H
	DB	'p', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, ':', 00H, ' ', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'o', 00H, 'v', 00H
	DB	'e', 00H, ' ', 00H, 'z', 00H, 'e', 00H, 'r', 00H, 'o', 00H, 00H
	DB	00H						; `string'
$SG-4109 DB	00H
	ORG $+2
$SG-4110 DB	00H, 00H
	ORG $+2
$SG-4128 DB	'M', 00H, 'J', 00H, 'P', 00H, 'G', 00H, 00H, 00H
	ORG $+6
$SG-4127 DB	'd', 00H, 'v', 00H, 'h', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG-4126 DB	'd', 00H, 'v', 00H, 's', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG-4125 DB	'd', 00H, 'v', 00H, 's', 00H, 'l', 00H, 00H, 00H
	ORG $+6
$SG-4124 DB	'H', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG-4123 DB	'M', 00H, 'P', 00H, 'E', 00H, 'G', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG-4122 DB	'H', 00H, 'D', 00H, 'Y', 00H, 'C', 00H, 00H, 00H
	ORG $+6
$SG-4121 DB	'U', 00H, 'Y', 00H, 'V', 00H, 'Y', 00H, 00H, 00H
	ORG $+6
$SG-4120 DB	'Y', 00H, 'U', 00H, 'Y', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-4119 DB	'Y', 00H, 'V', 00H, 'Y', 00H, 'U', 00H, 00H, 00H
	ORG $+6
$SG-4118 DB	'Y', 00H, 'V', 00H, 'U', 00H, '9', 00H, 00H, 00H
	ORG $+6
$SG-4117 DB	'Y', 00H, '4', 00H, '1', 00H, 'P', 00H, 00H, 00H
	ORG $+6
$SG-4116 DB	'Y', 00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-4115 DB	'I', 00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG-4114 DB	'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG-4113 DB	'R', 00H, 'G', 00H, 'B', 00H, '3', 00H, '2', 00H, 00H, 00H
	ORG $+4
$SG-4112 DB	'R', 00H, 'G', 00H, 'B', 00H, '2', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG-4111 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@E@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?Num@?$List@E@@QEBAIXZ PROC				; List<unsigned char>::Num, COMDAT

; 37   :     inline unsigned int Num() const     {return num;}

	mov	eax, DWORD PTR [rcx+8]
	ret	0
?Num@?$List@E@@QEBAIXZ ENDP				; List<unsigned char>::Num
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Array@?$List@E@@QEBAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?Array@?$List@E@@QEBAPEAEXZ PROC			; List<unsigned char>::Array, COMDAT

; 36   :     inline T* Array() const             {return array;}

	mov	rax, QWORD PTR [rcx]
	ret	0
?Array@?$List@E@@QEBAPEAEXZ ENDP			; List<unsigned char>::Array
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
_TEXT	ENDS
;	COMDAT ?GetDeviceName@DeviceAudioSource@@MEBAPEB_WXZ
_TEXT	SEGMENT
this$ = 8
?GetDeviceName@DeviceAudioSource@@MEBAPEB_WXZ PROC	; DeviceAudioSource::GetDeviceName, COMDAT

; 53   :     if(device)

	mov	rax, QWORD PTR [rcx+200]
	test	rax, rax
	je	SHORT $LN1@GetDeviceN

; 54   :         return device->strDeviceName.Array();

	mov	rax, QWORD PTR [rax+128]

; 55   : 
; 56   :     return NULL;
; 57   : }

	ret	0
$LN1@GetDeviceN:
	fatret	0
?GetDeviceName@DeviceAudioSource@@MEBAPEB_WXZ ENDP	; DeviceAudioSource::GetDeviceName
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?ReleaseBuffer@DeviceAudioSource@@MEAAXXZ
_TEXT	SEGMENT
this$ = 8
?ReleaseBuffer@DeviceAudioSource@@MEAAXXZ PROC		; DeviceAudioSource::ReleaseBuffer, COMDAT

; 48   : }

	ret	0
?ReleaseBuffer@DeviceAudioSource@@MEAAXXZ ENDP		; DeviceAudioSource::ReleaseBuffer
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?Remove@?$List@E@@QEAAXI@Z DD imagerel $LN7
	DD	imagerel $LN7+102
	DD	imagerel $unwind$?Remove@?$List@E@@QEAAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Remove@?$List@E@@QEAAXI@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?Remove@?$List@E@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 48
?Remove@?$List@E@@QEAAXI@Z PROC				; List<unsigned char>::Remove, COMDAT

; 83   :     {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 84   :         assert(index < num);
; 85   :         if(index >= num) return;

	mov	eax, DWORD PTR [rcx+8]
	mov	rbx, rcx
	test	eax, eax
	je	SHORT $LN3@Remove

; 86   : 
; 87   :         if(!--num) {Free(array); array=NULL; return;}

	dec	eax
	mov	DWORD PTR [rcx+8], eax
	jne	SHORT $LN1@Remove
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx], 0

; 92   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN1@Remove:

; 88   : 
; 89   :         mcpy(&array[index], &array[index+1], sizeof(T)*(num-index));

	mov	rcx, QWORD PTR [rcx]
	mov	r8d, eax
	lea	rdx, QWORD PTR [rcx+1]
	call	memcpy

; 90   : 
; 91   :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	r11, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	r8d, DWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [r11]
	mov	rdx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx], rax
$LN3@Remove:

; 92   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Remove@?$List@E@@QEAAXI@Z ENDP				; List<unsigned char>::Remove
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?Clear@?$List@E@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?Clear@?$List@E@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@?$List@E@@QEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?Clear@?$List@E@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Clear@?$List@E@@QEAAXXZ PROC				; List<unsigned char>::Clear, COMDAT

; 329  :     {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 330  :         if(array)

	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@Clear@4

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]

; 335  :             array = NULL;

	xor	r11d, r11d
	mov	QWORD PTR [rbx], r11

; 336  :             num = 0;

	mov	DWORD PTR [rbx+8], r11d
$LN1@Clear@4:

; 337  :         }
; 338  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Clear@?$List@E@@QEAAXXZ ENDP				; List<unsigned char>::Clear
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?SetSize@?$List@E@@QEAAHI@Z DD imagerel $LN13
	DD	imagerel $LN13+151
	DD	imagerel $unwind$?SetSize@?$List@E@@QEAAHI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetSize@?$List@E@@QEAAHI@Z DD 062601H
	DD	066426H
	DD	07340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?SetSize@?$List@E@@QEAAHI@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
?SetSize@?$List@E@@QEAAHI@Z PROC			; List<unsigned char>::SetSize, COMDAT

; 200  :     {

$LN13:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 201  :         if(num == n)

	mov	edi, DWORD PTR [rcx+8]
	mov	rbx, rcx
	cmp	edi, edx
	jne	SHORT $LN4@SetSize

; 202  :             return FALSE;

	xor	eax, eax

; 217  : 
; 218  :         return TRUE;
; 219  :     }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@SetSize:
	mov	QWORD PTR [rsp+48], rsi

; 203  :         else if(!n)

	test	edx, edx
	jne	SHORT $LN2@SetSize

; 204  :         {
; 205  :             Clear();

	mov	rdx, QWORD PTR [rcx]
	test	rdx, rdx
	je	SHORT $LN1@SetSize
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	xor	esi, esi
	mov	QWORD PTR [rbx], rsi
	mov	DWORD PTR [rbx+8], esi

; 206  :             return TRUE;

	jmp	SHORT $LN1@SetSize
$LN2@SetSize:

; 207  :         }
; 208  : 
; 209  :         BOOL bClear=(n>num);
; 210  :         UINT oldNum=num;
; 211  : 
; 212  :         num = n;
; 213  :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	DWORD PTR [rcx+8], edx
	xor	esi, esi
	mov	rcx, QWORD PTR [rax]
	cmp	edx, edi
	mov	r8d, edx
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	seta	sil
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx], rax

; 214  : 
; 215  :         if(bClear)

	test	esi, esi
	je	SHORT $LN1@SetSize

; 216  :             zero(&array[oldNum], sizeof(T)*(num-oldNum));

	mov	edx, DWORD PTR [rbx+8]
	lea	rcx, QWORD PTR [rax+rdi]
	sub	edx, edi
	call	?zero@@YAXPEAX_K@Z			; zero
$LN1@SetSize:

; 217  : 
; 218  :         return TRUE;
; 219  :     }

	mov	rsi, QWORD PTR [rsp+48]
	mov	rbx, QWORD PTR [rsp+56]
	mov	eax, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?SetSize@?$List@E@@QEAAHI@Z ENDP			; List<unsigned char>::SetSize
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD imagerel $LN7
	DD	imagerel $LN7+68
	DD	imagerel $unwind$?AppendArray@?$List@E@@QEAAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD imagerel $LN7+68
	DD	imagerel $LN7+123
	DD	imagerel $chain$0$?AppendArray@?$List@E@@QEAAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD imagerel $LN7+123
	DD	imagerel $LN7+139
	DD	imagerel $chain$1$?AppendArray@?$List@E@@QEAAXPEBEI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD 021H
	DD	imagerel $LN7
	DD	imagerel $LN7+68
	DD	imagerel $unwind$?AppendArray@?$List@E@@QEAAXPEBEI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD 020521H
	DD	065405H
	DD	imagerel $LN7
	DD	imagerel $LN7+68
	DD	imagerel $unwind$?AppendArray@?$List@E@@QEAAXPEBEI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AppendArray@?$List@E@@QEAAXPEBEI@Z DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?AppendArray@?$List@E@@QEAAXPEBEI@Z
_TEXT	SEGMENT
this$ = 48
new_array$ = 56
n$ = 64
?AppendArray@?$List@E@@QEAAXPEBEI@Z PROC		; List<unsigned char>::AppendArray, COMDAT

; 178  :     {

$LN7:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rsi, rdx
	mov	rdi, rcx

; 179  :         if(!new_array && n)

	test	rdx, rdx
	jne	SHORT $LN3@AppendArra
	test	r8d, r8d
	je	SHORT $LN4@AppendArra

; 180  :         {
; 181  :             AppWarning(TEXT("List::AppendArray:  NULL array with count above zero"));

	lea	rcx, OFFSET FLAT:??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@

; 197  :     }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ
$LN3@AppendArra:

; 182  :             return;
; 183  :         }
; 184  : 
; 185  :         if(!n)

	test	r8d, r8d
	je	SHORT $LN4@AppendArra

; 186  :             return;
; 187  : 
; 188  :         int oldnum = num;

	mov	QWORD PTR [rsp+48], rbp
	movsxd	rbp, DWORD PTR [rcx+8]

; 189  : 
; 190  :         SetSize(n+num);

	lea	edx, DWORD PTR [rbp+rbx]
	call	?SetSize@?$List@E@@QEAAHI@Z		; List<unsigned char>::SetSize

; 191  : 
; 192  :         assert(num);
; 193  : 
; 194  :         if(!num) {array=NULL; return;}

	cmp	DWORD PTR [rdi+8], 0
	jne	SHORT $LN1@AppendArra
	mov	QWORD PTR [rdi], 0
	jmp	SHORT $LN6@AppendArra
$LN1@AppendArra:

; 195  : 
; 196  :         mcpy(&array[oldnum], (void*)new_array, sizeof(T)*n);

	mov	rcx, rbp
	mov	r8, rbx
	mov	rdx, rsi
	add	rcx, QWORD PTR [rdi]
	call	memcpy
$LN6@AppendArra:
	mov	rbp, QWORD PTR [rsp+48]
$LN4@AppendArra:

; 197  :     }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?AppendArray@?$List@E@@QEAAXPEBEI@Z ENDP		; List<unsigned char>::AppendArray
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?RemoveRange@?$List@E@@QEAAXII@Z DD imagerel $LN16
	DD	imagerel $LN16+196
	DD	imagerel $unwind$?RemoveRange@?$List@E@@QEAAXII@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RemoveRange@?$List@E@@QEAAXII@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?RemoveRange@?$List@E@@QEAAXII@Z
_TEXT	SEGMENT
this$ = 48
end$ = 56
?RemoveRange@?$List@E@@QEAAXII@Z PROC			; List<unsigned char>::RemoveRange, COMDAT

; 107  :     {

$LN16:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 108  :         if(start > num || end > num || end <= start)

	cmp	edx, DWORD PTR [rcx+8]
	ja	$LN5@RemoveRang
	test	edx, edx
	je	$LN5@RemoveRang

; 111  :             return;
; 112  :         }
; 113  : 
; 114  :         UINT count = end-start;
; 115  :         if(count == 1)
; 116  :         {
; 117  :             Remove(start);

	mov	eax, DWORD PTR [rcx+8]
	cmp	edx, 1
	jne	SHORT $LN4@RemoveRang
	test	eax, eax
	je	$LN7@RemoveRang
	dec	eax
	mov	DWORD PTR [rcx+8], eax
	jne	SHORT $LN9@RemoveRang
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx], 0

; 132  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0

; 111  :             return;
; 112  :         }
; 113  : 
; 114  :         UINT count = end-start;
; 115  :         if(count == 1)
; 116  :         {
; 117  :             Remove(start);

$LN9@RemoveRang:
	mov	rcx, QWORD PTR [rcx]
	mov	r8d, eax
	lea	rdx, QWORD PTR [rcx+1]
	call	memcpy
	mov	r11, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [r11]
$LN15@RemoveRang:
	mov	rax, QWORD PTR [rcx]
	mov	r8d, DWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rbx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx], rax

; 132  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@RemoveRang:

; 118  :             return;
; 119  :         }
; 120  :         else if(count == num)

	cmp	edx, eax
	jne	SHORT $LN2@RemoveRang

; 132  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Clear@?$List@E@@QEAAXXZ		; List<unsigned char>::Clear
$LN2@RemoveRang:

; 121  :         {
; 122  :             Clear();
; 123  :             return;
; 124  :         }
; 125  : 
; 126  :         num -= count;

	sub	eax, edx
	mov	DWORD PTR [rcx+8], eax

; 127  : 
; 128  :         UINT cutoffCount = num-start;
; 129  :         if(cutoffCount)

	je	SHORT $LN1@RemoveRang

; 130  :             mcpy(array+start, array+end, cutoffCount*sizeof(T));

	mov	rcx, QWORD PTR [rcx]
	mov	edx, edx
	mov	r8d, eax
	add	rdx, rcx
	call	memcpy
$LN1@RemoveRang:

; 131  :         array = (T*)ReAllocate(array, num*sizeof(T));

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	jmp	SHORT $LN15@RemoveRang
$LN5@RemoveRang:

; 109  :         {
; 110  :             AppWarning(TEXT("List::RemoveRange:  Invalid range specified."));

	lea	rcx, OFFSET FLAT:??_C@_1FK@OOEEKAAM@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAr?$AAa?$AAn?$AAg@
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ
$LN7@RemoveRang:

; 132  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?RemoveRange@?$List@E@@QEAAXII@Z ENDP			; List<unsigned char>::RemoveRange
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$??1?$List@E@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$??1?$List@E@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$List@E@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ??1?$List@E@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$List@E@@QEAA@XZ PROC				; List<unsigned char>::~List<unsigned char>, COMDAT

; 32   :     {

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H

; 33   :         Clear();

	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN3@List@3
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	xor	r11d, r11d
	mov	QWORD PTR [rbx], r11
	mov	DWORD PTR [rbx+8], r11d
$LN3@List@3:

; 34   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$List@E@@QEAA@XZ ENDP				; List<unsigned char>::~List<unsigned char>
_TEXT	ENDS
PUBLIC	?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z	; DeviceAudioSource::ReceiveAudio
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
pdata	SEGMENT
$pdata$?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z DD 061401H
	DD	076414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z
_TEXT	SEGMENT
this$ = 48
lpData$ = 56
dataLength$ = 64
?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z PROC	; DeviceAudioSource::ReceiveAudio, COMDAT

; 109  : {

$LN5:

; 110  :     if(lpData)

	test	rdx, rdx
	je	SHORT $LN4@ReceiveAud
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 109  : {

	mov	rdi, rcx

; 111  :     {
; 112  :         OSEnterMutex(hAudioMutex);

	mov	rcx, QWORD PTR [rcx+216]
	mov	esi, r8d
	mov	rbx, rdx
	call	QWORD PTR __imp_?OSEnterMutex@@YAXPEAX@Z

; 113  :         sampleBuffer.AppendArray(lpData, dataLength);

	lea	rcx, QWORD PTR [rdi+224]
	mov	r8d, esi
	mov	rdx, rbx
	call	?AppendArray@?$List@E@@QEAAXPEBEI@Z	; List<unsigned char>::AppendArray

; 114  :         OSLeaveMutex(hAudioMutex);

	mov	rcx, QWORD PTR [rdi+216]
	call	QWORD PTR __imp_?OSLeaveMutex@@YAXPEAX@Z

; 115  :     }
; 116  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
$LN4@ReceiveAud:
	fatret	0
?ReceiveAudio@DeviceAudioSource@@QEAAXPEAEI@Z ENDP	; DeviceAudioSource::ReceiveAudio
_TEXT	ENDS
PUBLIC	??1DeviceAudioSource@@UEAA@XZ			; DeviceAudioSource::~DeviceAudioSource
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$??1DeviceAudioSource@@UEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+160
	DD	imagerel $unwind$??1DeviceAudioSource@@UEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1DeviceAudioSource@@UEAA@XZ DD imagerel ??1DeviceAudioSource@@UEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1DeviceAudioSource@@UEAA@XZ+37
	DD	02H
	DD	imagerel ??1DeviceAudioSource@@UEAA@XZ+56
	DD	01H
	DD	imagerel ??1DeviceAudioSource@@UEAA@XZ+99
	DD	00H
	DD	imagerel ??1DeviceAudioSource@@UEAA@XZ+140
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1DeviceAudioSource@@UEAA@XZ DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1DeviceAudioSource@@UEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1DeviceAudioSource@@UEAA@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??1DeviceAudioSource@@UEAA@XZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??1DeviceAudioSource@@UEAA@XZ
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1DeviceAudioSource@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1DeviceAudioSource@@UEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???1DeviceAudioSource@@UEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???1DeviceAudioSource@@UEAA@XZ@4HA
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
xdata	ENDS
;	COMDAT ??1DeviceAudioSource@@UEAA@XZ
_TEXT	SEGMENT
$T110719 = 32
this$ = 64
??1DeviceAudioSource@@UEAA@XZ PROC			; DeviceAudioSource::~DeviceAudioSource, COMDAT

; 102  : {

$LN21:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T110719[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rbx, rcx
	lea	rax, OFFSET FLAT:??_7DeviceAudioSource@@6B@
	mov	QWORD PTR [rcx], rax

; 103  :     if(hAudioMutex)

	mov	rcx, QWORD PTR [rcx+216]
	test	rcx, rcx
	je	SHORT $LN1@DeviceAudi

; 104  :         OSCloseMutex(hAudioMutex);

	call	QWORD PTR __imp_?OSCloseMutex@@YAXPEAX@Z
	npad	1
$LN1@DeviceAudi:

; 105  : }

	mov	rdx, QWORD PTR [rbx+240]
	xor	edi, edi
	test	rdx, rdx
	je	SHORT $LN9@DeviceAudi
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx+240], rdi
	mov	DWORD PTR [rbx+248], edi
$LN9@DeviceAudi:
	mov	rdx, QWORD PTR [rbx+224]
	test	rdx, rdx
	je	SHORT $LN16@DeviceAudi
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx+224], rdi
	mov	DWORD PTR [rbx+232], edi
$LN16@DeviceAudi:
	mov	rcx, rbx
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	rex_jmp	QWORD PTR __imp_??1AudioSource@@UEAA@XZ
??1DeviceAudioSource@@UEAA@XZ ENDP			; DeviceAudioSource::~DeviceAudioSource
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T110719 = 32
this$ = 64
?dtor$0@?0???1DeviceAudioSource@@UEAA@XZ@4HA PROC	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	rex_jmp	QWORD PTR __imp_??1AudioSource@@UEAA@XZ
?dtor$0@?0???1DeviceAudioSource@@UEAA@XZ@4HA ENDP	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$0
; Function compile flags: /Ogtpy
$T110719 = 32
this$ = 64
?dtor$1@?0???1DeviceAudioSource@@UEAA@XZ@4HA PROC	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$1
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 224				; 000000e0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$1@?0???1DeviceAudioSource@@UEAA@XZ@4HA ENDP	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$1
; Function compile flags: /Ogtpy
$T110719 = 32
this$ = 64
?dtor$2@?0???1DeviceAudioSource@@UEAA@XZ@4HA PROC	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$2
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 240				; 000000f0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$2@?0???1DeviceAudioSource@@UEAA@XZ@4HA ENDP	; `DeviceAudioSource::~DeviceAudioSource'::`1'::dtor$2
text$x	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
pdata	SEGMENT
$pdata$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD imagerel $LN12
	DD	imagerel $LN12+54
	DD	imagerel $unwind$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD imagerel $LN12+54
	DD	imagerel $LN12+173
	DD	imagerel $chain$0$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD imagerel $LN12+173
	DD	imagerel $LN12+197
	DD	imagerel $chain$1$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+54
	DD	imagerel $unwind$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD 020521H
	DD	063405H
	DD	imagerel $LN12
	DD	imagerel $LN12+54
	DD	imagerel $unwind$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z DD 081501H
	DD	097415H
	DD	086415H
	DD	075415H
	DD	0c0113215H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
xdata	ENDS
;	COMDAT ?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z
_TEXT	SEGMENT
this$ = 48
buffer$ = 56
numFrames$ = 64
timestamp$ = 72
?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z PROC ; DeviceAudioSource::GetNextBuffer, COMDAT

; 26   : {

$LN12:
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 32					; 00000020H

; 27   :     if(sampleBuffer.Num() >= sampleSegmentSize)

	mov	eax, DWORD PTR [rcx+208]
	mov	rsi, r9
	mov	rbp, r8
	mov	r12, rdx
	mov	rdi, rcx
	cmp	DWORD PTR [rcx+232], eax
	jb	SHORT $LN1@GetNextBuf

; 28   :     {
; 29   :         OSEnterMutex(hAudioMutex);

	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rsp+48], rbx
	call	QWORD PTR __imp_?OSEnterMutex@@YAXPEAX@Z

; 30   : 
; 31   :         mcpy(outputBuffer.Array(), sampleBuffer.Array(), sampleSegmentSize);

	mov	r8d, DWORD PTR [rdi+208]
	mov	rdx, QWORD PTR [rdi+224]
	mov	rcx, QWORD PTR [rdi+240]
	call	memcpy

; 32   :         sampleBuffer.RemoveRange(0, sampleSegmentSize);

	mov	edx, DWORD PTR [rdi+208]
	lea	rcx, QWORD PTR [rdi+224]
	call	?RemoveRange@?$List@E@@QEAAXII@Z	; List<unsigned char>::RemoveRange

; 33   : 
; 34   :         OSLeaveMutex(hAudioMutex);

	mov	rcx, QWORD PTR [rdi+216]
	call	QWORD PTR __imp_?OSLeaveMutex@@YAXPEAX@Z

; 35   : 
; 36   :         *buffer = outputBuffer.Array();

	mov	r11, QWORD PTR [rdi+240]
	mov	QWORD PTR [r12], r11

; 37   :         *numFrames = sampleFrameCount;

	mov	eax, DWORD PTR [rdi+212]
	mov	DWORD PTR [rbp], eax

; 38   :         *timestamp = API->GetAudioTime();

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+264]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rsi], rax

; 39   : 
; 40   :         return true;

	mov	al, 1
	jmp	SHORT $LN2@GetNextBuf
$LN1@GetNextBuf:

; 41   :     }
; 42   : 
; 43   :     return false;

	xor	al, al
$LN2@GetNextBuf:

; 44   : }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
?GetNextBuffer@DeviceAudioSource@@MEAA_NPEAPEAXPEAIPEA_K@Z ENDP ; DeviceAudioSource::GetNextBuffer
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDeviceAudioSource@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$??_GDeviceAudioSource@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDeviceAudioSource@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GDeviceAudioSource@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GDeviceAudioSource@@UEAAPEAXI@Z PROC			; DeviceAudioSource::`scalar deleting destructor', COMDAT
$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, rcx
	call	??1DeviceAudioSource@@UEAA@XZ		; DeviceAudioSource::~DeviceAudioSource
	test	bl, 1
	je	SHORT $LN8@scalar
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
$LN8@scalar:
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GDeviceAudioSource@@UEAAPEAXI@Z ENDP			; DeviceAudioSource::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z ; DeviceAudioSource::Initialize
;	COMDAT pdata
; File c:\program files (x86)\windows kits\8.0\include\shared\guiddef.h
pdata	SEGMENT
$pdata$?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z DD imagerel $LN13
	DD	imagerel $LN13+253
	DD	imagerel $unwind$?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z DD 0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0d0147218H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
xdata	ENDS
;	COMDAT ?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z
_TEXT	SEGMENT
this$ = 96
parent$ = 104
?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z PROC ; DeviceAudioSource::Initialize, COMDAT

; 61   : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 64					; 00000040H
	mov	r13, rcx

; 62   :     device = parent;

	mov	QWORD PTR [rcx+200], rdx

; 63   :     hAudioMutex = OSCreateMutex();

	call	QWORD PTR __imp_?OSCreateMutex@@YAPEAXXZ

; 64   : 
; 65   :     //---------------------------------
; 66   : 
; 67   :     bool  bFloat = false;
; 68   :     UINT  inputChannels;
; 69   :     UINT  inputSamplesPerSec;
; 70   :     UINT  inputBitsPerSample;
; 71   :     UINT  inputBlockSize;
; 72   :     DWORD inputChannelMask;
; 73   : 
; 74   :     //---------------------------------
; 75   : 
; 76   :     if(device->audioFormat.wFormatTag == WAVE_FORMAT_EXTENSIBLE)

	mov	r8, QWORD PTR [r13+200]
	mov	QWORD PTR [r13+216], rax
	mov	ecx, 65534				; 0000fffeH
	movzx	eax, WORD PTR [r8+64]
	xor	r12b, r12b
	cmp	ax, cx
	jne	SHORT $LN4@Initialize

; 77   :     {
; 78   :         WAVEFORMATEXTENSIBLE *wfext = (WAVEFORMATEXTENSIBLE*)&device->audioFormat;
; 79   :         if(wfext->SubFormat == KSDATAFORMAT_SUBTYPE_IEEE_FLOAT)

	mov	rdx, QWORD PTR [r8+88]
	lea	rcx, OFFSET FLAT:_GUID_00000003_0000_0010_8000_00aa00389b71
	cmp	rdx, QWORD PTR [rcx]
	jne	SHORT $LN11@Initialize
	mov	rdx, QWORD PTR [r8+96]
	cmp	rdx, QWORD PTR [rcx+8]
	jne	SHORT $LN11@Initialize
	xor	eax, eax
	jmp	SHORT $LN12@Initialize
$LN11@Initialize:
	sbb	eax, eax
	sbb	eax, -1
$LN12@Initialize:
	test	eax, eax
	jne	SHORT $LN1@Initialize

; 80   :             bFloat = true;

	mov	r12b, 1

; 81   :     }

	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 82   :     else if(device->audioFormat.wFormatTag == WAVE_FORMAT_IEEE_FLOAT)

	movzx	r12d, r12b
	mov	ecx, 1
	cmp	ax, 3
	cmove	r12d, ecx
$LN1@Initialize:

; 83   :         bFloat = true;
; 84   : 
; 85   :     inputBitsPerSample = device->audioFormat.wBitsPerSample;
; 86   :     inputBlockSize     = device->audioFormat.nBlockAlign;
; 87   :     inputChannelMask   = 0;
; 88   :     inputChannels      = device->audioFormat.nChannels;
; 89   :     inputSamplesPerSec = device->audioFormat.nSamplesPerSec;

	mov	edi, DWORD PTR [r8+68]
	movzx	ebx, WORD PTR [r8+76]
	movzx	esi, WORD PTR [r8+78]
	movzx	ebp, WORD PTR [r8+66]

; 90   : 
; 91   :     sampleFrameCount   = inputSamplesPerSec/100;

	mov	eax, 1374389535				; 51eb851fH

; 92   :     sampleSegmentSize  = inputBlockSize*sampleFrameCount;
; 93   : 
; 94   :     outputBuffer.SetSize(sampleSegmentSize);

	lea	rcx, QWORD PTR [r13+240]
	mul	edi
	shr	edx, 5
	mov	DWORD PTR [r13+212], edx
	imul	edx, ebx
	mov	DWORD PTR [r13+208], edx
	call	?SetSize@?$List@E@@QEAAHI@Z		; List<unsigned char>::SetSize

; 95   : 
; 96   :     InitAudioData(bFloat, inputChannels, inputSamplesPerSec, inputBitsPerSample, inputBlockSize, inputChannelMask);

	mov	DWORD PTR [rsp+48], 0
	mov	r9d, edi
	mov	r8d, ebp
	movzx	edx, r12b
	mov	rcx, r13
	mov	DWORD PTR [rsp+40], ebx
	mov	DWORD PTR [rsp+32], esi
	call	QWORD PTR __imp_?InitAudioData@AudioSource@@IEAAX_NIIIIK@Z

; 97   : 
; 98   :     return true;
; 99   : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	mov	al, 1
	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	ret	0
?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z ENDP ; DeviceAudioSource::Initialize
END
