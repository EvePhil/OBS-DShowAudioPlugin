; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?Num@?$List@W4VideoOutputType@@@@QEBAIXZ	; List<enum VideoOutputType>::Num
PUBLIC	?Add@?$List@W4VideoOutputType@@@@QEAAIAEBW4VideoOutputType@@@Z ; List<enum VideoOutputType>::Add
PUBLIC	?SafeAdd@?$List@W4VideoOutputType@@@@QEAAIAEBW4VideoOutputType@@@Z ; List<enum VideoOutputType>::SafeAdd
PUBLIC	?Clear@?$List@W4VideoOutputType@@@@QEAAXXZ	; List<enum VideoOutputType>::Clear
PUBLIC	??A?$List@UMediaOutputInfo@@@@QEBAAEAUMediaOutputInfo@@I@Z ; List<MediaOutputInfo>::operator[]
EXTRN	__imp_CoTaskMemAlloc:PROC
EXTRN	MEDIASUBTYPE_IYUV:BYTE
EXTRN	MEDIASUBTYPE_YVU9:BYTE
EXTRN	MEDIASUBTYPE_Y41P:BYTE
EXTRN	MEDIASUBTYPE_YUY2:BYTE
EXTRN	MEDIASUBTYPE_YVYU:BYTE
EXTRN	MEDIASUBTYPE_UYVY:BYTE
EXTRN	MEDIASUBTYPE_MJPG:BYTE
EXTRN	MEDIASUBTYPE_H264:BYTE
EXTRN	MEDIASUBTYPE_RGB24:BYTE
EXTRN	MEDIASUBTYPE_RGB32:BYTE
EXTRN	MEDIASUBTYPE_ARGB32:BYTE
EXTRN	MEDIASUBTYPE_YV12:BYTE
EXTRN	MEDIASUBTYPE_dvsd:BYTE
EXTRN	MEDIASUBTYPE_dvhd:BYTE
EXTRN	MEDIASUBTYPE_dvsl:BYTE
EXTRN	MEDIASUBTYPE_MPEG2_VIDEO:BYTE
$SG-16939 DB	00H
$SG-16940 DB	00H, 00H
MEDIASUBTYPE_I420 DD 030323449H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
$SG-16958 DB	'M', 00H, 'J', 00H, 'P', 00H, 'G', 00H, 00H, 00H
	ORG $+6
$SG-16957 DB	'd', 00H, 'v', 00H, 'h', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-16956 DB	'd', 00H, 'v', 00H, 's', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-16955 DB	'd', 00H, 'v', 00H, 's', 00H, 'l', 00H, 00H, 00H
$SG-16954 DB	'H', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG-16953 DB	'M', 00H, 'P', 00H, 'E', 00H, 'G', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG-16952 DB	'H', 00H, 'D', 00H, 'Y', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG-16951 DB	'U', 00H, 'Y', 00H, 'V', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG-16950 DB	'Y', 00H, 'U', 00H, 'Y', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-16949 DB	'Y', 00H, 'V', 00H, 'Y', 00H, 'U', 00H, 00H, 00H
	ORG $+6
$SG-16948 DB	'Y', 00H, 'V', 00H, 'U', 00H, '9', 00H, 00H, 00H
	ORG $+6
$SG-16947 DB	'Y', 00H, '4', 00H, '1', 00H, 'P', 00H, 00H, 00H
	ORG $+6
$SG-16946 DB	'Y', 00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-16945 DB	'I', 00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG-16944 DB	'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG-16943 DB	'R', 00H, 'G', 00H, 'B', 00H, '3', 00H, '2', 00H, 00H, 00H
	ORG $+4
$SG-16942 DB	'R', 00H, 'G', 00H, 'B', 00H, '2', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG-16941 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+6
inputPriority DD 01H
	DD	06H
	DD	07H
	DD	07H
	DD	0cH
	DD	0cH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0dH
	DD	0dH
	DD	0dH
	DD	0dH
	DD	05H
	DD	0ffffffffH
	DD	0aH
	DD	0aH
	DD	0aH
	DD	09H
PUBLIC	?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z	; CopyMediaType
EXTRN	memcpy:PROC
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.cpp
pdata	SEGMENT
$pdata$?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z DD imagerel $LN9
	DD	imagerel $LN9+124
	DD	imagerel $unwind$?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z
_TEXT	SEGMENT
pmtTarget$ = 48
pmtSource$ = 56
?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z PROC	; CopyMediaType, COMDAT

; 36   : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 37   :     *pmtTarget = *pmtSource;

	mov	r8d, 88					; 00000058H
	mov	rdi, rdx
	mov	rbx, rcx
	call	memcpy

; 38   : 
; 39   :     if(!pmtSource || !pmtTarget) return S_FALSE;
; 40   : 
; 41   :     if(pmtSource->cbFormat && pmtSource->pbFormat)

	mov	r11d, DWORD PTR [rdi+72]
	test	r11d, r11d
	je	SHORT $LN2@CopyMediaT
	cmp	QWORD PTR [rdi+80], 0
	je	SHORT $LN2@CopyMediaT

; 42   :     {
; 43   :         pmtTarget->pbFormat = (PBYTE)CoTaskMemAlloc(pmtSource->cbFormat);

	mov	ecx, r11d
	call	QWORD PTR __imp_CoTaskMemAlloc
	mov	QWORD PTR [rbx+80], rax

; 44   :         if(pmtTarget->pbFormat == NULL)

	test	rax, rax
	jne	SHORT $LN3@CopyMediaT

; 45   :         {
; 46   :             pmtTarget->cbFormat = 0;

	mov	DWORD PTR [rbx+72], eax

; 47   :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; ffffffff8007000eH

; 57   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@CopyMediaT:

; 48   :         }
; 49   :         else
; 50   :             mcpy(pmtTarget->pbFormat, pmtSource->pbFormat, pmtTarget->cbFormat);

	mov	r8d, DWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rdi+80]
	mov	rcx, rax
	call	memcpy
$LN2@CopyMediaT:

; 51   :     }
; 52   : 
; 53   :     if(pmtTarget->pUnk != NULL)

	mov	rcx, QWORD PTR [rbx+64]
	test	rcx, rcx
	je	SHORT $LN1@CopyMediaT

; 54   :         pmtTarget->pUnk->AddRef();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
$LN1@CopyMediaT:

; 55   : 
; 56   :     return S_OK;

	xor	eax, eax

; 57   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?CopyMediaType@@YAJPEAU_AMMediaType@@PEBU1@@Z ENDP	; CopyMediaType
_TEXT	ENDS
PUBLIC	?FreeMediaType@@YAXAEAU_AMMediaType@@@Z		; FreeMediaType
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FreeMediaType@@YAXAEAU_AMMediaType@@@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$?FreeMediaType@@YAXAEAU_AMMediaType@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FreeMediaType@@YAXAEAU_AMMediaType@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?FreeMediaType@@YAXAEAU_AMMediaType@@@Z
_TEXT	SEGMENT
mt$ = 48
?FreeMediaType@@YAXAEAU_AMMediaType@@@Z PROC		; FreeMediaType, COMDAT

; 24   : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H

; 25   :     if(mt.cbFormat != 0)

	cmp	DWORD PTR [rcx+72], 0
	mov	rbx, rcx
	je	SHORT $LN2@FreeMediaT

; 26   :     {
; 27   :         CoTaskMemFree((LPVOID)mt.pbFormat);

	mov	rcx, QWORD PTR [rcx+80]
	call	QWORD PTR __imp_CoTaskMemFree

; 28   :         mt.cbFormat = 0;

	mov	DWORD PTR [rbx+72], 0

; 29   :         mt.pbFormat = NULL;

	mov	QWORD PTR [rbx+80], 0
$LN2@FreeMediaT:

; 30   :     }
; 31   : 
; 32   :     SafeRelease(mt.pUnk);

	mov	rcx, QWORD PTR [rbx+64]
	test	rcx, rcx
	je	SHORT $LN1@FreeMediaT
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+64], 0
$LN1@FreeMediaT:

; 33   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?FreeMediaType@@YAXAEAU_AMMediaType@@@Z ENDP		; FreeMediaType
END
