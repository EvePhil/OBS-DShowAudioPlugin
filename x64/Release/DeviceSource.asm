; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?SetInt@DeviceSource@@UEAAXPEB_WH@Z		; DeviceSource::SetInt
PUBLIC	?SetFloat@DeviceSource@@UEAAXPEB_WM@Z		; DeviceSource::SetFloat
PUBLIC	?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ	; DeviceSource::GlobalSourceEnterScene
PUBLIC	?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ	; DeviceSource::GlobalSourceLeaveScene
PUBLIC	?EndScene@DeviceSource@@UEAAXXZ			; DeviceSource::EndScene
PUBLIC	?BeginScene@DeviceSource@@UEAAXXZ		; DeviceSource::BeginScene
PUBLIC	?UpdateSettings@DeviceSource@@UEAAXXZ		; DeviceSource::UpdateSettings
PUBLIC	?Render@DeviceSource@@UEAAXAEBUVect2@@0@Z	; DeviceSource::Render
PUBLIC	?Preprocess@DeviceSource@@UEAAXXZ		; DeviceSource::Preprocess
PUBLIC	??_R4DeviceSource@@6B@				; DeviceSource::`RTTI Complete Object Locator'
PUBLIC	??_R3DeviceSource@@8				; DeviceSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DeviceSource@@8				; DeviceSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ImageSource@@8			; ImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3ImageSource@@8				; ImageSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ImageSource@@8				; ImageSource::`RTTI Base Class Array'
PUBLIC	??_R0?AVImageSource@@@8				; ImageSource `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@DeviceSource@@8			; DeviceSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDeviceSource@@@8			; DeviceSource `RTTI Type Descriptor'
PUBLIC	??1?$List@PEAUSampleData@@@@QEAA@XZ		; List<SampleData * __ptr64>::~List<SampleData * __ptr64>
PUBLIC	?GetSize@DeviceSource@@UEBA?AUVect2@@XZ		; DeviceSource::GetSize
PUBLIC	??_GDeviceSource@@UEAAPEAXI@Z			; DeviceSource::`scalar deleting destructor'
PUBLIC	?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z	; DeleteMediaType
PUBLIC	?msetd@@YAXPEAXK_K@Z				; msetd
PUBLIC	?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z ; CreateTexture
PUBLIC	?FreeData@MediaOutputInfo@@QEAAXXZ		; MediaOutputInfo::FreeData
PUBLIC	??0?$List@E@@QEAA@XZ				; List<unsigned char>::List<unsigned char>
PUBLIC	??0DeviceAudioSource@@QEAA@XZ			; DeviceAudioSource::DeviceAudioSource
PUBLIC	??0?$List@UMediaOutputInfo@@@@QEAA@XZ		; List<MediaOutputInfo>::List<MediaOutputInfo>
PUBLIC	?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ	; List<MediaOutputInfo>::Clear
PUBLIC	??1?$List@UMediaOutputInfo@@@@QEAA@XZ		; List<MediaOutputInfo>::~List<MediaOutputInfo>
PUBLIC	?Num@?$List@UMediaOutputInfo@@@@QEBAIXZ		; List<MediaOutputInfo>::Num
PUBLIC	??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z ; List<MediaOutputInfo>::operator[]
PUBLIC	??0SampleData@@QEAA@XZ				; SampleData::SampleData
PUBLIC	?mcpyrev@@YAXPEAXPEBX_K@Z			; mcpyrev
PUBLIC	?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z ; List<SampleData * __ptr64>::Add
PUBLIC	?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z ; List<SampleData * __ptr64>::Insert
PUBLIC	??_R0?AUMediaOutputInfo@@@8			; MediaOutputInfo `RTTI Type Descriptor'
PUBLIC	??_7DeviceSource@@6B@				; DeviceSource::`vftable'
EXTRN	?GetMatrix@ImageSource@@UEBA_NPEB_WAEAUMatrix@@@Z:PROC ; ImageSource::GetMatrix
EXTRN	?GetVector4@ImageSource@@UEBA_NPEB_WAEAUVect4@@@Z:PROC ; ImageSource::GetVector4
EXTRN	?GetVector2@ImageSource@@UEBA_NPEB_WAEAUVect2@@@Z:PROC ; ImageSource::GetVector2
EXTRN	?GetVector@ImageSource@@UEBA_NPEB_WAEAUVect@@@Z:PROC ; ImageSource::GetVector
EXTRN	?GetString@ImageSource@@UEBA_NPEB_WAEAVString@@@Z:PROC ; ImageSource::GetString
EXTRN	?GetInt@ImageSource@@UEBA_NPEB_WAEAH@Z:PROC	; ImageSource::GetInt
EXTRN	?GetFloat@ImageSource@@UEBA_NPEB_WAEAM@Z:PROC	; ImageSource::GetFloat
EXTRN	?SetMatrix@ImageSource@@UEAAXPEB_WAEBUMatrix@@@Z:PROC ; ImageSource::SetMatrix
EXTRN	?SetVector4@ImageSource@@UEAAXPEB_WAEBUVect4@@@Z:PROC ; ImageSource::SetVector4
EXTRN	?SetVector2@ImageSource@@UEAAXPEB_WAEBUVect2@@@Z:PROC ; ImageSource::SetVector2
EXTRN	?SetVector@ImageSource@@UEAAXPEB_WAEBUVect@@@Z:PROC ; ImageSource::SetVector
EXTRN	?SetString@ImageSource@@UEAAXPEB_W0@Z:PROC	; ImageSource::SetString
EXTRN	?Tick@ImageSource@@UEAAXM@Z:PROC		; ImageSource::Tick
EXTRN	IID_IFilterGraph:BYTE
EXTRN	IID_ICaptureGraphBuilder2:BYTE
EXTRN	CLSID_CaptureGraphBuilder2:BYTE
EXTRN	CLSID_FilterGraph:BYTE
EXTRN	__imp_??_7ImageSource@@6B@:BYTE
EXTRN	__imp_??1ImageSource@@UEAA@XZ:PROC
EXTRN	__imp_?Tick@ImageSource@@UEAAXM@Z:PROC
EXTRN	__imp_?SetString@ImageSource@@UEAAXPEB_W0@Z:PROC
EXTRN	__imp_?SetVector@ImageSource@@UEAAXPEB_WAEBUVect@@@Z:PROC
EXTRN	__imp_?SetVector2@ImageSource@@UEAAXPEB_WAEBUVect2@@@Z:PROC
EXTRN	__imp_?SetVector4@ImageSource@@UEAAXPEB_WAEBUVect4@@@Z:PROC
EXTRN	__imp_?SetMatrix@ImageSource@@UEAAXPEB_WAEBUMatrix@@@Z:PROC
EXTRN	__imp_?GetFloat@ImageSource@@UEBA_NPEB_WAEAM@Z:PROC
EXTRN	__imp_?GetInt@ImageSource@@UEBA_NPEB_WAEAH@Z:PROC
EXTRN	__imp_?GetString@ImageSource@@UEBA_NPEB_WAEAVString@@@Z:PROC
EXTRN	__imp_?GetVector@ImageSource@@UEBA_NPEB_WAEAUVect@@@Z:PROC
EXTRN	__imp_?GetVector2@ImageSource@@UEBA_NPEB_WAEAUVect2@@@Z:PROC
EXTRN	__imp_?GetVector4@ImageSource@@UEBA_NPEB_WAEAUVect4@@@Z:PROC
EXTRN	__imp_?GetMatrix@ImageSource@@UEBA_NPEB_WAEAUMatrix@@@Z:PROC
EXTRN	__imp_??0Vect2@@QEAA@MM@Z:PROC
EXTRN	??_EDeviceSource@@UEAAPEAXI@Z:PROC		; DeviceSource::`vector deleting destructor'
EXTRN	FORMAT_WaveFormatEx:BYTE
EXTRN	__imp_?Log@@YAXPEB_WZZ:PROC
EXTRN	__imp_??0String@@QEAA@XZ:PROC
EXTRN	__imp_??4String@@QEAAAEAV0@PEB_W@Z:PROC
EXTRN	__imp_??4String@@QEAAAEAV0@AEBV0@@Z:PROC
EXTRN	__imp_?Compare@String@@QEBAHPEB_W@Z:PROC
EXTRN	__imp_?IsEmpty@String@@QEBAHXZ:PROC
EXTRN	__imp_?IsValid@String@@QEBAHXZ:PROC
EXTRN	__imp_?FormattedString@@YA?AVString@@PEB_WZZ:PROC
EXTRN	__imp_??ZVect4@@QEAAAEAU0@M@Z:PROC
EXTRN	__imp_?GS@@3PEAVGraphicsSystem@@EA:QWORD
EXTRN	__imp_CoCreateInstance:PROC
EXTRN	IID_IAMStreamConfig:BYTE
EXTRN	IID_IMediaControl:BYTE
EXTRN	CLSID_DSoundRender:BYTE
EXTRN	CLSID_VideoInputDeviceCategory:BYTE
EXTRN	CLSID_AudioInputDeviceCategory:BYTE
EXTRN	CLSID_AudioRendererCategory:BYTE
EXTRN	PIN_CATEGORY_CAPTURE:BYTE
EXTRN	__imp_CoTaskMemFree:PROC
EXTRN	__imp_??0AudioSource@@QEAA@XZ:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_?OSTerminateThread@@YAHPEAXK@Z:PROC
EXTRN	__imp_?OSDebugOut@@YAXPEB_WZZ:PROC
EXTRN	__imp_?GetFloat@XElement@@QEBAMPEB_WM@Z:PROC
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_?OSGetTotalCores@@YAHXZ:PROC
EXTRN	__imp_?SetVolume@AudioSource@@QEAAXM@Z:PROC
EXTRN	IID_IBasicAudio:BYTE
EXTRN	__imp_??0String@@QEAA@PEB_W@Z:PROC
EXTRN	__imp_??1String@@QEAA@XZ:PROC
EXTRN	__imp_?CompareI@String@@QEBAHPEB_W@Z:PROC
EXTRN	__imp_??BString@@QEBAPEA_WXZ:PROC
EXTRN	__imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z:PROC
EXTRN	__imp_?GetInt@XElement@@QEBAHPEB_WH@Z:PROC
EXTRN	__imp_?SetTimeOffset@AudioSource@@QEAAXH@Z:PROC
EXTRN	__imp_?scmpi@@YAHPEB_W0@Z:PROC
;	COMDAT ??_7DeviceSource@@6B@
CONST	SEGMENT
??_7DeviceSource@@6B@ DQ FLAT:??_R4DeviceSource@@6B@	; DeviceSource::`vftable'
	DQ	FLAT:??_EDeviceSource@@UEAAPEAXI@Z
	DQ	FLAT:?Preprocess@DeviceSource@@UEAAXXZ
	DQ	FLAT:?Tick@ImageSource@@UEAAXM@Z
	DQ	FLAT:?Render@DeviceSource@@UEAAXAEBUVect2@@0@Z
	DQ	FLAT:?GetSize@DeviceSource@@UEBA?AUVect2@@XZ
	DQ	FLAT:?UpdateSettings@DeviceSource@@UEAAXXZ
	DQ	FLAT:?BeginScene@DeviceSource@@UEAAXXZ
	DQ	FLAT:?EndScene@DeviceSource@@UEAAXXZ
	DQ	FLAT:?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ
	DQ	FLAT:?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ
	DQ	FLAT:?SetFloat@DeviceSource@@UEAAXPEB_WM@Z
	DQ	FLAT:?SetInt@DeviceSource@@UEAAXPEB_WH@Z
	DQ	FLAT:?SetString@ImageSource@@UEAAXPEB_W0@Z
	DQ	FLAT:?SetVector@ImageSource@@UEAAXPEB_WAEBUVect@@@Z
	DQ	FLAT:?SetVector2@ImageSource@@UEAAXPEB_WAEBUVect2@@@Z
	DQ	FLAT:?SetVector4@ImageSource@@UEAAXPEB_WAEBUVect4@@@Z
	DQ	FLAT:?SetMatrix@ImageSource@@UEAAXPEB_WAEBUMatrix@@@Z
	DQ	FLAT:?GetFloat@ImageSource@@UEBA_NPEB_WAEAM@Z
	DQ	FLAT:?GetInt@ImageSource@@UEBA_NPEB_WAEAH@Z
	DQ	FLAT:?GetString@ImageSource@@UEBA_NPEB_WAEAVString@@@Z
	DQ	FLAT:?GetVector@ImageSource@@UEBA_NPEB_WAEAUVect@@@Z
	DQ	FLAT:?GetVector2@ImageSource@@UEBA_NPEB_WAEAUVect2@@@Z
	DQ	FLAT:?GetVector4@ImageSource@@UEBA_NPEB_WAEAUVect4@@@Z
	DQ	FLAT:?GetMatrix@ImageSource@@UEBA_NPEB_WAEAUMatrix@@@Z
CONST	ENDS
;	COMDAT ??_R4DeviceSource@@6B@
rdata$r	SEGMENT
??_R4DeviceSource@@6B@ DD 01H				; DeviceSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDeviceSource@@@8
	DD	imagerel ??_R3DeviceSource@@8
	DD	imagerel ??_R4DeviceSource@@6B@
rdata$r	ENDS
;	COMDAT ??_R3DeviceSource@@8
rdata$r	SEGMENT
??_R3DeviceSource@@8 DD 00H				; DeviceSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2DeviceSource@@8
rdata$r	ENDS
;	COMDAT ??_R2DeviceSource@@8
rdata$r	SEGMENT
??_R2DeviceSource@@8 DD imagerel ??_R1A@?0A@EA@DeviceSource@@8 ; DeviceSource::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ImageSource@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ImageSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ImageSource@@8 DD imagerel ??_R0?AVImageSource@@@8 ; ImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R3ImageSource@@8
rdata$r	SEGMENT
??_R3ImageSource@@8 DD 00H				; ImageSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R2ImageSource@@8
rdata$r	SEGMENT
??_R2ImageSource@@8 DD imagerel ??_R1A@?0A@EA@ImageSource@@8 ; ImageSource::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVImageSource@@@8
_DATA	SEGMENT
??_R0?AVImageSource@@@8 DQ FLAT:??_7type_info@@6B@	; ImageSource `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVImageSource@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DeviceSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DeviceSource@@8 DD imagerel ??_R0?AVDeviceSource@@@8 ; DeviceSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DeviceSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDeviceSource@@@8
_DATA	SEGMENT
??_R0?AVDeviceSource@@@8 DQ FLAT:??_7type_info@@6B@	; DeviceSource `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDeviceSource@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUMediaOutputInfo@@@8
_DATA	SEGMENT
??_R0?AUMediaOutputInfo@@@8 DQ FLAT:??_7type_info@@6B@	; MediaOutputInfo `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUMediaOutputInfo@@', 00H
$SG-7232 DB	00H
	ORG $+2
$SG-7233 DB	00H, 00H
	ORG $+2
$SG-7251 DB	'M', 00H, 'J', 00H, 'P', 00H, 'G', 00H, 00H, 00H
	ORG $+6
$SG-7250 DB	'd', 00H, 'v', 00H, 'h', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG-7249 DB	'd', 00H, 'v', 00H, 's', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG-7248 DB	'd', 00H, 'v', 00H, 's', 00H, 'l', 00H, 00H, 00H
	ORG $+6
$SG-7247 DB	'H', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG-7246 DB	'M', 00H, 'P', 00H, 'E', 00H, 'G', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG-7245 DB	'H', 00H, 'D', 00H, 'Y', 00H, 'C', 00H, 00H, 00H
	ORG $+6
$SG-7244 DB	'U', 00H, 'Y', 00H, 'V', 00H, 'Y', 00H, 00H, 00H
	ORG $+6
$SG-7243 DB	'Y', 00H, 'U', 00H, 'Y', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-7242 DB	'Y', 00H, 'V', 00H, 'Y', 00H, 'U', 00H, 00H, 00H
	ORG $+6
$SG-7241 DB	'Y', 00H, 'V', 00H, 'U', 00H, '9', 00H, 00H, 00H
	ORG $+6
$SG-7240 DB	'Y', 00H, '4', 00H, '1', 00H, 'P', 00H, 00H, 00H
	ORG $+6
$SG-7239 DB	'Y', 00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG-7238 DB	'I', 00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG-7237 DB	'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG-7236 DB	'R', 00H, 'G', 00H, 'B', 00H, '3', 00H, '2', 00H, 00H, 00H
	ORG $+4
$SG-7235 DB	'R', 00H, 'G', 00H, 'B', 00H, '2', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG-7234 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG-7258 DB	'f', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'A', 00H, 'u'
	DB	00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-7259 DB	'c', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG-7252 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'i', 00H, 'l', 00H
	DB	'd', 00H, ' ', 00H, 'I', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p'
	DB	00H, 'h', 00H, 'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG-7253 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'i', 00H, 'l', 00H
	DB	'd', 00H, ' ', 00H, 'I', 00H, 'C', 00H, 'a', 00H, 'p', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 'G', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 'h', 00H, 'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '2', 00H, ',', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H
	DB	00H, 00H
$SG-7254 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 00H, 00H
$SG-7255 DB	'U', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's'
	DB	00H, 'h', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'a', 00H, 'u', 00H
	DB	'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p'
	DB	00H, 'u', 00H, 't', 00H, 00H, 00H
	ORG $+6
$SG-7256 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'u'
	DB	00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 'u', 00H, ',', 00H, ' ', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l'
	DB	00H, 's', 00H, ':', 00H, ' ', 00H, '%', 00H, 'u', 00H, ',', 00H
	DB	' ', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, 'p', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'e', 00H, 'c', 00H, ':', 00H, ' ', 00H, '%', 00H, 'u'
	DB	00H, ',', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ':'
	DB	00H, ' ', 00H, '%', 00H, 'u', 00H, 00H, 00H
	ORG $+2
$SG-7257 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'w', 00H
	DB	'a', 00H, 's', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 'v', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H
$SG-7260 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-7261 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-7262 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'I', 00H, 'D', 00H, 00H, 00H
	ORG $+6
$SG-7263 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-7264 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-7265 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'D'
	DB	00H, 00H, 00H
	ORG $+4
$SG-7266 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H, 'L'
	DB	00H, 'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H
	ORG $+6
$SG-7267 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, '_', 00H
	DB	'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'I', 00H, 'n'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'g', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG-7268 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, '_', 00H
	DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 'I', 00H, 'n'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'g', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG-7269 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, '_', 00H
	DB	'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H
	DB	'C', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, 00H, 00H
$SG-7270 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG-7271 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-7272 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-7273 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-7274 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+6
$SG-7275 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+6
$SG-7276 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
	ORG $+4
$SG-7277 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG-7278 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG-7279 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-7280 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+6
$SG-7281 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'I', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ':'
	DB	00H, ' ', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H
	DB	'''', 00H, '%', 00H, 's', 00H, '''', 00H, ',', 00H, ' ', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 'h', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, 00H, 00H
	ORG $+6
$SG-7282 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-7283 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'N', 00H
	DB	'o', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+6
$SG-7284 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-7285 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'a', 00H, 'u', 00H
	DB	'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, ',', 00H, 0dH, 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, ' ', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	',', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H
	ORG $+6
$SG-7297 DB	'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H
	ORG $+12
$SG-7286 DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, 00H, 00H
	ORG $+10
$SG-7287 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'a', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'M', 00H, 'e', 00H, 'd'
	DB	00H, 'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'N', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	'0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-7288 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'a', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'M', 00H, 'e', 00H, 'd'
	DB	00H, 'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'N', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	'0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-7289 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H
	ORG $+6
$SG-7290 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H, 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'r', 00H
	DB	'a', 00H, 'p', 00H, 'h', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+4
$SG-7291 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'u', 00H
	DB	'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'p'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG-7292 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'P', 00H
	DB	'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' '
	DB	00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'u', 00H
	DB	'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H
	ORG $+6
$SG-7293 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'r', 00H
	DB	'a', 00H, 'p', 00H, 'h', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+4
$SG-7294 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 'h', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+6
$SG-7295 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'a'
	DB	00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'p', 00H, 'i', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H
	DB	00H, 00H
	ORG $+12
$SG-7296 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'F', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'I', 00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'C'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H
	DB	',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H
	DB	'8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+4
$SG-7298 DB	'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 's', 00H, ','
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H
	ORG $+4
$SG-7299 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H
	DB	00H
	ORG $+14
$SG-7300 DB	'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 's', 00H, ','
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H
	ORG $+4
$SG-7301 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG-7302 DB	'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 's', 00H, ','
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H
	ORG $+4
$SG-7303 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG-7304 DB	'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 's', 00H, ','
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, 'w', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'f', 00H, 't', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H
	ORG $+12
$SG-7305 DB	'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'A', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H, 'l', 00H, 'u'
	DB	00H, 'g', 00H, 'i', 00H, 'n', 00H, ':', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'R', 00H, 'u', 00H, 'n', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l'
	DB	00H, 'X', 00H, 00H, 00H
	ORG $+4
$SG-7306 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-7307 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-7308 DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'I', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 00H, 00H
	ORG $+4
$SG-7309 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H
$SG-7310 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+6
$SG-7311 DB	'c', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG-7312 DB	'u', 00H, 's', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG-7313 DB	'p', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, 00H, 00H
	ORG $+4
$SG-7314 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-7315 DB	't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-7316 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
pdata	SEGMENT
$pdata$?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z
_TEXT	SEGMENT
this$ = 48
val$ = 56
?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z PROC ; List<SampleData * __ptr64>::Add, COMDAT

; 40   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 41   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	inc	DWORD PTR [rcx+8]
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	r8d, DWORD PTR [rcx+8]
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rax]
	mov	rbx, rdx
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rdi]
	shl	r8, 3
	call	QWORD PTR [rax+16]

; 42   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	edx, DWORD PTR [rdi+8]
	mov	QWORD PTR [rdi], rax
	mov	rcx, QWORD PTR [rbx]

; 43   :         return num-1;
; 44   :     }

	mov	rbx, QWORD PTR [rsp+48]
	dec	edx
	mov	QWORD PTR [rax+rdx*8], rcx
	mov	eax, DWORD PTR [rdi+8]
	dec	eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Add@?$List@PEAUSampleData@@@@QEAAIAEBQEAUSampleData@@@Z ENDP ; List<SampleData * __ptr64>::Add
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z PROC ; List<MediaOutputInfo>::operator[], COMDAT

; 374  :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, rcx

; 375  :         assert(index < num);
; 376  :         if(index >= num) {CrashError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	cmp	edx, DWORD PTR [rcx+8]
	jb	SHORT $LN1@operator
	lea	rdx, OFFSET FLAT:?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	lea	rcx, OFFSET FLAT:??_R0?AUMediaOutputInfo@@@8
	call	?name@type_info@@QEBAPEBDPEAU__type_info_node@@@Z ; type_info::name
	lea	rcx, OFFSET FLAT:??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	mov	r8d, ebx
	mov	rdx, rax
	call	QWORD PTR __imp_?CrashError@@YAXPEB_WZZ
	mov	rax, QWORD PTR [rdi]

; 378  :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN1@operator:

; 377  :         return array[index];

	mov	rax, rbx

; 378  :     }

	mov	rbx, QWORD PTR [rsp+48]
	shl	rax, 6
	add	rax, QWORD PTR [rcx]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$List@UMediaOutputInfo@@@@QEAAAEAUMediaOutputInfo@@I@Z ENDP ; List<MediaOutputInfo>::operator[]
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Num@?$List@UMediaOutputInfo@@@@QEBAIXZ
_TEXT	SEGMENT
this$ = 8
?Num@?$List@UMediaOutputInfo@@@@QEBAIXZ PROC		; List<MediaOutputInfo>::Num, COMDAT

; 37   :     inline unsigned int Num() const     {return num;}

	mov	eax, DWORD PTR [rcx+8]
	ret	0
?Num@?$List@UMediaOutputInfo@@@@QEBAIXZ ENDP		; List<MediaOutputInfo>::Num
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$List@UMediaOutputInfo@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$List@UMediaOutputInfo@@@@QEAA@XZ PROC		; List<MediaOutputInfo>::List<MediaOutputInfo>, COMDAT

; 30   :     inline List() : array(NULL), num(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax
	mov	rax, rcx
	ret	0
??0?$List@UMediaOutputInfo@@@@QEAA@XZ ENDP		; List<MediaOutputInfo>::List<MediaOutputInfo>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$List@E@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$List@E@@QEAA@XZ PROC				; List<unsigned char>::List<unsigned char>, COMDAT

; 30   :     inline List() : array(NULL), num(0) {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	DWORD PTR [rcx+8], eax
	mov	rax, rcx
	ret	0
??0?$List@E@@QEAA@XZ ENDP				; List<unsigned char>::List<unsigned char>
_TEXT	ENDS
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
pdata	SEGMENT
$pdata$?SetFloat@DeviceSource@@UEAAXPEB_WM@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$?SetFloat@DeviceSource@@UEAAXPEB_WM@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetFloat@DeviceSource@@UEAAXPEB_WM@Z DD 041201H
	DD	026812H
	DD	030025206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?SetFloat@DeviceSource@@UEAAXPEB_WM@Z
_TEXT	SEGMENT
this$ = 64
lpName$ = 72
fValue$ = 80
?SetFloat@DeviceSource@@UEAAXPEB_WM@Z PROC		; DeviceSource::SetFloat, COMDAT

; 789  : {

$LN5:
	push	rbx
	sub	rsp, 48					; 00000030H

; 790  :     if(!bCapturing)

	cmp	BYTE PTR [rcx+308], 0
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rax, rdx
	movaps	xmm6, xmm2
	mov	rbx, rcx
	je	SHORT $LN1@SetFloat

; 791  :         return;
; 792  : 
; 793  :     if(scmpi(lpName, TEXT("volume")) == 0)

	lea	rdx, OFFSET FLAT:$SG-7316
	mov	rcx, rax
	call	QWORD PTR __imp_?scmpi@@YAHPEB_W0@Z
	test	eax, eax
	jne	SHORT $LN1@SetFloat

; 794  :     {
; 795  :         fNewVol = fValue;

	movss	DWORD PTR [rbx+100], xmm6

; 796  :         bRequestVolume = true;

	mov	BYTE PTR [rbx+96], 1
$LN1@SetFloat:

; 797  :     }
; 798  : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
?SetFloat@DeviceSource@@UEAAXPEB_WM@Z ENDP		; DeviceSource::SetFloat
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetInt@DeviceSource@@UEAAXPEB_WH@Z DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$?SetInt@DeviceSource@@UEAAXPEB_WH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetInt@DeviceSource@@UEAAXPEB_WH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?SetInt@DeviceSource@@UEAAXPEB_WH@Z
_TEXT	SEGMENT
this$ = 48
lpName$ = 56
iVal$ = 64
?SetInt@DeviceSource@@UEAAXPEB_WH@Z PROC		; DeviceSource::SetInt, COMDAT

; 777  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 778  :     if(bCapturing)

	cmp	BYTE PTR [rcx+308], 0
	mov	edi, r8d
	mov	rax, rdx
	mov	rbx, rcx
	je	SHORT $LN1@SetInt

; 779  :     {
; 780  :         if(scmpi(lpName, TEXT("timeOffset")) == 0)

	lea	rdx, OFFSET FLAT:$SG-7315
	mov	rcx, rax
	call	QWORD PTR __imp_?scmpi@@YAHPEB_W0@Z
	test	eax, eax
	jne	SHORT $LN1@SetInt

; 781  :         {
; 782  :             if(audioOut)

	mov	rcx, QWORD PTR [rbx+88]
	test	rcx, rcx
	je	SHORT $LN1@SetInt

; 783  :                 audioOut->SetTimeOffset(iVal);

	mov	edx, edi
	call	QWORD PTR __imp_?SetTimeOffset@AudioSource@@QEAAXH@Z
$LN1@SetInt:

; 784  :         }
; 785  :     }
; 786  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?SetInt@DeviceSource@@UEAAXPEB_WH@Z ENDP		; DeviceSource::SetInt
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Render@DeviceSource@@UEAAXAEBUVect2@@0@Z
_TEXT	SEGMENT
this$ = 8
pos$ = 16
size$ = 24
?Render@DeviceSource@@UEAAXAEBUVect2@@0@Z PROC		; DeviceSource::Render, COMDAT

; 746  : }

	ret	0
?Render@DeviceSource@@UEAAXAEBUVect2@@0@Z ENDP		; DeviceSource::Render
_TEXT	ENDS
PUBLIC	__real@40a7700000000000
PUBLIC	__real@3f800000
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+174
	DD	imagerel $unwind$?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ DD 042401H
	DD	026824H
	DD	030025206H
xdata	ENDS
;	COMDAT __real@40a7700000000000
CONST	SEGMENT
__real@40a7700000000000 DQ 040a7700000000000r	; 3000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
basicAudio$91494 = 64
this$ = 64
?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ PROC	; DeviceSource::GlobalSourceEnterScene, COMDAT

; 603  : {

$LN7:
	push	rbx
	sub	rsp, 48					; 00000030H

; 604  :     float sourceVolume = data->GetFloat(TEXT("volume"), 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	mov	rbx, rcx
	mov	rcx, QWORD PTR [rcx+296]
	lea	rdx, OFFSET FLAT:$SG-7306
	movaps	XMMWORD PTR [rsp+32], xmm6
	call	QWORD PTR __imp_?GetFloat@XElement@@QEBAMPEB_WM@Z

; 605  : 
; 606  :     if(soundOutputType == 1) {

	cmp	DWORD PTR [rbx+276], 1
	movaps	xmm6, xmm0
	jne	SHORT $LN4@GlobalSour

; 607  :         audioOut->SetVolume(sourceVolume);

	mov	rcx, QWORD PTR [rbx+88]
	movaps	xmm1, xmm0
	call	QWORD PTR __imp_?SetVolume@AudioSource@@QEAAXM@Z
$LN4@GlobalSour:

; 608  :     }
; 609  :     if(soundOutputType == 2) {

	cmp	DWORD PTR [rbx+276], 2
	jne	SHORT $LN2@GlobalSour

; 610  :         IBasicAudio *basicAudio;
; 611  :         if(SUCCEEDED(audioFilter->QueryInterface(IID_IBasicAudio, (void**)&basicAudio)))

	mov	rcx, QWORD PTR [rbx+56]
	lea	r8, QWORD PTR basicAudio$91494[rsp]
	lea	rdx, OFFSET FLAT:IID_IBasicAudio
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	test	eax, eax
	js	SHORT $LN2@GlobalSour

; 612  :         {
; 613  :             long lVol = long((double(sourceVolume)*NEAR_SILENTf)-NEAR_SILENTf);
; 614  :             if(lVol <= -NEAR_SILENT)
; 615  :                 lVol = -10000;
; 616  :             basicAudio->put_Volume(lVol);

	mov	rcx, QWORD PTR basicAudio$91494[rsp]
	unpcklps xmm6, xmm6
	mov	eax, -10000				; ffffffffffffd8f0H
	cvtps2pd xmm1, xmm6
	mulsd	xmm1, QWORD PTR __real@40a7700000000000
	subsd	xmm1, QWORD PTR __real@40a7700000000000
	cvttsd2si edx, xmm1
	cmp	edx, -3000				; fffffffffffff448H
	cmovle	edx, eax
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]

; 617  :             basicAudio->Release();

	mov	rcx, QWORD PTR basicAudio$91494[rsp]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
$LN2@GlobalSour:

; 618  :         }
; 619  :     }
; 620  : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
?GlobalSourceEnterScene@DeviceSource@@UEAAXXZ ENDP	; DeviceSource::GlobalSourceEnterScene
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+98
	DD	imagerel $unwind$?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
basicAudio$91481 = 48
this$ = 48
?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ PROC	; DeviceSource::GlobalSourceLeaveScene, COMDAT

; 585  : {

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 586  :     if(soundOutputType == 1) {

	cmp	DWORD PTR [rcx+276], 1
	mov	rbx, rcx
	jne	SHORT $LN4@GlobalSour@2

; 587  :         audioOut->SetVolume(0.0f);

	mov	rcx, QWORD PTR [rcx+88]
	xorps	xmm1, xmm1
	call	QWORD PTR __imp_?SetVolume@AudioSource@@QEAAXM@Z
$LN4@GlobalSour@2:

; 588  :     }
; 589  :     if(soundOutputType == 2) {

	cmp	DWORD PTR [rbx+276], 2
	jne	SHORT $LN2@GlobalSour@2

; 590  :         IBasicAudio *basicAudio;
; 591  :         if(SUCCEEDED(audioFilter->QueryInterface(IID_IBasicAudio, (void**)&basicAudio)))

	mov	rcx, QWORD PTR [rbx+56]
	lea	r8, QWORD PTR basicAudio$91481[rsp]
	lea	rdx, OFFSET FLAT:IID_IBasicAudio
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	test	eax, eax
	js	SHORT $LN2@GlobalSour@2

; 592  :         {
; 593  :             long lVol = long((double(0.0)*NEAR_SILENTf)-NEAR_SILENTf);
; 594  :             if(lVol <= -NEAR_SILENT)
; 595  :                 lVol = -10000;
; 596  :             basicAudio->put_Volume(lVol);

	mov	rcx, QWORD PTR basicAudio$91481[rsp]
	mov	edx, -10000				; ffffffffffffd8f0H
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]

; 597  :             basicAudio->Release();

	mov	rcx, QWORD PTR basicAudio$91481[rsp]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
$LN2@GlobalSour@2:

; 598  :         }
; 599  :     }
; 600  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?GlobalSourceLeaveScene@DeviceSource@@UEAAXXZ ENDP	; DeviceSource::GlobalSourceLeaveScene
_TEXT	ENDS
PUBLIC	?Start@DeviceSource@@AEAAXXZ			; DeviceSource::Start
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Start@DeviceSource@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+71
	DD	imagerel $unwind$?Start@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Start@DeviceSource@@AEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Start@DeviceSource@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Start@DeviceSource@@AEAAXXZ PROC			; DeviceSource::Start, COMDAT

; 550  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 551  :     if(bCapturing || !control)

	cmp	BYTE PTR [rcx+308], 0
	mov	rbx, rcx
	jne	SHORT $LN2@Start
	mov	rcx, QWORD PTR [rcx+24]
	test	rcx, rcx
	je	SHORT $LN2@Start

; 552  :         return;
; 553  : 
; 554  :     HRESULT err;
; 555  :     if(FAILED(err = control->Run()))

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]
	test	eax, eax
	jns	SHORT $LN1@Start

; 556  :     {
; 557  :         AppWarning(TEXT("DShowAudioPlugin: control->Run failed, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7305
	mov	edx, eax

; 562  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ
$LN1@Start:

; 558  :         return;
; 559  :     }
; 560  : 
; 561  :     bCapturing = true;

	mov	BYTE PTR [rbx+308], 1
$LN2@Start:

; 562  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Start@DeviceSource@@AEAAXXZ ENDP			; DeviceSource::Start
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.h
_TEXT	ENDS
;	COMDAT ?GetSize@DeviceSource@@UEBA?AUVect2@@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?GetSize@DeviceSource@@UEBA?AUVect2@@XZ PROC		; DeviceSource::GetSize, COMDAT

; 223  :     Vect2 GetSize() const {return Vect2(float(renderCX), float(renderCY));}

	mov	eax, DWORD PTR [rcx+240]
	pxor	xmm0, xmm0
	pxor	xmm1, xmm1
	cvtsi2ss xmm0, rax
	mov	eax, DWORD PTR [rcx+244]
	cvtsi2ss xmm1, rax
	movss	DWORD PTR [rdx], xmm0
	mov	rax, rdx
	movss	DWORD PTR [rdx+4], xmm1
	ret	0
?GetSize@DeviceSource@@UEBA?AUVect2@@XZ ENDP		; DeviceSource::GetSize
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0SampleData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0SampleData@@QEAA@XZ PROC				; SampleData::SampleData, COMDAT

; 48   :     inline SampleData() {refs = 1;}

	mov	DWORD PTR [rcx+24], 1
	mov	rax, rcx
	ret	0
??0SampleData@@QEAA@XZ ENDP				; SampleData::SampleData
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.cpp
pdata	SEGMENT
$pdata$?FreeData@MediaOutputInfo@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+92
	DD	imagerel $unwind$?FreeData@MediaOutputInfo@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FreeData@MediaOutputInfo@@QEAAXXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.h
xdata	ENDS
;	COMDAT ?FreeData@MediaOutputInfo@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?FreeData@MediaOutputInfo@@QEAAXXZ PROC			; MediaOutputInfo::FreeData, COMDAT

; 105  :     {

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 106  :         FreeMediaType(*mediaType);

	mov	rbx, QWORD PTR [rcx+8]
	mov	rdi, rcx
	cmp	DWORD PTR [rbx+72], 0
	je	SHORT $LN4@FreeData
	mov	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp_CoTaskMemFree
	mov	DWORD PTR [rbx+72], 0
	mov	QWORD PTR [rbx+80], 0
$LN4@FreeData:
	mov	rcx, QWORD PTR [rbx+64]
	test	rcx, rcx
	je	SHORT $LN3@FreeData
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+64], 0
$LN3@FreeData:

; 107  :         CoTaskMemFree(mediaType);

	mov	rcx, QWORD PTR [rdi+8]

; 108  :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR __imp_CoTaskMemFree
?FreeData@MediaOutputInfo@@QEAAXXZ ENDP			; MediaOutputInfo::FreeData
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.cpp
pdata	SEGMENT
$pdata$?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z DD imagerel $LN9
	DD	imagerel $LN9+83
	DD	imagerel $unwind$?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z DD 020a01H
	DD	03006320aH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.h
xdata	ENDS
;	COMDAT ?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z
_TEXT	SEGMENT
pmt$ = 48
?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z PROC		; DeleteMediaType, COMDAT

; 27   : {

$LN9:

; 28   :     if(pmt != NULL)

	test	rcx, rcx
	je	SHORT $LN8@DeleteMedi
	push	rbx
	sub	rsp, 32					; 00000020H

; 29   :     {
; 30   :         FreeMediaType(*pmt);

	cmp	DWORD PTR [rcx+72], 0
	mov	rbx, rcx
	je	SHORT $LN5@DeleteMedi
	mov	rcx, QWORD PTR [rcx+80]
	call	QWORD PTR __imp_CoTaskMemFree
	mov	DWORD PTR [rbx+72], 0
	mov	QWORD PTR [rbx+80], 0
$LN5@DeleteMedi:
	mov	rcx, QWORD PTR [rbx+64]
	test	rcx, rcx
	je	SHORT $LN4@DeleteMedi
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+64], 0
$LN4@DeleteMedi:

; 31   :         CoTaskMemFree(pmt);

	mov	rcx, rbx
	call	QWORD PTR __imp_CoTaskMemFree

; 32   :     }
; 33   : }

	add	rsp, 32					; 00000020H
	pop	rbx
$LN8@DeleteMedi:
	fatret	0
?DeleteMediaType@@YAXPEAU_AMMediaType@@@Z ENDP		; DeleteMediaType
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\graphicssystem.h
pdata	SEGMENT
$pdata$?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z DD 010401H
	DD	08204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z
_TEXT	SEGMENT
width$ = 80
height$ = 88
colorFormat$ = 96
lpData$ = 104
?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z PROC ; CreateTexture, COMDAT

; 545  :     {return GS->CreateTexture(width, height, colorFormat, lpData, bGenMipMaps, bStatic);}

$LN3:
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __imp_?GS@@3PEAVGraphicsSystem@@EA
	mov	r10d, ecx
	xor	r11d, r11d
	mov	rcx, QWORD PTR [rax]
	mov	DWORD PTR [rsp+48], r11d
	mov	DWORD PTR [rsp+40], r11d
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+32], r9
	mov	r9d, r8d
	mov	r8d, edx
	mov	edx, r10d
	call	QWORD PTR [rax+48]
	add	rsp, 72					; 00000048H
	ret	0
?CreateTexture@@YAPEAVTexture@@IIW4GSColorFormat@@PEAXHH@Z ENDP ; CreateTexture
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\inline.h
_TEXT	ENDS
;	COMDAT ?mcpyrev@@YAXPEAXPEBX_K@Z
_TEXT	SEGMENT
pDest$ = 8
pSrc$ = 16
iLen$ = 24
?mcpyrev@@YAXPEAXPEBX_K@Z PROC				; mcpyrev, COMDAT

; 147  :     assert(pDest);
; 148  :     assert(pSrc);
; 149  : 
; 150  :     register size_t iLenMod8 = iLen&7;
; 151  :     register size_t iLenDiv8 = iLen>>3;

	mov	r11, r8
	mov	r9, r8

; 152  : 
; 153  :     register BYTE *srcB = (BYTE*)pSrc, *destB = (BYTE*)pDest;
; 154  :     register QWORD *srcQW = (QWORD*)(srcB+iLen), *destQW = (QWORD*)(destB+iLen);

	lea	r10, QWORD PTR [rdx+r8]
	shr	r11, 3
	and	r9d, 7
	lea	rdx, QWORD PTR [rcx+r8]

; 155  :     while(iLenDiv8--)

	test	r11, r11
	je	SHORT $LN9@mcpyrev
	npad	5
$LL4@mcpyrev:

; 156  :         *(--destQW) = *(--srcQW);

	mov	rax, QWORD PTR [r10-8]
	sub	r10, 8
	sub	rdx, 8
	dec	r11
	mov	QWORD PTR [rdx], rax
	jne	SHORT $LL4@mcpyrev
$LN9@mcpyrev:

; 157  : 
; 158  :     srcB = (BYTE*)srcQW;
; 159  :     destB = (BYTE*)destQW;
; 160  :     while(iLenMod8--)

	test	r9, r9
	je	SHORT $LN11@mcpyrev
	sub	rdx, r9
	sub	r10, r9
	npad	1
$LL2@mcpyrev:

; 161  :         *(--destB) = *(--srcB);

	movzx	eax, BYTE PTR [r10+r9-1]
	dec	r9
	mov	BYTE PTR [rdx+r9], al
	jne	SHORT $LL2@mcpyrev
$LN11@mcpyrev:

; 162  : }

	fatret	0
?mcpyrev@@YAXPEAXPEBX_K@Z ENDP				; mcpyrev
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?msetd@@YAXPEAXK_K@Z DD imagerel $LN13
	DD	imagerel $LN13+39
	DD	imagerel $unwind$?msetd@@YAXPEAXK_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?msetd@@YAXPEAXK_K@Z DD imagerel $LN13+39
	DD	imagerel $LN13+62
	DD	imagerel $chain$0$?msetd@@YAXPEAXK_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?msetd@@YAXPEAXK_K@Z DD imagerel $LN13+62
	DD	imagerel $LN13+85
	DD	imagerel $chain$1$?msetd@@YAXPEAXK_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?msetd@@YAXPEAXK_K@Z DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+39
	DD	imagerel $unwind$?msetd@@YAXPEAXK_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?msetd@@YAXPEAXK_K@Z DD 020521H
	DD	047405H
	DD	imagerel $LN13
	DD	imagerel $LN13+39
	DD	imagerel $unwind$?msetd@@YAXPEAXK_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?msetd@@YAXPEAXK_K@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?msetd@@YAXPEAXK_K@Z
_TEXT	SEGMENT
newVal$ = 48
pDest$ = 48
val$ = 56
iLen$ = 64
?msetd@@YAXPEAXK_K@Z PROC				; msetd, COMDAT

; 102  : {

$LN13:
	sub	rsp, 40					; 00000028H
	mov	r10, r8

; 103  :     assert(pDest);
; 104  : 
; 105  :     QWORD newVal = ((QWORD)val)|(((QWORD)val)<<32);

	mov	eax, edx
	mov	r9, rcx
	shl	rax, 32					; 00000020H
	mov	ecx, edx

; 106  : 
; 107  :     register size_t iLenMod8 = iLen&7;
; 108  :     register size_t iLenDiv8 = iLen>>3;

	shr	r10, 3
	or	rax, rcx
	and	r8d, 7
	mov	QWORD PTR newVal$[rsp], rax

; 109  : 
; 110  :     register QWORD *destQW = (QWORD*)pDest;
; 111  :     while(iLenDiv8--)

	test	r10, r10
	je	SHORT $LN4@msetd

; 103  :     assert(pDest);
; 104  : 
; 105  :     QWORD newVal = ((QWORD)val)|(((QWORD)val)<<32);

	mov	QWORD PTR [rsp+32], rdi
	mov	rdi, r9
	mov	rcx, r10
	rep stosq
	mov	rdi, QWORD PTR [rsp+32]

; 109  : 
; 110  :     register QWORD *destQW = (QWORD*)pDest;
; 111  :     while(iLenDiv8--)

	lea	r9, QWORD PTR [r9+r10*8]
$LN4@msetd:

; 115  :     register BYTE *pVal = (BYTE*)&newVal;
; 116  :     while(iLenMod8--)

	test	r8, r8
	je	SHORT $LN2@msetd

; 112  :         *(destQW++) = newVal;
; 113  : 
; 114  :     register BYTE *destB = (BYTE*)destQW;

	lea	rdx, QWORD PTR newVal$[rsp]
	mov	rcx, r9
	call	memcpy
$LN2@msetd:

; 117  :         *(destB++) = *(pVal++);
; 118  : }

	add	rsp, 40					; 00000028H
	ret	0
?msetd@@YAXPEAXK_K@Z ENDP				; msetd
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ PROC		; List<MediaOutputInfo>::Clear, COMDAT

; 329  :     {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 330  :         if(array)

	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN1@Clear@3

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]

; 335  :             array = NULL;

	xor	r11d, r11d
	mov	QWORD PTR [rbx], r11

; 336  :             num = 0;

	mov	DWORD PTR [rbx+8], r11d
$LN1@Clear@3:

; 337  :         }
; 338  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Clear@?$List@UMediaOutputInfo@@@@QEAAXXZ ENDP		; List<MediaOutputInfo>::Clear
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$??1?$List@UMediaOutputInfo@@@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$??1?$List@UMediaOutputInfo@@@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$List@UMediaOutputInfo@@@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ??1?$List@UMediaOutputInfo@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$List@UMediaOutputInfo@@@@QEAA@XZ PROC		; List<MediaOutputInfo>::~List<MediaOutputInfo>, COMDAT

; 32   :     {

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H

; 33   :         Clear();

	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN3@List@2
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	xor	r11d, r11d
	mov	QWORD PTR [rbx], r11
	mov	DWORD PTR [rbx+8], r11d
$LN3@List@2:

; 34   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$List@UMediaOutputInfo@@@@QEAA@XZ ENDP		; List<MediaOutputInfo>::~List<MediaOutputInfo>
_TEXT	ENDS
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z DD imagerel $LN26
	DD	imagerel $LN26+322
	DD	imagerel $unwind$?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z DD 086f01H
	DD	06546fH
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z
_TEXT	SEGMENT
this$ = 48
index$ = 56
val$ = 64
?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z PROC ; List<SampleData * __ptr64>::Insert, COMDAT

; 59   :     {

$LN26:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 60   :         assert(index <= num);
; 61   :         if(index > num) return;
; 62   : 
; 63   :         if(!num && !index)

	cmp	DWORD PTR [rcx+8], 0
	mov	rsi, r8
	mov	edi, edx
	mov	rbx, rcx
	jne	SHORT $LN2@Insert
	test	edx, edx
	jne	SHORT $LN2@Insert

; 64   :         {
; 65   :             Add(val);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	DWORD PTR [rcx+8], 1
	lea	r8d, QWORD PTR [rdx+8]
	mov	rcx, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	edx, DWORD PTR [rbx+8]
	mov	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rsi]
	dec	edx
	mov	QWORD PTR [rax+rdx*8], rcx

; 80   :     }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@Insert:

; 66   :             return;
; 67   :         }
; 68   : 
; 69   :         //this makes it safe to insert an item already in the list
; 70   :         T *temp = (T*)Allocate(sizeof(T));

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	edx, 8
	mov	QWORD PTR [rsp+48], rbp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]

; 71   :         mcpy(temp, &val, sizeof(T));

	mov	rcx, QWORD PTR [rsi]
	mov	QWORD PTR [rax], rcx

; 72   : 
; 73   :         UINT moveCount = num-index;

	mov	ecx, DWORD PTR [rbx+8]
	mov	rbp, rax

; 74   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	lea	edx, DWORD PTR [rcx+1]
	mov	esi, ecx
	mov	rcx, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	DWORD PTR [rbx+8], edx
	mov	rcx, QWORD PTR [rcx]
	mov	r8d, edx
	mov	r9, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx]
	shl	r8, 3
	call	QWORD PTR [r9+16]
	sub	esi, edi
	mov	r10, rax
	mov	QWORD PTR [rbx], rax

; 75   :         if(moveCount)

	je	SHORT $LN24@Insert

; 76   :             mcpyrev(array+(index+1), array+index, moveCount*sizeof(T));

	lea	r9, QWORD PTR [rax+rdi*8]
	mov	edx, esi
	lea	eax, DWORD PTR [rdi+1]
	shl	rdx, 3
	lea	r10, QWORD PTR [r10+rax*8]
	mov	r11, rdx
	mov	r8, rdx
	add	r10, rdx
	shr	r11, 3
	and	r8d, 7
	add	r9, rdx
	test	r11, r11
	je	SHORT $LN22@Insert
	npad	5
$LL15@Insert:
	mov	rax, QWORD PTR [r9-8]
	sub	r9, 8
	sub	r10, 8
	dec	r11
	mov	QWORD PTR [r10], rax
	jne	SHORT $LL15@Insert
$LN22@Insert:
	test	r8, r8
	je	SHORT $LN24@Insert
	sub	r10, r8
	sub	r9, r8
	npad	1
$LL13@Insert:
	movzx	eax, BYTE PTR [r9+r8-1]
	dec	r8
	mov	BYTE PTR [r10+r8], al
	jne	SHORT $LL13@Insert
$LN24@Insert:

; 77   :         mcpy(&array[index], temp, sizeof(T));

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rbp]

; 78   : 
; 79   :         Free(temp);

	mov	rdx, rbp
	mov	QWORD PTR [rcx+rdi*8], rax
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rbp, QWORD PTR [rsp+48]

; 80   :     }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	rex_jmp	QWORD PTR [rax+24]
?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z ENDP ; List<SampleData * __ptr64>::Insert
_TEXT	ENDS
PUBLIC	?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z	; DeviceSource::GetSampleInsertIndex
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z DD imagerel $LN16
	DD	imagerel $LN16+134
	DD	imagerel $unwind$?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z
_TEXT	SEGMENT
this$ = 48
timestamp$ = 56
?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z PROC	; DeviceSource::GetSampleInsertIndex, COMDAT

; 734  : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 735  :     UINT index;
; 736  :     for (index=0; index<samples.Num(); index++) {

	xor	ebx, ebx
	mov	rsi, rdx
	mov	rdi, rcx
	cmp	DWORD PTR [rcx+376], ebx
	jbe	SHORT $LN2@GetSampleI

; 737  :         if (samples[index]->timestamp > timestamp)

	cmp	ebx, DWORD PTR [rcx+376]
	jb	SHORT $LN9@GetSampleI
	lea	rdx, OFFSET FLAT:?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	lea	rcx, OFFSET FLAT:??_R0PEAUSampleData@@@8
	call	?name@type_info@@QEBAPEBDPEAU__type_info_node@@@Z ; type_info::name
	lea	rcx, OFFSET FLAT:??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	mov	r8d, ebx
	mov	rdx, rax
	call	QWORD PTR __imp_?CrashError@@YAXPEB_WZZ
	mov	rax, QWORD PTR [rdi+368]
	jmp	SHORT $LN10@GetSampleI
$LN9@GetSampleI:
	mov	rax, QWORD PTR [rdi+368]
	lea	rax, QWORD PTR [rax+rbx*8]
$LN10@GetSampleI:
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rax+16], rsi
	jg	SHORT $LN2@GetSampleI

; 735  :     UINT index;
; 736  :     for (index=0; index<samples.Num(); index++) {

	inc	ebx
	cmp	ebx, DWORD PTR [rdi+376]
	jb	SHORT $LN9@GetSampleI
$LN2@GetSampleI:

; 738  :             return index;
; 739  :     }
; 740  : 
; 741  :     return index;
; 742  : }

	mov	rsi, QWORD PTR [rsp+56]
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z ENDP	; DeviceSource::GetSampleInsertIndex
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginScene@DeviceSource@@UEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+71
	DD	imagerel $unwind$?BeginScene@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginScene@DeviceSource@@UEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?BeginScene@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
this$ = 48
?BeginScene@DeviceSource@@UEAAXXZ PROC			; DeviceSource::BeginScene, COMDAT

; 575  : {

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H

; 576  :     Start();

	cmp	BYTE PTR [rcx+308], 0
	mov	rbx, rcx
	jne	SHORT $LN4@BeginScene
	mov	rcx, QWORD PTR [rcx+24]
	test	rcx, rcx
	je	SHORT $LN4@BeginScene
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]
	test	eax, eax
	jns	SHORT $LN3@BeginScene
	lea	rcx, OFFSET FLAT:$SG-7305
	mov	edx, eax

; 577  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	rex_jmp	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 576  :     Start();

$LN3@BeginScene:
	mov	BYTE PTR [rbx+308], 1
$LN4@BeginScene:

; 577  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?BeginScene@DeviceSource@@UEAAXXZ ENDP			; DeviceSource::BeginScene
_TEXT	ENDS
PUBLIC	?UnloadFilters@DeviceSource@@AEAAXXZ		; DeviceSource::UnloadFilters
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?UnloadFilters@DeviceSource@@AEAAXXZ DD imagerel $LN32
	DD	imagerel $LN32+24
	DD	imagerel $unwind$?UnloadFilters@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?UnloadFilters@DeviceSource@@AEAAXXZ DD imagerel $LN32+24
	DD	imagerel $LN32+100
	DD	imagerel $chain$1$?UnloadFilters@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?UnloadFilters@DeviceSource@@AEAAXXZ DD imagerel $LN32+100
	DD	imagerel $LN32+291
	DD	imagerel $chain$2$?UnloadFilters@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?UnloadFilters@DeviceSource@@AEAAXXZ DD imagerel $LN32+291
	DD	imagerel $LN32+314
	DD	imagerel $chain$3$?UnloadFilters@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?UnloadFilters@DeviceSource@@AEAAXXZ DD imagerel $LN32+314
	DD	imagerel $LN32+697
	DD	imagerel $chain$4$?UnloadFilters@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?UnloadFilters@DeviceSource@@AEAAXXZ DD 021H
	DD	imagerel $LN32
	DD	imagerel $LN32+24
	DD	imagerel $unwind$?UnloadFilters@DeviceSource@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?UnloadFilters@DeviceSource@@AEAAXXZ DD 021H
	DD	imagerel $LN32+24
	DD	imagerel $LN32+100
	DD	imagerel $chain$1$?UnloadFilters@DeviceSource@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?UnloadFilters@DeviceSource@@AEAAXXZ DD 020521H
	DD	087405H
	DD	imagerel $LN32+24
	DD	imagerel $LN32+100
	DD	imagerel $chain$1$?UnloadFilters@DeviceSource@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?UnloadFilters@DeviceSource@@AEAAXXZ DD 040a21H
	DD	07640aH
	DD	065405H
	DD	imagerel $LN32
	DD	imagerel $LN32+24
	DD	imagerel $unwind$?UnloadFilters@DeviceSource@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnloadFilters@DeviceSource@@AEAAXXZ DD 040b01H
	DD	09340bH
	DD	0c007320bH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?UnloadFilters@DeviceSource@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?UnloadFilters@DeviceSource@@AEAAXXZ PROC		; DeviceSource::UnloadFilters, COMDAT

; 476  : {

$LN32:
	mov	QWORD PTR [rsp+32], rbx
	push	r12
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 477  :     if(texture)

	mov	rcx, QWORD PTR [rcx+288]
	xor	r12d, r12d
	mov	QWORD PTR [rsp+48], rbp
	mov	QWORD PTR [rsp+56], rsi
	test	rcx, rcx
	je	SHORT $LN17@UnloadFilt

; 478  :     {
; 479  :         delete texture;

	mov	rax, QWORD PTR [rcx]
	lea	edx, QWORD PTR [r12+1]
	call	QWORD PTR [rax]

; 480  :         texture = NULL;

	mov	QWORD PTR [rbx+288], r12
$LN17@UnloadFilt:

; 481  :     }
; 482  : 
; 483  :     int numThreads = MAX(OSGetTotalCores()-2, 1);

	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	sub	eax, 2
	cmp	eax, 1
	jle	SHORT $LN22@UnloadFilt
	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	sub	eax, 2
	jmp	SHORT $LN23@UnloadFilt
$LN22@UnloadFilt:
	mov	eax, 1
$LN23@UnloadFilt:

; 484  :     for(int i=0; i<numThreads; i++)

	mov	rsi, r12
	movsxd	rbp, eax
	test	eax, eax
	jle	$LN14@UnloadFilt
	mov	QWORD PTR [rsp+64], rdi
	mov	rdi, r12
	npad	4
$LL16@UnloadFilt:

; 485  :     {
; 486  :         if(hConvertThreads[i])

	mov	rax, QWORD PTR [rbx+408]
	cmp	QWORD PTR [rax+rsi*8], r12
	je	SHORT $LN13@UnloadFilt

; 487  :         {
; 488  :             convertData[i].bKillThread = true;

	mov	rax, QWORD PTR [rbx+400]
	mov	BYTE PTR [rdi+rax+40], 1

; 489  :             SetEvent(convertData[i].hSignalConvert);

	mov	rcx, QWORD PTR [rbx+400]
	mov	rcx, QWORD PTR [rdi+rcx+24]
	call	QWORD PTR __imp_SetEvent

; 490  : 
; 491  :             OSTerminateThread(hConvertThreads[i], 10000);

	mov	rcx, QWORD PTR [rbx+408]
	mov	edx, 10000				; 00002710H
	mov	rcx, QWORD PTR [rcx+rsi*8]
	call	QWORD PTR __imp_?OSTerminateThread@@YAHPEAXK@Z

; 492  :             hConvertThreads[i] = NULL;

	mov	r11, QWORD PTR [rbx+408]
	mov	QWORD PTR [r11+rsi*8], r12
$LN13@UnloadFilt:

; 493  :         }
; 494  : 
; 495  :         convertData[i].bKillThread = false;

	mov	rax, QWORD PTR [rbx+400]
	mov	BYTE PTR [rdi+rax+40], r12b

; 496  : 
; 497  :         if(convertData[i].hSignalConvert)

	mov	rax, QWORD PTR [rbx+400]
	mov	rcx, QWORD PTR [rdi+rax+24]
	test	rcx, rcx
	je	SHORT $LN12@UnloadFilt

; 498  :         {
; 499  :             CloseHandle(convertData[i].hSignalConvert);

	call	QWORD PTR __imp_CloseHandle

; 500  :             convertData[i].hSignalConvert = NULL;

	mov	r11, QWORD PTR [rbx+400]
	mov	QWORD PTR [rdi+r11+24], r12
$LN12@UnloadFilt:

; 501  :         }
; 502  : 
; 503  :         if(convertData[i].hSignalComplete)

	mov	rax, QWORD PTR [rbx+400]
	mov	rcx, QWORD PTR [rdi+rax+32]
	test	rcx, rcx
	je	SHORT $LN15@UnloadFilt

; 504  :         {
; 505  :             CloseHandle(convertData[i].hSignalComplete);

	call	QWORD PTR __imp_CloseHandle

; 506  :             convertData[i].hSignalComplete = NULL;

	mov	r11, QWORD PTR [rbx+400]
	mov	QWORD PTR [rdi+r11+32], r12
$LN15@UnloadFilt:

; 484  :     for(int i=0; i<numThreads; i++)

	inc	rsi
	add	rdi, 64					; 00000040H
	cmp	rsi, rbp
	jl	$LL16@UnloadFilt
	mov	rdi, QWORD PTR [rsp+64]
$LN14@UnloadFilt:
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+48]

; 507  :         }
; 508  :     }
; 509  : 
; 510  :     if(bFiltersLoaded)

	cmp	BYTE PTR [rbx+309], r12b
	je	$LN10@UnloadFilt

; 511  :     {
; 512  :         graph->RemoveFilter(captureFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rbx+48]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]

; 513  :         graph->RemoveFilter(deviceFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rbx+32]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]

; 514  :         graph->RemoveFilter(audioDeviceFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rbx+40]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]

; 515  : 
; 516  :         if(audioFilter)

	mov	rdx, QWORD PTR [rbx+56]
	test	rdx, rdx
	je	SHORT $LN9@UnloadFilt

; 517  :             graph->RemoveFilter(audioFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+32]
$LN9@UnloadFilt:

; 518  : 
; 519  :         SafeReleaseLogRef(captureFilter);

	mov	rcx, QWORD PTR [rbx+48]
	test	rcx, rcx
	je	SHORT $LN8@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG-7297
	lea	rcx, OFFSET FLAT:$SG-7298
	mov	r8d, eax
	call	QWORD PTR __imp_?OSDebugOut@@YAXPEB_WZZ
	mov	QWORD PTR [rbx+48], r12
$LN8@UnloadFilt:

; 520  :         SafeReleaseLogRef(deviceFilter);

	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN7@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG-7299
	lea	rcx, OFFSET FLAT:$SG-7300
	mov	r8d, eax
	call	QWORD PTR __imp_?OSDebugOut@@YAXPEB_WZZ
	mov	QWORD PTR [rbx+32], r12
$LN7@UnloadFilt:

; 521  :         SafeReleaseLogRef(audioDeviceFilter);

	mov	rcx, QWORD PTR [rbx+40]
	test	rcx, rcx
	je	SHORT $LN6@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG-7301
	lea	rcx, OFFSET FLAT:$SG-7302
	mov	r8d, eax
	call	QWORD PTR __imp_?OSDebugOut@@YAXPEB_WZZ
	mov	QWORD PTR [rbx+40], r12
$LN6@UnloadFilt:

; 522  :         SafeReleaseLogRef(audioFilter);

	mov	rcx, QWORD PTR [rbx+56]
	test	rcx, rcx
	je	SHORT $LN5@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG-7303
	lea	rcx, OFFSET FLAT:$SG-7304
	mov	r8d, eax
	call	QWORD PTR __imp_?OSDebugOut@@YAXPEB_WZZ
	mov	QWORD PTR [rbx+56], r12
$LN5@UnloadFilt:

; 523  : 
; 524  :         bFiltersLoaded = false;

	mov	BYTE PTR [rbx+309], r12b
$LN10@UnloadFilt:

; 525  :     }
; 526  : 
; 527  :     if(audioOut)

	mov	rdx, QWORD PTR [rbx+88]
	test	rdx, rdx
	je	SHORT $LN4@UnloadFilt

; 528  :     {
; 529  :         API->RemoveAudioSource(audioOut);

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+256]

; 530  :         delete audioOut;

	mov	rcx, QWORD PTR [rbx+88]
	test	rcx, rcx
	je	SHORT $LN24@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	mov	edx, 1
	call	QWORD PTR [rax+24]
$LN24@UnloadFilt:

; 531  :         audioOut = NULL;

	mov	QWORD PTR [rbx+88], r12
$LN4@UnloadFilt:

; 532  :     }
; 533  : 
; 534  :     if(colorConvertShader)

	mov	rcx, QWORD PTR [rbx+312]
	test	rcx, rcx
	je	SHORT $LN3@UnloadFilt

; 535  :     {
; 536  :         delete colorConvertShader;

	mov	rax, QWORD PTR [rcx]
	mov	edx, 1
	call	QWORD PTR [rax]

; 537  :         colorConvertShader = NULL;

	mov	QWORD PTR [rbx+312], r12
$LN3@UnloadFilt:

; 538  :     }
; 539  : 
; 540  :     if(lpImageBuffer)

	mov	rdx, QWORD PTR [rbx+392]
	test	rdx, rdx
	je	SHORT $LN2@UnloadFilt

; 541  :     {
; 542  :         Free(lpImageBuffer);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]

; 543  :         lpImageBuffer = NULL;

	mov	QWORD PTR [rbx+392], r12
$LN2@UnloadFilt:

; 544  :     }
; 545  : 
; 546  :     SafeRelease(control);

	mov	rcx, QWORD PTR [rbx+24]
	test	rcx, rcx
	je	SHORT $LN1@UnloadFilt
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+24], r12
$LN1@UnloadFilt:

; 547  : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
?UnloadFilters@DeviceSource@@AEAAXXZ ENDP		; DeviceSource::UnloadFilters
_TEXT	ENDS
PUBLIC	?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z	; DeviceSource::Init
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD imagerel $LN9+92
	DD	imagerel $LN9+363
	DD	imagerel $chain$0$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD imagerel $LN9+363
	DD	imagerel $LN9+385
	DD	imagerel $chain$1$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD 020521H
	DD	087405H
	DD	imagerel $LN9
	DD	imagerel $LN9+92
	DD	imagerel $unwind$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z DD 081501H
	DD	0b6415H
	DD	0a5415H
	DD	093415H
	DD	0c0115215H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z
_TEXT	SEGMENT
this$ = 64
data$ = 72
?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z PROC		; DeviceSource::Init, COMDAT

; 29   : {

$LN9:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	sub	rsp, 48					; 00000030H

; 30   :     HRESULT err;
; 31   :     err = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, (REFIID)IID_IFilterGraph, (void**)&graph);

	lea	rbp, QWORD PTR [rcx+8]
	mov	rsi, rcx
	mov	r12, rdx
	mov	ebx, 1
	lea	rcx, OFFSET FLAT:CLSID_FilterGraph
	lea	r9, OFFSET FLAT:IID_IFilterGraph
	xor	edx, edx
	mov	r8d, ebx
	mov	QWORD PTR [rsp+32], rbp
	call	QWORD PTR __imp_CoCreateInstance

; 32   :     if(FAILED(err))

	test	eax, eax
	jns	SHORT $LN3@Init

; 33   :     {
; 34   :         AppWarning(TEXT("DShowAudioPlugin: Failed to build IGraphBuilder, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7252
	mov	edx, eax
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 35   :         return false;

	xor	al, al
	jmp	$LN4@Init
$LN3@Init:
	mov	QWORD PTR [rsp+64], rdi

; 36   :     }
; 37   : 
; 38   :     err = CoCreateInstance(CLSID_CaptureGraphBuilder2, NULL, CLSCTX_INPROC_SERVER, (REFIID)IID_ICaptureGraphBuilder2, (void**)&capture);

	lea	rdi, QWORD PTR [rsi+16]
	lea	r9, OFFSET FLAT:IID_ICaptureGraphBuilder2
	lea	rcx, OFFSET FLAT:CLSID_CaptureGraphBuilder2
	mov	r8d, ebx
	xor	edx, edx
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_CoCreateInstance

; 39   :     if(FAILED(err))

	test	eax, eax
	jns	SHORT $LN2@Init

; 40   :     {
; 41   :         AppWarning(TEXT("DShowAudioPlugin: Failed to build ICaptureGraphBuilder2, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7253
	mov	edx, eax
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 42   :         return false;

	xor	al, al
	jmp	$LN8@Init
$LN2@Init:

; 43   :     }
; 44   : 
; 45   :     hSampleMutex = OSCreateMutex();

	call	QWORD PTR __imp_?OSCreateMutex@@YAPEAXXZ
	mov	QWORD PTR [rsi+336], rax

; 46   :     if(!hSampleMutex)

	test	rax, rax
	jne	SHORT $LN1@Init

; 47   :     {
; 48   :         AppWarning(TEXT("DShowAudioPlugin: could not create sample mutex"));

	lea	rcx, OFFSET FLAT:$SG-7254
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 49   :         return false;

	xor	al, al
	jmp	$LN8@Init
$LN1@Init:

; 50   :     }
; 51   : 
; 52   :     capture->SetFiltergraph(graph);

	mov	rcx, QWORD PTR [rdi]
	mov	rdx, QWORD PTR [rbp]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]

; 53   : 
; 54   :     int numThreads = MAX(OSGetTotalCores()-2, 1);

	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	sub	eax, 2
	cmp	eax, ebx
	jle	SHORT $LN6@Init
	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	lea	ebx, DWORD PTR [rax-2]
$LN6@Init:

; 55   :     hConvertThreads = (HANDLE*)Allocate(sizeof(HANDLE)*numThreads);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	movsxd	rdi, ebx
	mov	rcx, QWORD PTR [rax]
	lea	rbx, QWORD PTR [rdi*8]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rbx
	call	QWORD PTR [rax+8]

; 56   :     convertData = (ConvertData*)Allocate(sizeof(ConvertData)*numThreads);

	shl	rdi, 6
	mov	QWORD PTR [rsi+408], rax
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]

; 57   : 
; 58   :     zero(hConvertThreads, sizeof(HANDLE)*numThreads);

	mov	rcx, QWORD PTR [rsi+408]
	mov	rdx, rbx
	mov	QWORD PTR [rsi+400], rax
	call	?zero@@YAXPEAX_K@Z			; zero

; 59   :     zero(convertData, sizeof(ConvertData)*numThreads);

	mov	rcx, QWORD PTR [rsi+400]
	mov	rdx, rdi
	call	?zero@@YAXPEAX_K@Z			; zero

; 60   : 
; 61   :     this->data = data;
; 62   :     UpdateSettings();

	mov	rax, QWORD PTR [rsi]
	mov	rcx, rsi
	mov	QWORD PTR [rsi+296], r12
	call	QWORD PTR [rax+40]

; 63   : 
; 64   :     //if(!bFiltersLoaded)
; 65   :     //    return false;
; 66   : 
; 67   :     Log(TEXT("Using directshow audio input"));

	lea	rcx, OFFSET FLAT:$SG-7255
	call	QWORD PTR __imp_?Log@@YAXPEB_WZZ

; 68   : 
; 69   :     return true;

	mov	al, 1
$LN8@Init:
	mov	rdi, QWORD PTR [rsp+64]
$LN4@Init:

; 70   : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r12
	ret	0
?Init@DeviceSource@@QEAA_NPEAVXElement@@@Z ENDP		; DeviceSource::Init
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$??1?$List@PEAUSampleData@@@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+49
	DD	imagerel $unwind$??1?$List@PEAUSampleData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$List@PEAUSampleData@@@@QEAA@XZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
xdata	ENDS
;	COMDAT ??1?$List@PEAUSampleData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$List@PEAUSampleData@@@@QEAA@XZ PROC		; List<SampleData * __ptr64>::~List<SampleData * __ptr64>, COMDAT

; 32   :     {

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H

; 33   :         Clear();

	mov	rdx, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN3@List@4
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	xor	r11d, r11d
	mov	QWORD PTR [rbx], r11
	mov	DWORD PTR [rbx+8], r11d
$LN3@List@4:

; 34   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1?$List@PEAUSampleData@@@@QEAA@XZ ENDP		; List<SampleData * __ptr64>::~List<SampleData * __ptr64>
_TEXT	ENDS
PUBLIC	?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z ; DeviceSource::ReceiveMediaSample
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\deviceaudio.cpp
pdata	SEGMENT
$pdata$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z DD imagerel $LN44
	DD	imagerel $LN44+404
	DD	imagerel $unwind$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z DD imagerel ?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
	DD	0ffffffffH
	DD	imagerel ?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z+141
	DD	00H
	DD	imagerel ?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z+156
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z DD 061e11H
	DD	0c341eH
	DD	0700c7210H
	DD	0500a600bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z@4HA
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z
_TEXT	SEGMENT
$T111584 = 32
$T111510 = 40
stopTime$91518 = 48
this$ = 96
data$91510 = 104
sample$ = 104
bAudio$ = 112
pointer$91507 = 120
?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z PROC ; DeviceSource::ReceiveMediaSample, COMDAT

; 623  : {

$LN44:

; 624  :     if (!sample)

	test	rdx, rdx
	je	$LN43@ReceiveMed
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T111584[rsp], -2
	mov	QWORD PTR [rsp+96], rbx

; 623  : {

	movzx	ebp, r8b
	mov	rsi, rdx
	mov	rbx, rcx

; 625  :         return;
; 626  : 
; 627  :     if (bCapturing) {

	cmp	BYTE PTR [rcx+308], 0
	je	$LN7@ReceiveMed

; 628  :         BYTE *pointer;
; 629  : 
; 630  :         if (SUCCEEDED(sample->GetPointer(&pointer))) {

	mov	rax, QWORD PTR [rdx]
	lea	rdx, QWORD PTR pointer$91507[rsp]
	mov	rcx, rsi
	call	QWORD PTR [rax+24]
	test	eax, eax
	js	$LN7@ReceiveMed

; 631  :             SampleData *data = NULL;

	xor	edi, edi
	mov	QWORD PTR data$91510[rsp], rdi

; 632  :             
; 633  :             if (bUseBuffering || !bAudio) {

	cmp	BYTE PTR [rbx+320], dil
	jne	SHORT $LN5@ReceiveMed
	test	bpl, bpl
	jne	$LN6@ReceiveMed
$LN5@ReceiveMed:

; 634  :                 data = new SampleData;

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	edx, 32					; 00000020H
	call	QWORD PTR [rax+8]
	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
	mov	QWORD PTR $T111510[rsp], rax
	test	rax, rax
	je	SHORT $LN12@ReceiveMed
	mov	DWORD PTR [rax+24], 1
	mov	rdi, rax
$LN12@ReceiveMed:
	mov	QWORD PTR data$91510[rsp], rdi

; 635  :                 data->bAudio = bAudio;

	mov	BYTE PTR [rdi+12], bpl

; 636  :                 data->dataLength = sample->GetActualDataLength();

	mov	rax, QWORD PTR [rsi]
	mov	rcx, rsi
	call	QWORD PTR [rax+88]
	mov	DWORD PTR [rdi+8], eax

; 637  :                 data->lpData = (LPBYTE)Allocate(data->dataLength);//pointer; //

	mov	rcx, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rcx]
	movsxd	rdx, eax
	call	QWORD PTR [r8+8]
	mov	QWORD PTR [rdi], rax

; 638  :                 /*data->sample = sample;
; 639  :                 sample->AddRef();*/
; 640  : 
; 641  :                 memcpy(data->lpData, pointer, data->dataLength);

	movsxd	r8, DWORD PTR [rdi+8]
	mov	rdx, QWORD PTR pointer$91507[rsp]
	mov	rcx, rax
	call	memcpy

; 642  : 
; 643  :                 LONGLONG stopTime;
; 644  :                 sample->GetTime(&data->timestamp, &stopTime);

	mov	r11, QWORD PTR [rsi]
	lea	rdx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR stopTime$91518[rsp]
	mov	rcx, rsi
	call	QWORD PTR [r11+40]
$LN6@ReceiveMed:

; 645  :             }
; 646  : 
; 647  :             //Log(TEXT("timestamp: %lld, bAudio - %s"), data->timestamp, bAudio ? TEXT("true") : TEXT("false"));
; 648  : 
; 649  :             OSEnterMutex(hSampleMutex);

	mov	rcx, QWORD PTR [rbx+336]
	call	QWORD PTR __imp_?OSEnterMutex@@YAXPEAX@Z

; 650  : 
; 651  :             if (bUseBuffering) {

	cmp	BYTE PTR [rbx+320], 0
	je	SHORT $LN4@ReceiveMed

; 652  :                 UINT id = GetSampleInsertIndex(data->timestamp);

	mov	rdx, QWORD PTR [rdi+16]
	mov	rcx, rbx
	call	?GetSampleInsertIndex@DeviceSource@@AEAAI_J@Z ; DeviceSource::GetSampleInsertIndex

; 653  :                 samples.Insert(id, data);

	lea	rcx, QWORD PTR [rbx+368]
	cmp	eax, DWORD PTR [rcx+8]
	ja	SHORT $LN34@ReceiveMed
	lea	r8, QWORD PTR data$91510[rsp]
	mov	edx, eax
	call	?Insert@?$List@PEAUSampleData@@@@QEAAXIAEBQEAUSampleData@@@Z ; List<SampleData * __ptr64>::Insert
	jmp	SHORT $LN34@ReceiveMed
$LN4@ReceiveMed:

; 654  :             } else if (bAudio) {

	test	bpl, bpl
	je	SHORT $LN34@ReceiveMed

; 655  :                 if (audioOut)

	cmp	QWORD PTR [rbx+88], 0
	je	SHORT $LN34@ReceiveMed

; 656  :                     audioOut->ReceiveAudio(pointer, sample->GetActualDataLength());

	mov	rax, QWORD PTR [rsi]
	mov	rcx, rsi
	call	QWORD PTR [rax+88]
	mov	ebp, eax
	mov	rsi, QWORD PTR pointer$91507[rsp]
	mov	rdi, QWORD PTR [rbx+88]
	test	rsi, rsi
	je	SHORT $LN34@ReceiveMed
	mov	rcx, QWORD PTR [rdi+216]
	call	QWORD PTR __imp_?OSEnterMutex@@YAXPEAX@Z
	lea	rcx, QWORD PTR [rdi+224]
	mov	r8d, ebp
	mov	rdx, rsi
	call	?AppendArray@?$List@E@@QEAAXPEBEI@Z	; List<unsigned char>::AppendArray
	mov	rcx, QWORD PTR [rdi+216]
	call	QWORD PTR __imp_?OSLeaveMutex@@YAXPEAX@Z
$LN34@ReceiveMed:

; 657  :             }
; 658  : 
; 659  :             OSLeaveMutex(hSampleMutex);

	mov	rcx, QWORD PTR [rbx+336]
	call	QWORD PTR __imp_?OSLeaveMutex@@YAXPEAX@Z
$LN7@ReceiveMed:

; 660  :         }
; 661  :     }
; 662  : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbp
$LN43@ReceiveMed:
	fatret	0
?ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z ENDP ; DeviceSource::ReceiveMediaSample
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T111584 = 32
$T111510 = 40
stopTime$91518 = 48
this$ = 96
data$91510 = 104
sample$ = 104
bAudio$ = 112
pointer$91507 = 120
?dtor$0@?0??ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z@4HA PROC ; `DeviceSource::ReceiveMediaSample'::`1'::dtor$0
	mov	rcx, QWORD PTR $T111510[rdx]
	jmp	??3@YAXPEAX@Z				; operator delete
?dtor$0@?0??ReceiveMediaSample@DeviceSource@@AEAAXPEAUIMediaSample@@_N@Z@4HA ENDP ; `DeviceSource::ReceiveMediaSample'::`1'::dtor$0
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DeviceAudioSource@@QEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+76
	DD	imagerel $unwind$??0DeviceAudioSource@@QEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0DeviceAudioSource@@QEAA@XZ DD imagerel ??0DeviceAudioSource@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0DeviceAudioSource@@QEAA@XZ+29
	DD	00H
	DD	imagerel ??0DeviceAudioSource@@QEAA@XZ+54
	DD	01H
	DD	imagerel ??0DeviceAudioSource@@QEAA@XZ+67
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DeviceAudioSource@@QEAA@XZ DD 021311H
	DD	03006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0DeviceAudioSource@@QEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0DeviceAudioSource@@QEAA@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0DeviceAudioSource@@QEAA@XZ
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0DeviceAudioSource@@QEAA@XZ
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0DeviceAudioSource@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0DeviceAudioSource@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0DeviceAudioSource@@QEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0DeviceAudioSource@@QEAA@XZ@4HA
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??0DeviceAudioSource@@QEAA@XZ
_TEXT	SEGMENT
$T111620 = 32
this$ = 64
??0DeviceAudioSource@@QEAA@XZ PROC			; DeviceAudioSource::DeviceAudioSource, COMDAT
$LN10:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T111620[rsp], -2
	mov	rbx, rcx
	call	QWORD PTR __imp_??0AudioSource@@QEAA@XZ
	npad	1
	lea	rax, OFFSET FLAT:??_7DeviceAudioSource@@6B@
	mov	QWORD PTR [rbx], rax
	xor	eax, eax
	mov	QWORD PTR [rbx+224], rax
	mov	DWORD PTR [rbx+232], eax
	mov	QWORD PTR [rbx+240], rax
	mov	DWORD PTR [rbx+248], eax
	mov	rax, rbx
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??0DeviceAudioSource@@QEAA@XZ ENDP			; DeviceAudioSource::DeviceAudioSource
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T111620 = 32
this$ = 64
?dtor$0@?0???0DeviceAudioSource@@QEAA@XZ@4HA PROC	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	rex_jmp	QWORD PTR __imp_??1AudioSource@@UEAA@XZ
?dtor$0@?0???0DeviceAudioSource@@QEAA@XZ@4HA ENDP	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$0
; Function compile flags: /Ogtpy
$T111620 = 32
this$ = 64
?dtor$1@?0???0DeviceAudioSource@@QEAA@XZ@4HA PROC	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$1
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 224				; 000000e0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$1@?0???0DeviceAudioSource@@QEAA@XZ@4HA ENDP	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$1
; Function compile flags: /Ogtpy
$T111620 = 32
this$ = 64
?dtor$2@?0???0DeviceAudioSource@@QEAA@XZ@4HA PROC	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$2
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 240				; 000000f0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$2@?0???0DeviceAudioSource@@QEAA@XZ@4HA ENDP	; `DeviceAudioSource::DeviceAudioSource'::`1'::dtor$2
text$x	ENDS
PUBLIC	?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z ; DeviceSource::SetAudioInfo
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\mediainfostuff.cpp
pdata	SEGMENT
$pdata$?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z DD imagerel $LN18
	DD	imagerel $LN18+237
	DD	imagerel $unwind$?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z
_TEXT	SEGMENT
this$ = 64
audioMediaType$ = 72
expectedAudioType$ = 80
?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z PROC ; DeviceSource::SetAudioInfo, COMDAT

; 96   : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 97   :     expectedAudioType = audioMediaType->subtype;

	mov	eax, DWORD PTR [rdx+16]
	mov	rbx, rdx
	mov	rdi, rcx
	mov	DWORD PTR [r8], eax
	mov	eax, DWORD PTR [rdx+20]

; 98   : 
; 99   :     if(audioMediaType->formattype == FORMAT_WaveFormatEx)

	xor	esi, esi
	mov	DWORD PTR [r8+4], eax
	mov	eax, DWORD PTR [rdx+24]
	mov	DWORD PTR [r8+8], eax
	mov	eax, DWORD PTR [rdx+28]
	lea	rdx, OFFSET FLAT:FORMAT_WaveFormatEx
	mov	DWORD PTR [r8+12], eax
	mov	rcx, QWORD PTR [rbx+44]
	cmp	rcx, QWORD PTR [rdx]
	jne	SHORT $LN16@SetAudioIn
	mov	rcx, QWORD PTR [rbx+52]
	cmp	rcx, QWORD PTR [rdx+8]
	jne	SHORT $LN16@SetAudioIn
	mov	eax, esi
	jmp	SHORT $LN17@SetAudioIn
$LN16@SetAudioIn:
	sbb	eax, eax
	sbb	eax, -1
$LN17@SetAudioIn:
	test	eax, eax
	jne	SHORT $LN2@SetAudioIn

; 100  :     {
; 101  :         WAVEFORMATEX *pFormat = reinterpret_cast<WAVEFORMATEX*>(audioMediaType->pbFormat);

	mov	rcx, QWORD PTR [rbx+80]

; 102  :         mcpy(&audioFormat, pFormat, sizeof(audioFormat));

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdi+64], rax
	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdi+72], rax
	movzx	eax, WORD PTR [rcx+16]

; 103  : 
; 104  :         Log(TEXT("    device audio info - bits per sample: %u, channels: %u, samples per sec: %u, block size: %u"),
; 105  :             audioFormat.wBitsPerSample, audioFormat.nChannels, audioFormat.nSamplesPerSec, audioFormat.nBlockAlign);

	lea	rcx, OFFSET FLAT:$SG-7256
	mov	WORD PTR [rdi+80], ax
	movzx	eax, WORD PTR [rdi+76]
	movzx	r8d, WORD PTR [rdi+66]
	movzx	edx, WORD PTR [rdi+78]
	mov	r9d, DWORD PTR [rdi+68]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR __imp_?Log@@YAXPEB_WZZ

; 106  : 
; 107  :         //avoid local resampling if possible
; 108  :         /*if(pFormat->nSamplesPerSec != 44100)
; 109  :         {
; 110  :             pFormat->nSamplesPerSec = 44100;
; 111  :             if(SUCCEEDED(audioConfig->SetFormat(audioMediaType)))
; 112  :             {
; 113  :                 Log(TEXT("    also successfully set samples per sec to 44.1k"));
; 114  :                 audioFormat.nSamplesPerSec = 44100;
; 115  :             }
; 116  :         }*/
; 117  :     }
; 118  :     else

	jmp	SHORT $LN1@SetAudioIn
$LN2@SetAudioIn:

; 119  :     {
; 120  :         AppWarning(TEXT("DShowAudioPlugin: Audio format was not a normal wave format"));

	lea	rcx, OFFSET FLAT:$SG-7257
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 121  :         soundOutputType = 0;

	mov	DWORD PTR [rdi+276], esi
$LN1@SetAudioIn:

; 122  :     }
; 123  : 
; 124  :     DeleteMediaType(audioMediaType);

	cmp	DWORD PTR [rbx+72], esi
	je	SHORT $LN13@SetAudioIn
	mov	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp_CoTaskMemFree
	mov	DWORD PTR [rbx+72], esi
	mov	QWORD PTR [rbx+80], rsi
$LN13@SetAudioIn:
	mov	rcx, QWORD PTR [rbx+64]
	test	rcx, rcx
	je	SHORT $LN12@SetAudioIn
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+64], rsi
$LN12@SetAudioIn:
	mov	rcx, rbx

; 125  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	rex_jmp	QWORD PTR __imp_CoTaskMemFree
?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z ENDP ; DeviceSource::SetAudioInfo
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?Preprocess@DeviceSource@@UEAAXXZ DD imagerel $LN30
	DD	imagerel $LN30+26
	DD	imagerel $unwind$?Preprocess@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?Preprocess@DeviceSource@@UEAAXXZ DD imagerel $LN30+26
	DD	imagerel $LN30+271
	DD	imagerel $chain$0$?Preprocess@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?Preprocess@DeviceSource@@UEAAXXZ DD imagerel $LN30+271
	DD	imagerel $LN30+277
	DD	imagerel $chain$1$?Preprocess@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?Preprocess@DeviceSource@@UEAAXXZ DD 021H
	DD	imagerel $LN30
	DD	imagerel $LN30+26
	DD	imagerel $unwind$?Preprocess@DeviceSource@@UEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?Preprocess@DeviceSource@@UEAAXXZ DD 020521H
	DD	077405H
	DD	imagerel $LN30
	DD	imagerel $LN30+26
	DD	imagerel $unwind$?Preprocess@DeviceSource@@UEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Preprocess@DeviceSource@@UEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?Preprocess@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
basicAudio$91539 = 48
this$ = 48
?Preprocess@DeviceSource@@UEAAXXZ PROC			; DeviceSource::Preprocess, COMDAT

; 680  : {

$LN30:
	push	rbx
	sub	rsp, 32					; 00000020H

; 681  :     if(!bCapturing)

	cmp	BYTE PTR [rcx+308], 0
	mov	rbx, rcx
	je	$LN27@Preprocess

; 682  :         return;
; 683  : 
; 684  :     //----------------------------------------
; 685  : 
; 686  :     if(bRequestVolume)

	cmp	BYTE PTR [rcx+96], 0
	mov	QWORD PTR [rsp+56], rdi
	je	SHORT $LN7@Preprocess

; 687  :     {
; 688  :         if(audioOut)

	mov	rcx, QWORD PTR [rcx+88]
	test	rcx, rcx
	je	SHORT $LN6@Preprocess

; 689  :             audioOut->SetVolume(fNewVol);

	movss	xmm1, DWORD PTR [rbx+100]
	call	QWORD PTR __imp_?SetVolume@AudioSource@@QEAAXM@Z
	jmp	SHORT $LN3@Preprocess
$LN6@Preprocess:

; 690  :         else if(audioFilter)

	mov	rcx, QWORD PTR [rbx+56]
	test	rcx, rcx
	je	SHORT $LN3@Preprocess

; 691  :         {
; 692  :             IBasicAudio *basicAudio;
; 693  :             if(SUCCEEDED(audioFilter->QueryInterface(IID_IBasicAudio, (void**)&basicAudio)))

	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR basicAudio$91539[rsp]
	lea	rdx, OFFSET FLAT:IID_IBasicAudio
	call	QWORD PTR [rax]
	test	eax, eax
	js	SHORT $LN3@Preprocess

; 694  :             {
; 695  :                 long lVol = long((double(fNewVol)*NEAR_SILENTf)-NEAR_SILENTf);

	movd	xmm1, DWORD PTR [rbx+100]

; 696  :                 if(lVol <= -NEAR_SILENT)
; 697  :                     lVol = -10000;
; 698  :                 basicAudio->put_Volume(lVol);

	mov	rcx, QWORD PTR basicAudio$91539[rsp]
	mov	eax, -10000				; ffffffffffffd8f0H
	cvtps2pd xmm1, xmm1
	mulsd	xmm1, QWORD PTR __real@40a7700000000000
	subsd	xmm1, QWORD PTR __real@40a7700000000000
	cvttsd2si edx, xmm1
	cmp	edx, -3000				; fffffffffffff448H
	cmovle	edx, eax
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]

; 699  :                 basicAudio->Release();

	mov	rcx, QWORD PTR basicAudio$91539[rsp]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
$LN3@Preprocess:

; 700  :             }
; 701  :         }
; 702  :         bRequestVolume = false;

	mov	BYTE PTR [rbx+96], 0
$LN7@Preprocess:

; 703  :     }
; 704  : 
; 705  :     //----------------------------------------
; 706  : 
; 707  :     SampleData *lastSample = NULL;
; 708  : 
; 709  :     OSEnterMutex(hSampleMutex);

	mov	rcx, QWORD PTR [rbx+336]
	call	QWORD PTR __imp_?OSEnterMutex@@YAXPEAX@Z

; 710  : 
; 711  :     lastSample = latestVideoSample;

	mov	rdi, QWORD PTR [rbx+360]

; 712  :     latestVideoSample = NULL;
; 713  : 
; 714  :     OSLeaveMutex(hSampleMutex);

	mov	rcx, QWORD PTR [rbx+336]
	mov	QWORD PTR [rbx+360], 0
	call	QWORD PTR __imp_?OSLeaveMutex@@YAXPEAX@Z

; 715  : 
; 716  :     //----------------------------------------
; 717  : 
; 718  :     int numThreads = MAX(OSGetTotalCores()-2, 1);

	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	sub	eax, 2
	cmp	eax, 1
	jle	SHORT $LN11@Preprocess
	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
$LN11@Preprocess:

; 719  : 
; 720  :     if(lastSample)

	test	rdi, rdi
	je	SHORT $LN29@Preprocess

; 721  :     {
; 722  :         /*REFERENCE_TIME refTimeStart, refTimeFinish;
; 723  :         lastSample->GetTime(&refTimeStart, &refTimeFinish);
; 724  : 
; 725  :         static REFERENCE_TIME lastRefTime = 0;
; 726  :         //Log(TEXT("refTimeStart: %llu, refTimeFinish: %llu, offset = %llu"), refTimeStart, refTimeFinish, refTimeStart-lastRefTime);
; 727  :         lastRefTime = refTimeStart;*/
; 728  : 
; 729  :         lastSample->Release();

	lock dec DWORD PTR [rdi+24]
	jne	SHORT $LN29@Preprocess
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	r11, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, rdi
	mov	rcx, QWORD PTR [r11]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
$LN29@Preprocess:
	mov	rdi, QWORD PTR [rsp+56]
$LN27@Preprocess:

; 730  :     }
; 731  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Preprocess@DeviceSource@@UEAAXXZ ENDP			; DeviceSource::Preprocess
_TEXT	ENDS
PUBLIC	?LoadFilters@DeviceSource@@AEAA_NXZ		; DeviceSource::LoadFilters
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
pdata	SEGMENT
$pdata$?LoadFilters@DeviceSource@@AEAA_NXZ DD imagerel $LN224
	DD	imagerel $LN224+3272
	DD	imagerel $unwind$?LoadFilters@DeviceSource@@AEAA_NXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?LoadFilters@DeviceSource@@AEAA_NXZ DD imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ
	DD	0ffffffffH
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+82
	DD	00H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+104
	DD	01H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1390
	DD	02H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1418
	DD	03H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1432
	DD	02H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1466
	DD	01H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1758
	DD	04H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1793
	DD	01H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1889
	DD	05H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+1917
	DD	01H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+2364
	DD	06H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+2379
	DD	07H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+2403
	DD	08H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+2417
	DD	06H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+2422
	DD	01H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+3225
	DD	00H
	DD	imagerel ?LoadFilters@DeviceSource@@AEAA_NXZ+3236
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LoadFilters@DeviceSource@@AEAA_NXZ DD 0c2911H
	DD	0a6829H
	DD	0170119H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	050023003H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?LoadFilters@DeviceSource@@AEAA_NXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?LoadFilters@DeviceSource@@AEAA_NXZ DD 019930522H
	DD	0aH
	DD	imagerel $stateUnwindMap$?LoadFilters@DeviceSource@@AEAA_NXZ
	DD	00H
	DD	00H
	DD	012H
	DD	imagerel $ip2state$?LoadFilters@DeviceSource@@AEAA_NXZ
	DD	050H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?LoadFilters@DeviceSource@@AEAA_NXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	01H
	DD	imagerel ?dtor$4@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	01H
	DD	imagerel ?dtor$5@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	01H
	DD	imagerel ?dtor$6@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	06H
	DD	imagerel ?dtor$7@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	07H
	DD	imagerel ?dtor$8@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
	DD	08H
	DD	imagerel ?dtor$9@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ?LoadFilters@DeviceSource@@AEAA_NXZ
_TEXT	SEGMENT
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?LoadFilters@DeviceSource@@AEAA_NXZ PROC		; DeviceSource::LoadFilters, COMDAT

; 128  : {

$LN224:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-31]
	sub	rsp, 184				; 000000b8H
	mov	QWORD PTR $T113271[rbp-153], -2
	movaps	XMMWORD PTR [rsp+160], xmm6
	mov	rbx, rcx

; 129  :     if(bCapturing || bFiltersLoaded)

	cmp	BYTE PTR [rcx+308], 0
	jne	$LN73@LoadFilter
	cmp	BYTE PTR [rcx+309], 0
	jne	$LN73@LoadFilter

; 131  : 
; 132  :     bool bSucceeded = false;

	xor	r13b, r13b

; 133  : 
; 134  :     List<MediaOutputInfo> outputList;

	xor	edi, edi
	mov	QWORD PTR outputList$[rbp-153], rdi
	mov	DWORD PTR outputList$[rbp-145], edi

; 135  :     IAMStreamConfig *config = NULL;
; 136  :     bool bAddedVideoCapture = false, bAddedAudioCapture = false, bAddedDevice = false;

	xor	r15b, r15b
	mov	BYTE PTR bAddedAudioCapture$1$[rbp-153], r15b

; 137  :     GUID expectedMediaType;
; 138  :     IPin *devicePin = NULL, *audioPin = NULL;

	mov	QWORD PTR audioPin$[rbp-153], rdi

; 139  :     HRESULT err;
; 140  :     String strShader;

	lea	rcx, QWORD PTR strShader$[rbp-153]
	call	QWORD PTR __imp_??0String@@QEAA@XZ
	npad	1

; 141  : 
; 142  :     bUseThreadedConversion = API->UseMultithreadedOptimizations() && (OSGetTotalCores() > 1);

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+240]
	test	al, al
	je	SHORT $LN77@LoadFilter
	call	QWORD PTR __imp_?OSGetTotalCores@@YAHXZ
	cmp	eax, 1
	lea	eax, QWORD PTR [rdi+1]
	jg	SHORT $LN78@LoadFilter
$LN77@LoadFilter:
	mov	eax, edi
$LN78@LoadFilter:
	mov	BYTE PTR [rbx+273], al

; 143  : 
; 144  :     //------------------------------------------------
; 145  :     // basic initialization vars
; 146  : 
; 147  :     bool bCheckForceAudio = data->GetInt(TEXT("forceCustomAudioDevice")) != 0;

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7258
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z

; 148  : 
; 149  :     bUseCustomResolution = data->GetInt(TEXT("customResolution"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7259
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+248], eax

; 150  :     strDevice = data->GetString(TEXT("device"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7260
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+112]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 151  :     strDeviceName = data->GetString(TEXT("deviceName"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7261
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+128]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 152  :     strDeviceID = data->GetString(TEXT("deviceID"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7262
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+144]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 153  :     strAudioDevice = data->GetString(TEXT("audioDevice"));

	lea	rsi, QWORD PTR [rbx+160]
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7263
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	mov	rcx, rsi
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 154  :     strAudioName = data->GetString(TEXT("audioDeviceName"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7264
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+176]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 155  :     strAudioID = data->GetString(TEXT("audioDeviceID"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7265
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+192]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 156  :     strAudioGUID = data->GetString(TEXT("audioDeviceCLSID"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7266
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR [rbx+208]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@PEB_W@Z

; 157  : 
; 158  :     if(strAudioGUID.Compare(TEXT("CLSID_AudioInputDeviceCategory"))) matchGUID = CLSID_AudioInputDeviceCategory;

	lea	rdx, OFFSET FLAT:$SG-7267
	lea	rcx, QWORD PTR [rbx+208]
	call	QWORD PTR __imp_?Compare@String@@QEBAHPEB_W@Z
	test	eax, eax
	je	SHORT $LN72@LoadFilter
	mov	eax, DWORD PTR CLSID_AudioInputDeviceCategory
	mov	DWORD PTR [rbx+256], eax
	mov	eax, DWORD PTR CLSID_AudioInputDeviceCategory+4
	mov	DWORD PTR [rbx+260], eax
	mov	eax, DWORD PTR CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [rbx+264], eax
	mov	eax, DWORD PTR CLSID_AudioInputDeviceCategory+12
	mov	DWORD PTR [rbx+268], eax
$LN72@LoadFilter:

; 159  :     if(strAudioGUID.Compare(TEXT("CLSID_VideoInputDeviceCategory"))) matchGUID = CLSID_VideoInputDeviceCategory;

	lea	rdx, OFFSET FLAT:$SG-7268
	lea	rcx, QWORD PTR [rbx+208]
	call	QWORD PTR __imp_?Compare@String@@QEBAHPEB_W@Z
	test	eax, eax
	je	SHORT $LN71@LoadFilter
	mov	eax, DWORD PTR CLSID_VideoInputDeviceCategory
	mov	DWORD PTR [rbx+256], eax
	mov	eax, DWORD PTR CLSID_VideoInputDeviceCategory+4
	mov	DWORD PTR [rbx+260], eax
	mov	eax, DWORD PTR CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [rbx+264], eax
	mov	eax, DWORD PTR CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [rbx+268], eax
$LN71@LoadFilter:

; 160  :     if(strAudioGUID.Compare(TEXT("CLSID_AudioRendererCategory"))) {

	lea	rdx, OFFSET FLAT:$SG-7269
	lea	rcx, QWORD PTR [rbx+208]
	call	QWORD PTR __imp_?Compare@String@@QEBAHPEB_W@Z
	test	eax, eax
	je	SHORT $LN70@LoadFilter

; 161  :         //Log(TEXT("Dese are spekers.\n"));
; 162  :         matchGUID = CLSID_AudioRendererCategory;

	mov	eax, DWORD PTR CLSID_AudioRendererCategory
	mov	DWORD PTR [rbx+256], eax
	mov	eax, DWORD PTR CLSID_AudioRendererCategory+4
	mov	DWORD PTR [rbx+260], eax
	mov	eax, DWORD PTR CLSID_AudioRendererCategory+8
	mov	DWORD PTR [rbx+264], eax
	mov	eax, DWORD PTR CLSID_AudioRendererCategory+12
	mov	DWORD PTR [rbx+268], eax
$LN70@LoadFilter:

; 163  :     }
; 164  : 
; 165  :     bFlipVertical = data->GetInt(TEXT("flipImage")) != 0;

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7270
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	test	eax, eax
	setne	al
	mov	BYTE PTR [rbx+224], al

; 166  :     bFlipHorizontal = data->GetInt(TEXT("flipImageHorizontal")) != 0;

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7271
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	test	eax, eax
	setne	al
	mov	BYTE PTR [rbx+225], al

; 167  : 
; 168  :     opacity = data->GetInt(TEXT("opacity"), 100);

	mov	r8d, 100				; 00000064H
	lea	rdx, OFFSET FLAT:$SG-7272
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+384], eax

; 169  : 
; 170  :     float volume = data->GetFloat(TEXT("volume"), 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	lea	rdx, OFFSET FLAT:$SG-7273
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetFloat@XElement@@QEBAMPEB_WM@Z
	movaps	xmm6, xmm0

; 171  : 
; 172  :     //------------------------------------------------
; 173  :     // chrom key stuff
; 174  : 
; 175  :     bUseChromaKey = data->GetInt(TEXT("useChromaKey")) != 0;

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7274
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	test	eax, eax
	setne	al
	mov	BYTE PTR [rbx+416], al

; 176  :     keyColor = data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	or	r8d, -1
	lea	rdx, OFFSET FLAT:$SG-7275
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+420], eax

; 177  :     keySimilarity = data->GetInt(TEXT("keySimilarity"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7276
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+464], eax

; 178  :     keyBlend = data->GetInt(TEXT("keyBlend"), 80);

	mov	r8d, 80					; 00000050H
	lea	rdx, OFFSET FLAT:$SG-7277
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+468], eax

; 179  :     keySpillReduction = data->GetInt(TEXT("keySpillReduction"), 50);

	mov	r8d, 50					; 00000032H
	lea	rdx, OFFSET FLAT:$SG-7278
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+472], eax

; 180  : 
; 181  :     if(keyBaseColor.x < keyBaseColor.y && keyBaseColor.x < keyBaseColor.z)

	movss	xmm1, DWORD PTR [rbx+448]
	movss	xmm2, DWORD PTR [rbx+452]
	comiss	xmm2, xmm1
	jbe	SHORT $LN69@LoadFilter
	movss	xmm0, DWORD PTR [rbx+456]
	comiss	xmm0, xmm1

; 182  :         keyBaseColor -= keyBaseColor.x;

	ja	SHORT $LN221@LoadFilter
$LN69@LoadFilter:

; 183  :     else if(keyBaseColor.y < keyBaseColor.x && keyBaseColor.y < keyBaseColor.z)

	comiss	xmm1, xmm2
	jbe	SHORT $LN67@LoadFilter
	movss	xmm0, DWORD PTR [rbx+456]
	comiss	xmm0, xmm2
	jbe	SHORT $LN67@LoadFilter

; 184  :         keyBaseColor -= keyBaseColor.y;

	movss	xmm1, xmm2
	jmp	SHORT $LN221@LoadFilter
$LN67@LoadFilter:

; 185  :     else if(keyBaseColor.z < keyBaseColor.x && keyBaseColor.z < keyBaseColor.y)

	movss	xmm0, DWORD PTR [rbx+456]
	comiss	xmm1, xmm0
	jbe	SHORT $LN102@LoadFilter
	comiss	xmm2, xmm0
	jbe	SHORT $LN102@LoadFilter

; 186  :         keyBaseColor -= keyBaseColor.z;

	movss	xmm1, xmm0
$LN221@LoadFilter:
	shufps	xmm1, xmm1, 0
	movaps	xmm0, XMMWORD PTR [rbx+448]
	subps	xmm0, xmm1
	movaps	XMMWORD PTR [rbx+448], xmm0
$LN102@LoadFilter:

; 187  : 
; 188  :     //------------------------------------------------
; 189  :     // get the device filter and pins
; 190  : 
; 191  :     if(strAudioDevice.IsValid())

	mov	rax, QWORD PTR [rsi]
	test	rax, rax
	je	SHORT $LN63@LoadFilter
	cmp	WORD PTR [rax], 0
	je	SHORT $LN63@LoadFilter
	cmp	DWORD PTR [rsi+8], 0
	je	SHORT $LN63@LoadFilter

; 192  :     {
; 193  :         audioDeviceFilter = GetDeviceByValue(matchGUID, L"FriendlyName", strAudioName, L"DevicePath", strAudioID);

	mov	rax, QWORD PTR [rbx+192]
	lea	rcx, QWORD PTR [rbx+256]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG-7279
	mov	r8, QWORD PTR [rbx+176]
	lea	rdx, OFFSET FLAT:$SG-7280
	call	?GetDeviceByValue@@YAPEAUIBaseFilter@@AEBU_GUID@@PEA_WPEB_W12@Z ; GetDeviceByValue
	mov	QWORD PTR [rbx+40], rax

; 194  :         if(!audioDeviceFilter) {

	test	rax, rax
	jne	SHORT $LN63@LoadFilter

; 195  :             AppWarning(TEXT("DShowAudioPlugin: Invalid audio device: name '%s', path '%s'"), strAudioName.Array(), strAudioID.Array());

	mov	r8, QWORD PTR [rbx+192]
	mov	rdx, QWORD PTR [rbx+176]
	lea	rcx, OFFSET FLAT:$SG-7281
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ
$LN63@LoadFilter:

; 196  :         }
; 197  :     }
; 198  : 
; 199  :     soundOutputType = data->GetInt(TEXT("soundOutputType"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7282
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	DWORD PTR [rbx+276], eax

; 200  : 
; 201  :     if(soundOutputType != 0)

	lea	rdi, OFFSET FLAT:MEDIATYPE_Audio
	test	eax, eax
	je	$LN220@LoadFilter

; 202  :     {
; 203  :         if(matchGUID == CLSID_AudioRendererCategory) {

	lea	rcx, OFFSET FLAT:CLSID_AudioRendererCategory
	mov	rdx, QWORD PTR [rbx+256]
	cmp	rdx, QWORD PTR [rcx]
	jne	SHORT $LN218@LoadFilter
	mov	rdx, QWORD PTR [rbx+264]
	cmp	rdx, QWORD PTR [rcx+8]
	jne	SHORT $LN218@LoadFilter
	xor	r14d, r14d
	mov	eax, r14d
	jmp	SHORT $LN219@LoadFilter
$LN218@LoadFilter:
	sbb	eax, eax
	sbb	eax, -1
	xor	r14d, r14d
$LN219@LoadFilter:

; 204  :             err = capture->FindPin(audioDeviceFilter, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE, &MEDIATYPE_Audio, FALSE, 0, &audioPin);

	mov	rcx, QWORD PTR [rbx+16]
	lea	rdx, QWORD PTR audioPin$[rbp-153]
	lea	r9, OFFSET FLAT:PIN_CATEGORY_CAPTURE
	mov	r8d, 1
	mov	QWORD PTR [rsp+56], rdx
	mov	DWORD PTR [rsp+48], r14d
	mov	rdx, QWORD PTR [rbx+40]
	mov	DWORD PTR [rsp+40], r14d
	mov	QWORD PTR [rsp+32], rdi

; 202  :     {
; 203  :         if(matchGUID == CLSID_AudioRendererCategory) {

	test	eax, eax

; 204  :             err = capture->FindPin(audioDeviceFilter, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE, &MEDIATYPE_Audio, FALSE, 0, &audioPin);

	mov	rax, QWORD PTR [rcx]

; 205  :         }
; 206  :         else {
; 207  :             err = capture->FindPin(audioDeviceFilter, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE, &MEDIATYPE_Audio, FALSE, 0, &audioPin);

	call	QWORD PTR [rax+88]

; 208  :         }
; 209  :         if(FAILED(err))

	test	eax, eax
	jns	SHORT $LN59@LoadFilter

; 210  :         {
; 211  :             Log(TEXT("DShowAudioPlugin: No audio pin, result = %lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7283
	call	QWORD PTR __imp_?Log@@YAXPEB_WZZ

; 212  :             soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
	jmp	SHORT $LN59@LoadFilter
$LN220@LoadFilter:

; 386  : 
; 387  : cleanFinish:
; 388  :     SafeRelease(config);
; 389  :     SafeRelease(devicePin);
; 390  :     SafeRelease(audioPin);

	xor	r14d, r14d
$LN59@LoadFilter:

; 213  :         }
; 214  :     }
; 215  : 
; 216  :     int soundTimeOffset = data->GetInt(TEXT("soundTimeOffset"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7284
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z

; 217  : 
; 218  :     //GetOutputList(devicePin, outputList);
; 219  : 
; 220  :     //------------------------------------------------
; 221  :     // initialize the basic video variables and data
; 222  : 
; 223  : 
; 224  :     //------------------------------------------------
; 225  :     // log audio info
; 226  :     {
; 227  :     String strTest;

	lea	rcx, QWORD PTR strTest$91292[rbp-153]
	call	QWORD PTR __imp_??0String@@QEAA@XZ
	npad	1

; 228  : 
; 229  :         strTest = FormattedString(TEXT("    audio device: %s,\r\n    audio device id %s,\r\n"), strAudioDevice.Array(), strAudioID.Array());

	mov	r9, QWORD PTR [rbx+192]
	mov	r8, QWORD PTR [rsi]
	lea	rdx, OFFSET FLAT:$SG-7285
	lea	rcx, QWORD PTR $T112907[rbp-153]
	call	QWORD PTR __imp_?FormattedString@@YA?AVString@@PEB_WZZ
	npad	1
	mov	rdx, rax
	lea	rcx, QWORD PTR strTest$91292[rbp-153]
	call	QWORD PTR __imp_??4String@@QEAAAEAV0@AEBV0@@Z
	npad	1
	lea	rcx, QWORD PTR $T112907[rbp-153]
	call	QWORD PTR __imp_??1String@@QEAA@XZ

; 230  : 
; 231  :         Log(TEXT("------------------------------------------"));

	lea	rcx, OFFSET FLAT:$SG-7286
	call	QWORD PTR __imp_?Log@@YAXPEB_WZZ

; 232  :         Log(strTest.Array());

	mov	rcx, QWORD PTR strTest$91292[rbp-153]
	call	QWORD PTR __imp_?Log@@YAXPEB_WZZ
	npad	1

; 233  :     }

	lea	rcx, QWORD PTR strTest$91292[rbp-153]
	call	QWORD PTR __imp_??1String@@QEAA@XZ

; 234  : 
; 235  :     //------------------------------------------------
; 236  :     // get audio pin configuration, optionally configure audio pin to 44100
; 237  : 
; 238  :     GUID expectedAudioType;
; 239  : 
; 240  :     if(soundOutputType == 1)

	cmp	DWORD PTR [rbx+276], 1
	jne	$LN48@LoadFilter

; 241  :     {
; 242  :         IAMStreamConfig *audioConfig;
; 243  :         if(SUCCEEDED(audioPin->QueryInterface(IID_IAMStreamConfig, (void**)&audioConfig)))

	mov	rcx, QWORD PTR audioPin$[rbp-153]
	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR audioConfig$91298[rbp-153]
	lea	rdx, OFFSET FLAT:IID_IAMStreamConfig
	call	QWORD PTR [rax]
	test	eax, eax
	js	$LN57@LoadFilter

; 244  :         {
; 245  :             AM_MEDIA_TYPE *audioMediaType;
; 246  :             if(SUCCEEDED(err = audioConfig->GetFormat(&audioMediaType)))

	mov	rcx, QWORD PTR audioConfig$91298[rbp-153]
	mov	rax, QWORD PTR [rcx]
	lea	rdx, QWORD PTR audioMediaType$91302[rbp-153]
	call	QWORD PTR [rax+32]
	test	eax, eax
	js	SHORT $LN56@LoadFilter

; 247  :             {
; 248  :                 SetAudioInfo(audioMediaType, expectedAudioType);

	lea	r8, QWORD PTR expectedAudioType$[rbp-153]
	mov	rdx, QWORD PTR audioMediaType$91302[rbp-153]
	mov	rcx, rbx
	call	?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z ; DeviceSource::SetAudioInfo
	jmp	$LN49@LoadFilter
$LN56@LoadFilter:

; 249  :                 //Log(TEXT("Fixed size samples: %s\r\n"), (audioMediaType->bFixedSizeSamples) ? "Yes" : "No");
; 250  :                 //Log(TEXT("Temporal Compression: %s\r\n"), (audioMediaType->bTemporalCompression) ? "Yes" : "No");
; 251  :                 //Log(TEXT("cbFormat: %.16X\r\n"), audioMediaType->cbFormat);
; 252  :                 //Log(TEXT("Sample size: %u\r\n"), audioMediaType->lSampleSize);
; 253  :             }
; 254  :             else if(err == E_NOTIMPL) //elgato probably

	cmp	eax, -2147467263			; ffffffff80004001H
	jne	SHORT $LN54@LoadFilter

; 255  :             {
; 256  :                 IEnumMediaTypes *audioMediaTypes;
; 257  :                 if(SUCCEEDED(err = audioPin->EnumMediaTypes(&audioMediaTypes)))

	mov	rcx, QWORD PTR audioPin$[rbp-153]
	mov	rax, QWORD PTR [rcx]
	lea	rdx, QWORD PTR audioMediaTypes$91308[rbp-153]
	call	QWORD PTR [rax+96]
	test	eax, eax
	js	SHORT $LN53@LoadFilter

; 258  :                 {
; 259  :                     ULONG i = 0;

	mov	DWORD PTR i$91311[rbp-153], r14d

; 260  :                     if((err = audioMediaTypes->Next(1, &audioMediaType, &i)) == S_OK)

	mov	rcx, QWORD PTR audioMediaTypes$91308[rbp-153]
	mov	rax, QWORD PTR [rcx]
	lea	r9, QWORD PTR i$91311[rbp-153]
	lea	r8, QWORD PTR audioMediaType$91302[rbp-153]
	mov	edx, 1
	call	QWORD PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN52@LoadFilter

; 261  :                         SetAudioInfo(audioMediaType, expectedAudioType);

	lea	r8, QWORD PTR expectedAudioType$[rbp-153]
	mov	rdx, QWORD PTR audioMediaType$91302[rbp-153]
	mov	rcx, rbx
	call	?SetAudioInfo@DeviceSource@@AEAAXPEAU_AMMediaType@@AEAU_GUID@@@Z ; DeviceSource::SetAudioInfo

; 262  :                     else

	jmp	SHORT $LN51@LoadFilter
$LN52@LoadFilter:

; 263  :                     {
; 264  :                         AppWarning(TEXT("DShowAudioPlugin: audioMediaTypes->Next failed, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7287
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 265  :                         soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
$LN51@LoadFilter:

; 266  :                     }
; 267  : 
; 268  :                     audioMediaTypes->Release();

	mov	rcx, QWORD PTR audioMediaTypes$91308[rbp-153]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]

; 269  :                 }
; 270  :                 else

	jmp	SHORT $LN49@LoadFilter
$LN53@LoadFilter:

; 271  :                 {
; 272  :                     AppWarning(TEXT("DShowAudioPlugin: audioMediaTypes->Next failed, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7288

; 273  :                     soundOutputType = 0;
; 274  :                 }
; 275  :             }
; 276  :             else

	jmp	SHORT $LN222@LoadFilter
$LN54@LoadFilter:

; 277  :             {
; 278  :                 AppWarning(TEXT("DShowAudioPlugin: Could not get audio format, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7289
$LN222@LoadFilter:
	mov	edx, eax
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 279  :                 soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
$LN49@LoadFilter:

; 280  :             }
; 281  : 
; 282  :             audioConfig->Release();

	mov	rcx, QWORD PTR audioConfig$91298[rbp-153]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]

; 283  :         }
; 284  :         else {

	jmp	SHORT $LN48@LoadFilter
$LN57@LoadFilter:

; 285  :             soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
$LN48@LoadFilter:

; 286  :         }
; 287  :     }
; 288  : 
; 289  :     //------------------------------------------------
; 290  :     // add video capture filter if any
; 291  : 
; 292  :     captureFilter = new CaptureFilter(this, MEDIATYPE_Video, expectedMediaType);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	r12d, 32				; 00000020H
	mov	edx, r12d
	call	QWORD PTR [rax+8]
	mov	QWORD PTR [rax], r14
	mov	QWORD PTR [rax+8], r14
	mov	QWORD PTR [rax+16], r14
	mov	QWORD PTR [rax+24], r14
	mov	QWORD PTR $T112909[rbp-153], rax
	test	rax, rax
	je	SHORT $LN79@LoadFilter
	lea	r9, QWORD PTR expectedMediaType$[rbp-153]
	lea	r8, OFFSET FLAT:MEDIATYPE_Video
	mov	rdx, rbx
	mov	rcx, rax
	call	??0CaptureFilter@@QEAA@PEAVDeviceSource@@AEBU_GUID@@1@Z ; CaptureFilter::CaptureFilter
	mov	rdx, rax
	jmp	SHORT $LN80@LoadFilter
$LN79@LoadFilter:
	mov	rdx, r14
$LN80@LoadFilter:
	mov	QWORD PTR [rbx+48], rdx

; 293  : 
; 294  :     if(FAILED(err = graph->AddFilter(captureFilter, NULL)))

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	xor	r8d, r8d
	call	QWORD PTR [rax+24]
	test	eax, eax
	jns	SHORT $LN47@LoadFilter

; 295  :     {
; 296  :         AppWarning(TEXT("DShowAudioPlugin: Failed to add video capture filter to graph, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7290
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 297  :         goto cleanFinish;

	xor	sil, sil
	jmp	$LN27@LoadFilter
$LN47@LoadFilter:

; 298  :     }
; 299  : 
; 300  :     bAddedVideoCapture = true;

	mov	r15b, 1

; 301  : 
; 302  :     //------------------------------------------------
; 303  :     // add audio capture filter if any
; 304  : 
; 305  :     if(soundOutputType == 1)

	mov	eax, DWORD PTR [rbx+276]
	cmp	eax, 1
	jne	SHORT $LN45@LoadFilter

; 306  :     {
; 307  :         audioFilter = new CaptureFilter(this, MEDIATYPE_Audio, expectedAudioType);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, r12
	call	QWORD PTR [rax+8]
	mov	QWORD PTR [rax], r14
	mov	QWORD PTR [rax+8], r14
	mov	QWORD PTR [rax+16], r14
	mov	QWORD PTR [rax+24], r14
	mov	QWORD PTR $T112913[rbp-153], rax
	test	rax, rax
	je	SHORT $LN81@LoadFilter
	lea	r9, QWORD PTR expectedAudioType$[rbp-153]
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, rax
	call	??0CaptureFilter@@QEAA@PEAVDeviceSource@@AEBU_GUID@@1@Z ; CaptureFilter::CaptureFilter
	jmp	SHORT $LN82@LoadFilter
$LN81@LoadFilter:
	mov	rax, r14
$LN82@LoadFilter:
	mov	QWORD PTR [rbx+56], rax

; 308  :         if(!audioFilter)

	test	rax, rax
	jne	$LN40@LoadFilter

; 309  :         {
; 310  :             AppWarning(TEXT("Failed to create audio capture filter"));

	lea	rcx, OFFSET FLAT:$SG-7291
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 311  :             soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d

; 312  :         }
; 313  :     }

	jmp	$LN40@LoadFilter
$LN45@LoadFilter:

; 314  :     else if(soundOutputType == 2)

	cmp	eax, 2
	jne	$LN40@LoadFilter

; 315  :     {
; 316  :         if(FAILED(err = CoCreateInstance(CLSID_DSoundRender, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&audioFilter)))

	lea	rdi, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsp+32], rdi
	lea	r9, OFFSET FLAT:IID_IBaseFilter
	xor	edx, edx
	lea	r8d, QWORD PTR [rax-1]
	lea	rcx, OFFSET FLAT:CLSID_DSoundRender
	call	QWORD PTR __imp_CoCreateInstance
	test	eax, eax
	jns	SHORT $LN41@LoadFilter

; 317  :         {
; 318  :             AppWarning(TEXT("DShowPlugin: failed to create audio renderer, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7292
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 319  :             soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
$LN41@LoadFilter:

; 320  :         }
; 321  : 
; 322  :         IBasicAudio *basicAudio;
; 323  :         if(SUCCEEDED(audioFilter->QueryInterface(IID_IBasicAudio, (void**)&basicAudio)))

	mov	rcx, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR basicAudio$91343[rbp-153]
	lea	rdx, OFFSET FLAT:IID_IBasicAudio
	call	QWORD PTR [rax]
	test	eax, eax
	js	SHORT $LN40@LoadFilter

; 324  :         {
; 325  :             long lVol = long((double(volume)*NEAR_SILENTf)-NEAR_SILENTf);

	unpcklps xmm6, xmm6
	cvtps2pd xmm1, xmm6
	mulsd	xmm1, QWORD PTR __real@40a7700000000000
	subsd	xmm1, QWORD PTR __real@40a7700000000000
	cvttsd2si edx, xmm1

; 326  :             if(lVol <= -NEAR_SILENT)

	mov	eax, -10000				; ffffffffffffd8f0H
	cmp	edx, -3000				; fffffffffffff448H
	cmovle	edx, eax

; 327  :                 lVol = -10000;
; 328  :             basicAudio->put_Volume(lVol);

	mov	rcx, QWORD PTR basicAudio$91343[rbp-153]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]

; 329  :             basicAudio->Release();

	mov	rcx, QWORD PTR basicAudio$91343[rbp-153]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
$LN40@LoadFilter:

; 330  :         }
; 331  :     }
; 332  : 
; 333  :     if(soundOutputType != 0)

	cmp	DWORD PTR [rbx+276], 0
	je	SHORT $LN38@LoadFilter

; 334  :     {
; 335  :         if(FAILED(err = graph->AddFilter(audioFilter, NULL)))

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	xor	r8d, r8d
	mov	rdx, QWORD PTR [rbx+56]
	call	QWORD PTR [rax+24]
	test	eax, eax
	jns	SHORT $LN37@LoadFilter

; 336  :         {
; 337  :             AppWarning(TEXT("DShowAudioPlugin: Failed to add audio capture filter to graph, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7293
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 338  :             goto cleanFinish;

	xor	sil, sil
	jmp	$LN27@LoadFilter
$LN37@LoadFilter:

; 339  :         }
; 340  : 
; 341  :         bAddedAudioCapture = true;

	mov	BYTE PTR bAddedAudioCapture$1$[rbp-153], 1
$LN38@LoadFilter:

; 342  :     }
; 343  : 
; 344  :     //------------------------------------------------
; 345  :     // add primary device filter
; 346  : 
; 347  :     if(FAILED(err = graph->AddFilter(audioDeviceFilter, NULL)))

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	xor	r8d, r8d
	mov	rdx, QWORD PTR [rbx+40]
	call	QWORD PTR [rax+24]
	test	eax, eax
	jns	SHORT $LN35@LoadFilter

; 348  :     {
; 349  :         AppWarning(TEXT("DShowAudioPlugin: Failed to add audio device filter to graph, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7294
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 350  :         goto cleanFinish;

	xor	sil, sil
	jmp	$LN27@LoadFilter
$LN35@LoadFilter:

; 351  :     }
; 352  : 
; 353  :     bAddedDevice = true;

	mov	sil, 1

; 354  : 
; 355  :     //------------------------------------------------
; 356  :     // connect all pins and set up the whole capture thing
; 357  : 
; 358  :     bool bConnected;
; 359  : 
; 360  :     if(soundOutputType != 0)

	cmp	DWORD PTR [rbx+276], 0
	je	SHORT $LN32@LoadFilter

; 361  :     {
; 362  :         bConnected = SUCCEEDED(err = capture->RenderStream(&PIN_CATEGORY_CAPTURE, &MEDIATYPE_Audio, audioDeviceFilter, NULL, audioFilter));

	mov	rcx, QWORD PTR [rbx+16]
	mov	rdi, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r14
	mov	r9, QWORD PTR [rbx+40]
	lea	r8, OFFSET FLAT:MEDIATYPE_Audio
	lea	rdx, OFFSET FLAT:PIN_CATEGORY_CAPTURE
	call	QWORD PTR [rdi+56]
	mov	edx, eax
	test	eax, eax
	setns	al

; 363  :         if(!bConnected)

	test	al, al
	jne	SHORT $LN32@LoadFilter

; 364  :         {
; 365  :             AppWarning(TEXT("DShowAudioPlugin: Failed to connect the audio device pin to the audio capture pin, result = %08lX"), err);

	lea	rcx, OFFSET FLAT:$SG-7295
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 366  :             soundOutputType = 0;

	mov	DWORD PTR [rbx+276], r14d
$LN32@LoadFilter:

; 367  :         }
; 368  :     }
; 369  : 
; 370  :     if(FAILED(err = graph->QueryInterface(IID_IMediaControl, (void**)&control)))

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:IID_IMediaControl
	call	QWORD PTR [rax]
	test	eax, eax
	jns	SHORT $LN31@LoadFilter

; 371  :     {
; 372  :         AppWarning(TEXT("DShowAudioPlugin: Failed to get IMediaControl, result = %08lX"), err);

	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7296
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ

; 373  :         goto cleanFinish;

	jmp	$LN27@LoadFilter
$LN31@LoadFilter:

; 374  :     }
; 375  : 
; 376  :     if(soundOutputType == 1)

	cmp	DWORD PTR [rbx+276], 1
	jne	SHORT $LN29@LoadFilter

; 377  :     {
; 378  :         audioOut = new DeviceAudioSource;

	mov	ecx, 264				; 00000108H
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax
	mov	QWORD PTR $T112917[rbp-153], rax
	test	rax, rax
	je	SHORT $LN83@LoadFilter
	mov	rcx, rax
	call	QWORD PTR __imp_??0AudioSource@@QEAA@XZ
	npad	1
	lea	rax, OFFSET FLAT:??_7DeviceAudioSource@@6B@
	mov	QWORD PTR [rdi], rax
	mov	QWORD PTR [rdi+224], r14
	mov	DWORD PTR [rdi+232], r14d
	mov	QWORD PTR [rdi+240], r14
	mov	DWORD PTR [rdi+248], r14d
	jmp	SHORT $LN84@LoadFilter
$LN83@LoadFilter:
	mov	rdi, r14
$LN84@LoadFilter:
	mov	QWORD PTR [rbx+88], rdi

; 379  :         audioOut->Initialize(this);

	mov	rdx, rbx
	mov	rcx, rdi
	call	?Initialize@DeviceAudioSource@@QEAA_NPEAVDeviceSource@@@Z ; DeviceAudioSource::Initialize

; 380  :         API->AddAudioSource(audioOut);

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+88]
	call	QWORD PTR [rax+248]

; 381  : 
; 382  :         audioOut->SetVolume(volume);

	movaps	xmm1, xmm6
	mov	rcx, QWORD PTR [rbx+88]
	call	QWORD PTR __imp_?SetVolume@AudioSource@@QEAAXM@Z
$LN29@LoadFilter:

; 383  :     }
; 384  : 
; 385  :     bSucceeded = true;

	mov	r13b, 1
$LN27@LoadFilter:

; 386  : 
; 387  : cleanFinish:
; 388  :     SafeRelease(config);
; 389  :     SafeRelease(devicePin);
; 390  :     SafeRelease(audioPin);

	mov	rcx, QWORD PTR audioPin$[rbp-153]
	test	rcx, rcx
	je	SHORT $LN26@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR audioPin$[rbp-153], r14
$LN26@LoadFilter:

; 391  : 
; 392  :     for(UINT i=0; i<outputList.Num(); i++)
; 393  :         outputList[i].FreeData();
; 394  : 
; 395  :     if(!bSucceeded)

	test	r13b, r13b
	jne	$LN22@LoadFilter

; 396  :     {
; 397  :         bCapturing = false;

	mov	BYTE PTR [rbx+308], r13b

; 398  : 
; 399  :         if(bAddedVideoCapture)

	test	r15b, r15b
	je	SHORT $LN21@LoadFilter

; 400  :             graph->RemoveFilter(captureFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+48]
	call	QWORD PTR [rax+32]
$LN21@LoadFilter:

; 401  :         if(bAddedAudioCapture)

	cmp	BYTE PTR bAddedAudioCapture$1$[rbp-153], 0
	je	SHORT $LN20@LoadFilter

; 402  :             graph->RemoveFilter(audioFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+56]
	call	QWORD PTR [rax+32]
$LN20@LoadFilter:

; 403  :         if(bAddedDevice) {

	test	sil, sil
	je	SHORT $LN19@LoadFilter

; 404  :             graph->RemoveFilter(audioDeviceFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+40]
	call	QWORD PTR [rax+32]

; 405  :             graph->RemoveFilter(deviceFilter);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+32]
	call	QWORD PTR [rax+32]
$LN19@LoadFilter:

; 406  :         }
; 407  : 
; 408  :         SafeRelease(audioDeviceFilter);

	mov	rcx, QWORD PTR [rbx+40]
	test	rcx, rcx
	je	SHORT $LN18@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+40], r14
$LN18@LoadFilter:

; 409  :         SafeRelease(deviceFilter);

	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN17@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+32], r14
$LN17@LoadFilter:

; 410  :         SafeRelease(captureFilter);

	mov	rcx, QWORD PTR [rbx+48]
	test	rcx, rcx
	je	SHORT $LN16@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+48], r14
$LN16@LoadFilter:

; 411  :         SafeRelease(audioFilter);

	mov	rcx, QWORD PTR [rbx+56]
	test	rcx, rcx
	je	SHORT $LN15@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+56], r14
$LN15@LoadFilter:

; 412  :         SafeRelease(control);

	mov	rcx, QWORD PTR [rbx+24]
	test	rcx, rcx
	je	SHORT $LN14@LoadFilter
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+24], r14
$LN14@LoadFilter:

; 413  : 
; 414  :         if(colorConvertShader)

	mov	rcx, QWORD PTR [rbx+312]
	test	rcx, rcx
	je	SHORT $LN13@LoadFilter

; 415  :         {
; 416  :             delete colorConvertShader;

	mov	rax, QWORD PTR [rcx]
	mov	edx, 1
	call	QWORD PTR [rax]

; 417  :             colorConvertShader = NULL;

	mov	QWORD PTR [rbx+312], r14
$LN13@LoadFilter:

; 418  :         }
; 419  : 
; 420  :         if(audioOut)

	mov	rcx, QWORD PTR [rbx+88]
	test	rcx, rcx
	je	SHORT $LN12@LoadFilter

; 421  :         {
; 422  :             delete audioOut;

	mov	rax, QWORD PTR [rcx]
	mov	edx, 1
	call	QWORD PTR [rax+24]

; 423  :             audioOut = NULL;

	mov	QWORD PTR [rbx+88], r14
$LN12@LoadFilter:

; 424  :         }
; 425  : 
; 426  :         if(lpImageBuffer)

	mov	rdx, QWORD PTR [rbx+392]
	test	rdx, rdx
	je	SHORT $LN11@LoadFilter

; 427  :         {
; 428  :             Free(lpImageBuffer);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]

; 429  :             lpImageBuffer = NULL;

	mov	QWORD PTR [rbx+392], r14
$LN11@LoadFilter:

; 430  :         }
; 431  : 
; 432  :         bReadyToDraw = true;

	mov	BYTE PTR [rbx+274], 1

; 433  :     }
; 434  :     else

	jmp	SHORT $LN10@LoadFilter
$LN22@LoadFilter:

; 435  :         bReadyToDraw = false;

	mov	BYTE PTR [rbx+274], 0
$LN10@LoadFilter:

; 436  : 
; 437  :     if(!renderCX) renderCX = 32;

	mov	eax, DWORD PTR [rbx+240]
	test	eax, eax
	cmove	eax, r12d
	mov	DWORD PTR [rbx+240], eax

; 438  :     if(!renderCY) renderCY = 32;

	mov	eax, DWORD PTR [rbx+244]
	test	eax, eax
	cmove	eax, r12d
	mov	DWORD PTR [rbx+244], eax

; 439  : 
; 440  :     //-----------------------------------------------------
; 441  :     // create the texture regardless, will just show up as red to indicate failure
; 442  :     BYTE *textureData = (BYTE*)Allocate(renderCX*renderCY*4);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rdi, QWORD PTR [rcx]
	mov	edx, DWORD PTR [rbx+244]
	imul	edx, DWORD PTR [rbx+240]
	shl	edx, 2
	call	QWORD PTR [rdi+8]
	mov	rsi, rax

; 443  : 
; 444  :     if(colorType == DeviceOutputType_RGB) //you may be confused, but when directshow outputs RGB, it's actually outputting BGR

	cmp	DWORD PTR [rbx+104], 0
	jne	SHORT $LN7@LoadFilter

; 445  :     {
; 446  :         msetd(textureData, 0xFFFF0000, renderCX*renderCY*4);

	mov	ecx, DWORD PTR [rbx+244]
	imul	ecx, DWORD PTR [rbx+240]
	shl	ecx, 2
	mov	edx, ecx
	mov	rax, -281470681808896			; ffff0000ffff0000H
	mov	QWORD PTR newVal$113119[rbp-153], rax
	mov	r8d, ecx
	and	r8d, 7
	shr	rdx, 3
	mov	rcx, rsi
	test	rdx, rdx
	je	SHORT $LN169@LoadFilter
	mov	rdi, rsi
	mov	rcx, rdx
	rep stosq
	lea	rcx, QWORD PTR [rsi+rdx*8]
$LN169@LoadFilter:
	test	r8, r8
	je	SHORT $LN167@LoadFilter
	lea	rdx, QWORD PTR newVal$113119[rbp-153]
	call	memcpy
$LN167@LoadFilter:

; 447  :         texture = CreateTexture(renderCX, renderCY, GS_BGR, textureData, FALSE, FALSE);

	mov	r9d, 5

; 448  :     }
; 449  :     else //if we're working with planar YUV, we can just use regular RGB textures instead

	jmp	SHORT $LN223@LoadFilter
$LN7@LoadFilter:

; 450  :     {
; 451  :         msetd(textureData, 0xFF0000FF, renderCX*renderCY*4);

	mov	edx, DWORD PTR [rbx+244]
	imul	edx, DWORD PTR [rbx+240]
	shl	edx, 2
	mov	rax, -72056494543077121			; ff0000ffff0000ffH
	mov	QWORD PTR newVal$113138[rbp-153], rax
	mov	r8d, edx
	and	r8d, 7
	shr	rdx, 3
	mov	rcx, rsi
	test	rdx, rdx
	je	SHORT $LN177@LoadFilter
	mov	rdi, rsi
	mov	rcx, rdx
	rep stosq
	lea	rcx, QWORD PTR [rsi+rdx*8]
$LN177@LoadFilter:
	test	r8, r8
	je	SHORT $LN175@LoadFilter
	lea	rdx, QWORD PTR newVal$113138[rbp-153]
	call	memcpy
$LN175@LoadFilter:

; 452  :         texture = CreateTexture(renderCX, renderCY, GS_RGB, textureData, FALSE, FALSE);

	mov	r9d, 3
$LN223@LoadFilter:
	mov	DWORD PTR [rsp+48], r14d
	mov	rax, QWORD PTR __imp_?GS@@3PEAVGraphicsSystem@@EA
	mov	DWORD PTR [rsp+40], r14d
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rsp+32], rsi
	mov	rax, QWORD PTR [rcx]
	mov	r8d, DWORD PTR [rbx+244]
	mov	edx, DWORD PTR [rbx+240]
	call	QWORD PTR [rax+48]
	mov	QWORD PTR [rbx+288], rax

; 453  :     }
; 454  : 
; 455  :     if(bSucceeded && bUseThreadedConversion)

	test	r13b, r13b
	je	SHORT $LN4@LoadFilter
	cmp	BYTE PTR [rbx+273], 0
	je	SHORT $LN4@LoadFilter

; 456  :     {
; 457  :         if(colorType == DeviceOutputType_I420 || colorType == DeviceOutputType_YV12)

	mov	eax, DWORD PTR [rbx+104]
	cmp	eax, 1
	je	SHORT $LN3@LoadFilter
	cmp	eax, 2
	jne	SHORT $LN4@LoadFilter
$LN3@LoadFilter:

; 458  :         {
; 459  :             LPBYTE lpData;
; 460  :             if(texture->Map(lpData, texturePitch))

	mov	rcx, QWORD PTR [rbx+288]
	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR [rbx+304]
	lea	rdx, QWORD PTR lpData$91406[rbp-153]
	call	QWORD PTR [rax+40]
	test	al, al
	je	SHORT $LN2@LoadFilter

; 461  :                 texture->Unmap();

	mov	rcx, QWORD PTR [rbx+288]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+48]

; 462  :             else

	jmp	SHORT $LN1@LoadFilter
$LN2@LoadFilter:

; 463  :                 texturePitch = renderCX*4;

	mov	eax, DWORD PTR [rbx+240]
	shl	eax, 2
	mov	DWORD PTR [rbx+304], eax
$LN1@LoadFilter:

; 464  : 
; 465  :             lpImageBuffer = (LPBYTE)Allocate(texturePitch*renderCY);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rdi, QWORD PTR [rcx]
	mov	edx, DWORD PTR [rbx+304]
	imul	edx, DWORD PTR [rbx+244]
	call	QWORD PTR [rdi+8]
	mov	QWORD PTR [rbx+392], rax
$LN4@LoadFilter:

; 466  :         }
; 467  :     }
; 468  : 
; 469  :     Free(textureData);

	mov	rcx, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx]
	mov	rdx, rsi
	call	QWORD PTR [rax+24]

; 470  : 
; 471  :     bFiltersLoaded = bSucceeded;

	mov	BYTE PTR [rbx+309], r13b

; 472  :     return bSucceeded;

	lea	rcx, QWORD PTR strShader$[rbp-153]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	movzx	eax, r13b
	jmp	SHORT $LN75@LoadFilter
$LN73@LoadFilter:

; 130  :         return false;

	xor	al, al
$LN75@LoadFilter:

; 473  : }

	movaps	xmm6, XMMWORD PTR [rsp+160]
	add	rsp, 184				; 000000b8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?LoadFilters@DeviceSource@@AEAA_NXZ ENDP		; DeviceSource::LoadFilters
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$0@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$0
	lea	rcx, QWORD PTR outputList$[rdx]
	jmp	??1?$List@UMediaOutputInfo@@@@QEAA@XZ	; List<MediaOutputInfo>::~List<MediaOutputInfo>
?dtor$0@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$0
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$1@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$1
	lea	rcx, QWORD PTR strShader$[rdx]
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$1@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$1
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$2@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$2
	lea	rcx, QWORD PTR strTest$91292[rdx]
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$2@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$2
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$3@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$3
	lea	rcx, QWORD PTR $T112907[rdx]
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$3@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$3
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$4@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$4
	mov	rcx, QWORD PTR $T112909[rdx]
	jmp	??3@YAXPEAX@Z				; operator delete
?dtor$4@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$4
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$5@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$5
	mov	rcx, QWORD PTR $T112913[rdx]
	jmp	??3@YAXPEAX@Z				; operator delete
?dtor$5@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$5
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$6@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$6
	mov	rcx, QWORD PTR $T112917[rdx]
	jmp	??3@YAXPEAX@Z				; operator delete
?dtor$6@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$6
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$7@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$7
	mov	rcx, QWORD PTR $T112917[rdx]
	rex_jmp	QWORD PTR __imp_??1AudioSource@@UEAA@XZ
?dtor$7@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$7
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$8@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$8
	mov	rcx, QWORD PTR $T112917[rdx]
	add	rcx, 224				; 000000e0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$8@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$8
; Function compile flags: /Ogtpy
audioMediaTypes$91308 = 64
audioConfig$91298 = 72
$T113271 = 80
expectedMediaType$ = 88
strTest$91292 = 88
expectedAudioType$ = 104
$T112907 = 104
outputList$ = 120
strShader$ = 136
bAddedAudioCapture$1$ = 256
newVal$113138 = 256
newVal$113119 = 256
lpData$91406 = 256
this$ = 256
$T112917 = 264
basicAudio$91343 = 264
$T112913 = 264
$T112909 = 264
i$91311 = 264
audioPin$ = 272
audioMediaType$91302 = 280
?dtor$9@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA PROC	; `DeviceSource::LoadFilters'::`1'::dtor$9
	mov	rcx, QWORD PTR $T112917[rdx]
	add	rcx, 240				; 000000f0H
	jmp	??1?$List@E@@QEAA@XZ			; List<unsigned char>::~List<unsigned char>
?dtor$9@?0??LoadFilters@DeviceSource@@AEAA_NXZ@4HA ENDP	; `DeviceSource::LoadFilters'::`1'::dtor$9
PUBLIC	?Stop@DeviceSource@@AEAAXXZ			; DeviceSource::Stop
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Stop@DeviceSource@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?Stop@DeviceSource@@AEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Stop@DeviceSource@@AEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Stop@DeviceSource@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?Stop@DeviceSource@@AEAAXXZ PROC			; DeviceSource::Stop, COMDAT

; 565  : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 566  :     if(!bCapturing)

	cmp	BYTE PTR [rcx+308], 0
	mov	rbx, rcx
	je	SHORT $LN2@Stop

; 567  :         return;
; 568  : 
; 569  :     bCapturing = false;

	mov	BYTE PTR [rcx+308], 0

; 570  :     control->Stop();

	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+72]

; 571  :     FlushSamples();

	mov	rcx, rbx
	call	?FlushSamples@DeviceSource@@AEAAXXZ	; DeviceSource::FlushSamples
$LN2@Stop:

; 572  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Stop@DeviceSource@@AEAAXXZ ENDP			; DeviceSource::Stop
_TEXT	ENDS
PUBLIC	??1DeviceSource@@UEAA@XZ			; DeviceSource::~DeviceSource
;	COMDAT pdata
; File c:\users\beeanyew\documents\github\obs\obsapi\scene.h
pdata	SEGMENT
$pdata$??1DeviceSource@@UEAA@XZ DD imagerel $LN33
	DD	imagerel $LN33+351
	DD	imagerel $unwind$??1DeviceSource@@UEAA@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1DeviceSource@@UEAA@XZ DD imagerel ??1DeviceSource@@UEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1DeviceSource@@UEAA@XZ+37
	DD	08H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+194
	DD	07H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+235
	DD	06H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+249
	DD	05H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+263
	DD	04H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+277
	DD	03H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+291
	DD	02H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+305
	DD	01H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+319
	DD	00H
	DD	imagerel ??1DeviceSource@@UEAA@XZ+330
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1DeviceSource@@UEAA@XZ DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1DeviceSource@@UEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1DeviceSource@@UEAA@XZ DD 019930522H
	DD	09H
	DD	imagerel $stateUnwindMap$??1DeviceSource@@UEAA@XZ
	DD	00H
	DD	00H
	DD	0bH
	DD	imagerel $ip2state$??1DeviceSource@@UEAA@XZ
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1DeviceSource@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	03H
	DD	imagerel ?dtor$4@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	04H
	DD	imagerel ?dtor$5@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	05H
	DD	imagerel ?dtor$6@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	06H
	DD	imagerel ?dtor$7@?0???1DeviceSource@@UEAA@XZ@4HA
	DD	07H
	DD	imagerel ?dtor$8@?0???1DeviceSource@@UEAA@XZ@4HA
; Function compile flags: /Ogtpy
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\devicesource.cpp
xdata	ENDS
;	COMDAT ??1DeviceSource@@UEAA@XZ
_TEXT	SEGMENT
$T113836 = 32
this$ = 64
??1DeviceSource@@UEAA@XZ PROC				; DeviceSource::~DeviceSource, COMDAT

; 73   : {

$LN33:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T113836[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	mov	rbx, rcx
	lea	rax, OFFSET FLAT:??_7DeviceSource@@6B@
	mov	QWORD PTR [rcx], rax

; 74   :     Stop();

	cmp	BYTE PTR [rcx+308], 0
	je	SHORT $LN18@DeviceSour
	mov	BYTE PTR [rcx+308], 0
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+72]
	mov	rcx, rbx
	call	?FlushSamples@DeviceSource@@AEAAXXZ	; DeviceSource::FlushSamples
$LN18@DeviceSour:

; 75   :     UnloadFilters();

	mov	rcx, rbx
	call	?UnloadFilters@DeviceSource@@AEAAXXZ	; DeviceSource::UnloadFilters

; 76   : 
; 77   :     SafeRelease(capture);

	mov	rcx, QWORD PTR [rbx+16]
	xor	edi, edi
	test	rcx, rcx
	je	SHORT $LN5@DeviceSour
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+16], rdi
$LN5@DeviceSour:

; 78   :     SafeRelease(graph);

	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN4@DeviceSour
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	mov	QWORD PTR [rbx+8], rdi
$LN4@DeviceSour:

; 79   : 
; 80   :     if(hConvertThreads)

	mov	rdx, QWORD PTR [rbx+408]
	test	rdx, rdx
	je	SHORT $LN20@DeviceSour

; 81   :         Free(hConvertThreads);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
$LN20@DeviceSour:

; 82   : 
; 83   :     if(convertData)

	mov	rdx, QWORD PTR [rbx+400]
	test	rdx, rdx
	je	SHORT $LN22@DeviceSour

; 84   :         Free(convertData);

	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
$LN22@DeviceSour:

; 85   : 
; 86   :     if(hSampleMutex)

	mov	rcx, QWORD PTR [rbx+336]
	test	rcx, rcx
	je	SHORT $LN1@DeviceSour

; 87   :         OSCloseMutex(hSampleMutex);

	call	QWORD PTR __imp_?OSCloseMutex@@YAXPEAX@Z
	npad	1
$LN1@DeviceSour:

; 88   : }

	mov	rdx, QWORD PTR [rbx+368]
	test	rdx, rdx
	je	SHORT $LN26@DeviceSour
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR [rbx+368], rdi
	mov	DWORD PTR [rbx+376], edi
$LN26@DeviceSour:
	lea	rcx, QWORD PTR [rbx+208]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+192]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+176]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+160]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+144]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+128]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	lea	rcx, QWORD PTR [rbx+112]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	npad	1
	mov	rax, QWORD PTR __imp_??_7ImageSource@@6B@
	mov	QWORD PTR [rbx], rax
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1DeviceSource@@UEAA@XZ ENDP				; DeviceSource::~DeviceSource
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T113836 = 32
this$ = 64
?dtor$0@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	rex_jmp	QWORD PTR __imp_??1ImageSource@@UEAA@XZ
?dtor$0@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$0
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$1@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$1
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 112				; 00000070H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$1@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$1
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$2@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$2
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 128				; 00000080H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$2@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$2
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$3@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$3
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 144				; 00000090H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$3@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$3
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$4@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$4
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 160				; 000000a0H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$4@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$4
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$5@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$5
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 176				; 000000b0H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$5@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$5
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$6@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$6
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 192				; 000000c0H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$6@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$6
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$7@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$7
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 208				; 000000d0H
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$7@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$7
; Function compile flags: /Ogtpy
$T113836 = 32
this$ = 64
?dtor$8@?0???1DeviceSource@@UEAA@XZ@4HA PROC		; `DeviceSource::~DeviceSource'::`1'::dtor$8
	mov	rcx, QWORD PTR this$[rdx]
	add	rcx, 368				; 00000170H
	jmp	??1?$List@PEAUSampleData@@@@QEAA@XZ	; List<SampleData * __ptr64>::~List<SampleData * __ptr64>
?dtor$8@?0???1DeviceSource@@UEAA@XZ@4HA ENDP		; `DeviceSource::~DeviceSource'::`1'::dtor$8
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UpdateSettings@DeviceSource@@UEAAXXZ DD imagerel $LN20
	DD	imagerel $LN20+529
	DD	imagerel $unwind$?UpdateSettings@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?UpdateSettings@DeviceSource@@UEAAXXZ DD imagerel ?UpdateSettings@DeviceSource@@UEAAXXZ
	DD	0ffffffffH
	DD	imagerel ?UpdateSettings@DeviceSource@@UEAAXXZ+80
	DD	00H
	DD	imagerel ?UpdateSettings@DeviceSource@@UEAAXXZ+487
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UpdateSettings@DeviceSource@@UEAAXXZ DD 0c2711H
	DD	0f7427H
	DD	0e6422H
	DD	0d541dH
	DD	0c3418H
	DD	0e006720aH
	DD	0c002d004H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?UpdateSettings@DeviceSource@@UEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?UpdateSettings@DeviceSource@@UEAAXXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?UpdateSettings@DeviceSource@@UEAAXXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?UpdateSettings@DeviceSource@@UEAAXXZ
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?UpdateSettings@DeviceSource@@UEAAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??UpdateSettings@DeviceSource@@UEAAXXZ@4HA
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?UpdateSettings@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
$T113964 = 32
strNewDevice$ = 40
this$ = 96
?UpdateSettings@DeviceSource@@UEAAXXZ PROC		; DeviceSource::UpdateSettings, COMDAT

; 749  : {

$LN20:
	push	r12
	push	r13
	push	r14
	sub	rsp, 64					; 00000040H
	mov	QWORD PTR $T113964[rsp], -2
	mov	QWORD PTR [rsp+96], rbx
	mov	QWORD PTR [rsp+104], rbp
	mov	QWORD PTR [rsp+112], rsi
	mov	QWORD PTR [rsp+120], rdi
	mov	rbx, rcx

; 750  :     String strNewDevice     = data->GetString(TEXT("audioDevice"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7307
	mov	rcx, QWORD PTR [rcx+296]
	call	QWORD PTR __imp_?GetString@XElement@@QEBAPEB_WPEB_WPEA_W@Z
	mov	rdx, rax
	lea	rcx, QWORD PTR strNewDevice$[rsp]
	call	QWORD PTR __imp_??0String@@QEAA@PEB_W@Z
	npad	1

; 751  :     UINT64 newFrameInterval = data->GetInt(TEXT("frameInterval"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7308
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	movsxd	rbp, eax

; 752  :     UINT newCX              = data->GetInt(TEXT("resolutionWidth"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7309
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	r14d, eax

; 753  :     UINT newCY              = data->GetInt(TEXT("resolutionHeight"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7310
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	r13d, eax

; 754  :     BOOL bNewCustom         = data->GetInt(TEXT("customResolution"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7311
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	r12d, eax

; 755  :     UINT newPreferredType   = data->GetInt(TEXT("usePreferredType")) != 0 ? data->GetInt(TEXT("preferredType")) : -1;

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7312
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	test	eax, eax
	je	SHORT $LN7@UpdateSett
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7313
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	edi, eax
	jmp	SHORT $LN8@UpdateSett
$LN7@UpdateSett:
	or	edi, -1					; ffffffffH
$LN8@UpdateSett:

; 756  :     UINT newSoundOutputType     = data->GetInt(TEXT("soundOutputType"));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG-7314
	mov	rcx, QWORD PTR [rbx+296]
	call	QWORD PTR __imp_?GetInt@XElement@@QEBAHPEB_WH@Z
	mov	esi, eax

; 757  : 
; 758  :     if(renderCX != newCX || renderCY != newCY || frameInterval != newFrameInterval || newPreferredType != preferredOutputType ||
; 759  :         !strAudioDevice.CompareI(strNewDevice) || bNewCustom != bUseCustomResolution ||
; 760  :         newSoundOutputType != soundOutputType)

	cmp	DWORD PTR [rbx+240], r14d
	jne	SHORT $LN3@UpdateSett
	cmp	DWORD PTR [rbx+244], r13d
	jne	SHORT $LN3@UpdateSett
	cmp	QWORD PTR [rbx+232], rbp
	jne	SHORT $LN3@UpdateSett
	cmp	edi, DWORD PTR [rbx+252]
	jne	SHORT $LN3@UpdateSett
	lea	rcx, QWORD PTR [rbx+160]
	mov	rdx, QWORD PTR strNewDevice$[rsp]
	call	QWORD PTR __imp_?CompareI@String@@QEBAHPEB_W@Z
	test	eax, eax
	je	SHORT $LN3@UpdateSett
	cmp	r12d, DWORD PTR [rbx+248]
	jne	SHORT $LN3@UpdateSett
	cmp	esi, DWORD PTR [rbx+276]
	je	$LN4@UpdateSett
$LN3@UpdateSett:

; 761  :     {
; 762  :         API->EnterSceneMutex();

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]

; 763  : 
; 764  :         bool bWasCapturing = bCapturing;

	movzx	edi, BYTE PTR [rbx+308]

; 765  :         if(bWasCapturing) Stop();

	test	dil, dil
	je	SHORT $LN13@UpdateSett
	mov	BYTE PTR [rbx+308], 0
	mov	rcx, QWORD PTR [rbx+24]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+72]
	mov	rcx, rbx
	call	?FlushSamples@DeviceSource@@AEAAXXZ	; DeviceSource::FlushSamples
$LN13@UpdateSett:

; 766  : 
; 767  :         UnloadFilters();

	mov	rcx, rbx
	call	?UnloadFilters@DeviceSource@@AEAAXXZ	; DeviceSource::UnloadFilters

; 768  :         LoadFilters();

	mov	rcx, rbx
	call	?LoadFilters@DeviceSource@@AEAA_NXZ	; DeviceSource::LoadFilters

; 769  : 
; 770  :         if(bWasCapturing) Start();

	test	dil, dil
	je	SHORT $LN16@UpdateSett
	cmp	BYTE PTR [rbx+308], 0
	jne	SHORT $LN16@UpdateSett
	mov	rcx, QWORD PTR [rbx+24]
	test	rcx, rcx
	je	SHORT $LN16@UpdateSett
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+56]
	test	eax, eax
	jns	SHORT $LN15@UpdateSett
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG-7305
	call	QWORD PTR __imp_?AppWarning@@YAXPEB_WZZ
	jmp	SHORT $LN16@UpdateSett
$LN15@UpdateSett:
	mov	BYTE PTR [rbx+308], 1
$LN16@UpdateSett:

; 771  : 
; 772  :         API->LeaveSceneMutex();

	mov	rax, QWORD PTR __imp_?API@@3PEAVAPIInterface@@EA
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
	npad	1
$LN4@UpdateSett:

; 773  :     }
; 774  : }

	lea	rcx, QWORD PTR strNewDevice$[rsp]
	call	QWORD PTR __imp_??1String@@QEAA@XZ
	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	mov	rdi, QWORD PTR [rsp+120]
	add	rsp, 64					; 00000040H
	pop	r14
	pop	r13
	pop	r12
	ret	0
?UpdateSettings@DeviceSource@@UEAAXXZ ENDP		; DeviceSource::UpdateSettings
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T113964 = 32
strNewDevice$ = 40
this$ = 96
?dtor$0@?0??UpdateSettings@DeviceSource@@UEAAXXZ@4HA PROC ; `DeviceSource::UpdateSettings'::`1'::dtor$0
	lea	rcx, QWORD PTR strNewDevice$[rdx]
	rex_jmp	QWORD PTR __imp_??1String@@QEAA@XZ
?dtor$0@?0??UpdateSettings@DeviceSource@@UEAAXXZ@4HA ENDP ; `DeviceSource::UpdateSettings'::`1'::dtor$0
text$x	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndScene@DeviceSource@@UEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$?EndScene@DeviceSource@@UEAAXXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndScene@DeviceSource@@UEAAXXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?EndScene@DeviceSource@@UEAAXXZ
_TEXT	SEGMENT
this$ = 48
?EndScene@DeviceSource@@UEAAXXZ PROC			; DeviceSource::EndScene, COMDAT

; 580  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H

; 581  :     Stop();

	cmp	BYTE PTR [rcx+308], 0
	mov	rbx, rcx
	je	SHORT $LN4@EndScene
	mov	BYTE PTR [rcx+308], 0
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+72]
	mov	rcx, rbx
	call	?FlushSamples@DeviceSource@@AEAAXXZ	; DeviceSource::FlushSamples
$LN4@EndScene:

; 582  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?EndScene@DeviceSource@@UEAAXXZ ENDP			; DeviceSource::EndScene
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDeviceSource@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$??_GDeviceSource@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDeviceSource@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??_GDeviceSource@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GDeviceSource@@UEAAPEAXI@Z PROC			; DeviceSource::`scalar deleting destructor', COMDAT
$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, edx
	mov	rdi, rcx
	call	??1DeviceSource@@UEAA@XZ		; DeviceSource::~DeviceSource
	test	bl, 1
	je	SHORT $LN8@scalar@6
	mov	rax, QWORD PTR __imp_?MainAllocator@@3PEAVAlloc@@EA
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+24]
$LN8@scalar@6:
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GDeviceSource@@UEAAPEAXI@Z ENDP			; DeviceSource::`scalar deleting destructor'
END
