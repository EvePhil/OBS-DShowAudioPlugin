; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\beeanyew\Documents\GitHub\OBS\DShowAudioPlugin\DShowAudioPlugin.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@		; `string'
PUBLIC	??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
PUBLIC	?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
PUBLIC	?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
PUBLIC	?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
PUBLIC	?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
PUBLIC	?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
PUBLIC	?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn
PUBLIC	?nop@@YAXXZ					; nop
PUBLIC	?GetVideoBMIHeader@@YAPAUtagBITMAPINFOHEADER@@PBU_AMMediaType@@@Z ; GetVideoBMIHeader
PUBLIC	?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z	; List<MediaOutputInfo>::SetSize
PUBLIC	?CreateNew@?$List@UMediaOutputInfo@@@@QAEPAUMediaOutputInfo@@XZ ; List<MediaOutputInfo>::CreateNew
PUBLIC	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
PUBLIC	??0ColorSelectionData@@QAE@XZ			; ColorSelectionData::ColorSelectionData
PUBLIC	?Clear@ColorSelectionData@@QAEXXZ		; ColorSelectionData::Clear
PUBLIC	??1ColorSelectionData@@QAE@XZ			; ColorSelectionData::~ColorSelectionData
PUBLIC	_IsolationAwareCreateActCtxW@4
PUBLIC	_IsolationAwareActivateActCtx@8
PUBLIC	_IsolationAwareFindActCtxSectionStringW@20
PUBLIC	_IsolationAwareQueryActCtxW@28
PUBLIC	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
PUBLIC	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
PUBLIC	_IsolationAwarePrivatezltRgCebPnQQeRff@12
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
PUBLIC	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
PUBLIC	_IsolationAwareDeactivateActCtx@8
PUBLIC	_IsolationAwareDialogBoxParamW@20
PUBLIC	??0?$List@UtagSIZE@@@@QAE@XZ			; List<tagSIZE>::List<tagSIZE>
PUBLIC	??0ConfigDialogData@@QAE@XZ			; ConfigDialogData::ConfigDialogData
PUBLIC	?Clear@?$List@UtagSIZE@@@@QAEXXZ		; List<tagSIZE>::Clear
PUBLIC	??1?$List@UtagSIZE@@@@QAE@XZ			; List<tagSIZE>::~List<tagSIZE>
PUBLIC	?ClearOutputList@ConfigDialogData@@QAEXXZ	; ConfigDialogData::ClearOutputList
PUBLIC	??1ConfigDialogData@@QAE@XZ			; ConfigDialogData::~ConfigDialogData
PUBLIC	??_GConfigDialogData@@QAEPAXI@Z			; ConfigDialogData::`scalar deleting destructor'
PUBLIC	??0?$List@PAUSampleData@@@@QAE@XZ		; List<SampleData *>::List<SampleData *>
PUBLIC	??0DeviceSource@@QAE@XZ				; DeviceSource::DeviceSource
PUBLIC	??_GLocaleStringLookup@@QAEPAXI@Z		; LocaleStringLookup::`scalar deleting destructor'
PUBLIC	??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@		; `string'
PUBLIC	??_C@_0P@CECBPMJL@ActivateActCtx?$AA@		; `string'
PUBLIC	??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@	; `string'
PUBLIC	??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ ; `string'
PUBLIC	??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@		; `string'
PUBLIC	??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@		; `string'
PUBLIC	??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@	; `string'
PUBLIC	??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
PUBLIC	?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
PUBLIC	?pluginLocale@@3PAVLocaleStringLookup@@A	; pluginLocale
PUBLIC	?hinstMain@@3PAUHINSTANCE__@@A			; hinstMain
PUBLIC	?lpExceptionNames@@3PAPB_WA			; lpExceptionNames
PUBLIC	?lpExceptionGUIDs@@3PAPB_WA			; lpExceptionGUIDs
EXTRN	__imp_?GetElementByID@XElement@@QBEPAV1@K@Z:PROC
EXTRN	__imp_?NumElements@XElement@@QAEKPB_W@Z:PROC
EXTRN	__imp_?tstring_base_to_uint@@YAIPB_WPAPA_WH@Z:PROC
EXTRN	__imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z:PROC
EXTRN	__imp_?Left@String@@QAE?AV1@I@Z:PROC
EXTRN	__imp_?Mid@String@@QAE?AV1@II@Z:PROC
EXTRN	__imp_?Right@String@@QAE?AV1@I@Z:PROC
EXTRN	__imp_?Length@String@@QBEIXZ:PROC
EXTRN	__imp_??8String@@QBEHPB_W@Z:PROC
EXTRN	__imp__VariantInit@4:PROC
EXTRN	_IID_IKsPropertySet:BYTE
EXTRN	_AMPROPSETID_Pin:BYTE
EXTRN	_FORMAT_VideoInfo2:BYTE
EXTRN	_FORMAT_VideoInfo:BYTE
EXTRN	__imp_??0String@@QAE@PBD@Z:PROC
EXTRN	__imp_??6String@@QAEAAV0@ABV0@@Z:PROC
EXTRN	__imp_?Num@?$List@VString@@@@QBEIXZ:PROC
EXTRN	__imp_?Add@StringList@@QAEIABVString@@@Z:PROC
EXTRN	__imp_?Add@StringList@@QAEIPB_W@Z:PROC
EXTRN	__imp_?FindNextValueIndexI@StringList@@QBEIABVString@@I@Z:PROC
EXTRN	__imp_?UIntString@@YA?AVString@@IH@Z:PROC
EXTRN	_IID_IPropertyBag:BYTE
EXTRN	_IID_ICreateDevEnum:BYTE
EXTRN	_CLSID_SystemDeviceEnum:BYTE
EXTRN	__imp_?ValidIntString@@YGHPB_W@Z:PROC
EXTRN	__imp_?NumTokens@String@@QBEH_W@Z:PROC
EXTRN	__imp_?GetToken@String@@QBE?AV1@H_W@Z:PROC
EXTRN	__imp_?ToInt@String@@QBEHH@Z:PROC
EXTRN	__imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z:PROC
EXTRN	_IID_ISpecifyPropertyPages:BYTE
EXTRN	__imp__OleCreatePropertyFrame@44:PROC
EXTRN	_atexit:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__IsWindowEnabled@4:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp_??0String@@QAE@ABV0@@Z:PROC
EXTRN	__imp_??A?$List@VString@@@@QAEAAVString@@I@Z:PROC
EXTRN	__imp_?Clear@StringList@@QAEXXZ:PROC
EXTRN	__imp_?SetString@XElement@@QAEXPB_W0@Z:PROC
EXTRN	__imp_?SetFloat@XElement@@QAEXPB_WM@Z:PROC
EXTRN	__imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z:PROC
EXTRN	__imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z:PROC
EXTRN	__imp_?GetSource@SceneItem@@QBEPAVImageSource@@XZ:PROC
EXTRN	__imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z:PROC
EXTRN	__imp_?SetVolumeControlValue@@YAMPAUHWND__@@M@Z:PROC
EXTRN	__imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z:PROC
EXTRN	_AM_KSCATEGORY_CROSSBAR:BYTE
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__GetFileAttributesW@4:PROC
EXTRN	__imp__GetVersion@0:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp_?GetName@XBaseItem@@QBEPB_WXZ:PROC
EXTRN	__imp_?SetInt@XElement@@QAEXPB_WH@Z:PROC
EXTRN	__imp_?GetElement@XElement@@QBEPAV1@PB_W@Z:PROC
EXTRN	__imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z:PROC
EXTRN	__imp_?GetParent@XElement@@QBEPAV1@XZ:PROC
EXTRN	__imp_??0StringList@@QAE@XZ:PROC
EXTRN	__imp_??1StringList@@QAE@XZ:PROC
EXTRN	__imp_??0Vect4@@QAE@XZ:PROC
EXTRN	__imp_??0ImageSource@@QAE@XZ:PROC
EXTRN	__imp_??6String@@QAEAAV0@PB_W@Z:PROC
EXTRN	__imp_??0LocaleStringLookup@@QAE@XZ:PROC
EXTRN	__imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z:PROC
EXTRN	__imp_?InitVolumeControl@@YAXPAUHINSTANCE__@@@Z:PROC
EXTRN	__imp_?InitVolumeMeter@@YAXPAUHINSTANCE__@@@Z:PROC
EXTRN	__imp_??1LocaleStringLookup@@QAE@XZ:PROC
EXTRN	__imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z:PROC
;	COMDAT ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA DD 01H DUP (?) ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
_BSS	ENDS
;	COMDAT ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA
_BSS	SEGMENT
?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA DD 01H DUP (?) ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
_BSS	ENDS
;	COMDAT ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A
_BSS	SEGMENT
?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA DD 01H DUP (?) ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA DD 01H DUP (?) ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA DD 01H DUP (?) ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA DD 01H DUP (?) ; `IsolationAwareActivateActCtx'::`2'::s_pfn
?pluginLocale@@3PAVLocaleStringLookup@@A DD 01H DUP (?)	; pluginLocale
?hinstMain@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hinstMain
;	COMDAT ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureDialogProc'::`2'::bSelectingColor
_BSS	ENDS
;	COMDAT ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureDialogProc'::`2'::bMouseDown
?lpExceptionNames@@3PAPB_WA DD FLAT:$SG-8135		; lpExceptionNames
?lpExceptionGUIDs@@3PAPB_WA DD FLAT:$SG-8136		; lpExceptionGUIDs
;	COMDAT ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
CONST	SEGMENT
?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B DD FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
	DD	FLAT:??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	DD	FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
	DD	FLAT:??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	ENDS
;	COMDAT ??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	SEGMENT
??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@ DB 'Kernel32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB
CONST	SEGMENT
?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB DB 'Iso'
	DB	'lationAware function called after IsolationAwareCleanup', 0aH
	DB	00H						; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
CONST	ENDS
;	COMDAT ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'c', 00H, 't', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
CONST	SEGMENT
??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@ DB 'GetModuleHandleExW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@
CONST	SEGMENT
??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@ DB 'Unicows.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@ DB '?'
	DB	00H, '?', 00H, '?', 00H, '.', 00H, '?', 00H, '?', 00H, '?', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
CONST	SEGMENT
??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@ DB 'QueryActCtxW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
CONST	SEGMENT
??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ DB 'FindActCtxSectionStr'
	DB	'ingW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
CONST	SEGMENT
??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@ DB 'DeactivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
CONST	SEGMENT
??_C@_0P@CECBPMJL@ActivateActCtx?$AA@ DB 'ActivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
CONST	SEGMENT
??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@ DB 'CreateActCtxW', 00H ; `string'
$SG-8104 DB	00H
	ORG $+2
$SG-8105 DB	00H, 00H
	ORG $+2
$SG-8123 DB	'M', 00H, 'J', 00H, 'P', 00H, 'G', 00H, 00H, 00H
	ORG $+2
$SG-8122 DB	'd', 00H, 'v', 00H, 'h', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8121 DB	'd', 00H, 'v', 00H, 's', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8120 DB	'd', 00H, 'v', 00H, 's', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG-8119 DB	'H', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG-8118 DB	'M', 00H, 'P', 00H, 'E', 00H, 'G', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG-8117 DB	'H', 00H, 'D', 00H, 'Y', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG-8116 DB	'U', 00H, 'Y', 00H, 'V', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG-8115 DB	'Y', 00H, 'U', 00H, 'Y', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG-8114 DB	'Y', 00H, 'V', 00H, 'Y', 00H, 'U', 00H, 00H, 00H
	ORG $+2
$SG-8113 DB	'Y', 00H, 'V', 00H, 'U', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG-8112 DB	'Y', 00H, '4', 00H, '1', 00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG-8111 DB	'Y', 00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG-8110 DB	'I', 00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG-8109 DB	'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG-8108 DB	'R', 00H, 'G', 00H, 'B', 00H, '3', 00H, '2', 00H, 00H, 00H
$SG-8107 DB	'R', 00H, 'G', 00H, 'B', 00H, '2', 00H, '4', 00H, 00H, 00H
$SG-8106 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8124 DB	'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'S', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'D', 00H, 'S'
	DB	00H, 'h', 00H, 'o', 00H, 'w', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
$SG-8125 DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG-8126 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8127 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8128 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8129 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG-8130 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG-8131 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8132 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-8140 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8133 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'E', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '-', 00H, '>', 00H, 'C', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H
$SG-8144 DB	'CLSID_AudioRendererCategory', 00H
$SG-8134 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, '-', 00H, '>', 00H, 'B', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'T', 00H, 'o', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+2
$SG-8135 DB	'E', 00H, 'l', 00H, 'g', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'C'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'H', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG-8142 DB	'CLSID_AudioInputDeviceCategory', 00H
	ORG $+1
$SG-8145 DB	'Unknown device category', 00H
$SG-8147 DB	')', 00H, 00H, 00H
$SG-8136 DB	'{', 00H, '3', 00H, '9', 00H, 'F', 00H, '5', 00H, '0', 00H
	DB	'F', 00H, '4', 00H, 'C', 00H, '-', 00H, '9', 00H, '9', 00H, 'E'
	DB	00H, '1', 00H, '-', 00H, '4', 00H, '6', 00H, '4', 00H, 'a', 00H
	DB	'-', 00H, 'B', 00H, '6', 00H, 'F', 00H, '9', 00H, '-', 00H, 'D'
	DB	00H, '6', 00H, '0', 00H, '5', 00H, 'B', 00H, '4', 00H, 'F', 00H
	DB	'B', 00H, '5', 00H, '9', 00H, '1', 00H, '8', 00H, '}', 00H, 00H
	DB	00H
	ORG $+2
$SG-8137 DB	'{', 00H, '%', 00H, '0', 00H, '8', 00H, 'X', 00H, '-', 00H
	DB	'%', 00H, '0', 00H, '4', 00H, 'h', 00H, 'X', 00H, '-', 00H, '%'
	DB	00H, '0', 00H, '4', 00H, 'h', 00H, 'X', 00H, '-', 00H, '%', 00H
	DB	'0', 00H, '2', 00H, 'X', 00H, '%', 00H, '0', 00H, '2', 00H, 'X'
	DB	00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'X', 00H, '%', 00H
	DB	'0', 00H, '2', 00H, 'X', 00H, '%', 00H, '0', 00H, '2', 00H, 'X'
	DB	00H, '%', 00H, '0', 00H, '2', 00H, 'X', 00H, '%', 00H, '0', 00H
	DB	'2', 00H, 'X', 00H, '%', 00H, '0', 00H, '2', 00H, 'X', 00H, '}'
	DB	00H, 00H, 00H
	ORG $+2
$SG-8143 DB	'CLSID_VideoInputDeviceCategory', 00H
	ORG $+1
$SG-8149 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8138 DB	'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'o', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l'
	DB	00H, 'X', 00H, 00H, 00H
$SG-8139 DB	'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'C'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'E', 00H, 'n', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-8141 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8146 DB	' ', 00H, '(', 00H, 00H, 00H
	ORG $+2
$SG-8148 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8150 DB	'd', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 00H, 00H
$SG-8151 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8152 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-8153 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8154 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8155 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8156 DB	't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8157 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8158 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8159 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'G', 00H, 'l', 00H, 'o', 00H
	DB	'b', 00H, 'a', 00H, 'l', 00H, 'E', 00H, 'x', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG-8160 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'E', 00H, 'x', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 's', 00H, 'S', 00H, 'o', 00H, 'm', 00H, 'e'
	DB	00H, 'w', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 00H, 00H
$SG-8161 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'E', 00H, 'x', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 's', 00H, 'I', 00H, 'n', 00H, 'S', 00H, 'c'
	DB	00H, 'e', 00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG-8162 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8163 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8164 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'D'
	DB	00H, 00H, 00H
$SG-8165 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H, 'L'
	DB	00H, 'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG-8166 DB	'd', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 00H, 00H
$SG-8167 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-8168 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8169 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8170 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8171 DB	't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8172 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8173 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8174 DB	'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o'
	DB	00H, 'w', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, ':', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, ' ', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8175 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8176 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8177 DB	'g', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG-8178 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H
$SG-8179 DB	'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG-8180 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8181 DB	'c', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG-8187 DB	'.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8182 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H
	DB	'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '/', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, '/', 00H
	DB	'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG-8183 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H
	DB	'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '/', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, '/', 00H
	DB	'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG-8184 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG-8185 DB	'e', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG-8186 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'P', 00H
	DB	'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '/', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, '/', 00H
	DB	00H, 00H
	ORG $+2
$SG-8189 DB	'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8188 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG-8190 DB	'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'S', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'D', 00H, 'S'
	DB	00H, 'h', 00H, 'o', 00H, 'w', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
$SG-8191 DB	'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'.', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8192 DB	'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'.', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UtagSIZE@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@UtagSIZE@@@@QAE@XZ PROC			; List<tagSIZE>::List<tagSIZE>, COMDAT
; _this$ = eax

; 30   :     inline List() : array(NULL), num(0) {}

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$List@UtagSIZE@@@@QAE@XZ ENDP			; List<tagSIZE>::List<tagSIZE>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$List@PAUSampleData@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@PAUSampleData@@@@QAE@XZ PROC			; List<SampleData *>::List<SampleData *>, COMDAT
; _this$ = eax

; 30   :     inline List() : array(NULL), num(0) {}

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$List@PAUSampleData@@@@QAE@XZ ENDP			; List<SampleData *>::List<SampleData *>
_TEXT	ENDS
PUBLIC	_DllMain@12
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
_hInst$ = 8						; size = 4
_dwReason$ = 12						; size = 4
_lpBla$ = 16						; size = 4
_DllMain@12 PROC					; COMDAT

; 1323 : {

	push	ebp
	mov	ebp, esp

; 1324 :     if(dwReason == DLL_PROCESS_ATTACH)

	mov	eax, 1
	cmp	DWORD PTR _dwReason$[ebp], eax
	jne	SHORT $LN1@DllMain

; 1325 :         hinstMain = hInst;

	mov	ecx, DWORD PTR _hInst$[ebp]
	mov	DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A, ecx ; hinstMain
$LN1@DllMain:

; 1326 : 
; 1327 :     return TRUE;
; 1328 : }

	pop	ebp
	ret	12					; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
PUBLIC	_GetPluginDescription
; Function compile flags: /Ogtp
;	COMDAT _GetPluginDescription
_TEXT	SEGMENT
_GetPluginDescription PROC				; COMDAT

; 1318 :     return PluginStr("Plugin.Description");

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	OFFSET $SG-8192
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z

; 1319 : }

	ret	0
_GetPluginDescription ENDP
_TEXT	ENDS
PUBLIC	_GetPluginName
; Function compile flags: /Ogtp
;	COMDAT _GetPluginName
_TEXT	SEGMENT
_GetPluginName PROC					; COMDAT

; 1313 :     return PluginStr("Plugin.Name");

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	OFFSET $SG-8191
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z

; 1314 : }

	ret	0
_GetPluginName ENDP
_TEXT	ENDS
;	COMDAT ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
_BSS	SEGMENT
?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A DB 010H DUP (?) ; `ConfigureDialogProc'::`2'::colorData
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT ?Clear@ColorSelectionData@@QAEXXZ
_TEXT	SEGMENT
?Clear@ColorSelectionData@@QAEXXZ PROC			; ColorSelectionData::Clear, COMDAT

; 825  :         if(hdcDesktop)

	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN3@Clear

; 826  :         {
; 827  :             ReleaseDC(NULL, hdcDesktop);

	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8

; 828  :             hdcDesktop = NULL;

	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, ebx
$LN3@Clear:

; 829  :         }
; 830  : 
; 831  :         if(hdcDestination)

	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4
	cmp	eax, ebx
	je	SHORT $LN2@Clear

; 832  :         {
; 833  :             DeleteDC(hdcDestination);

	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 834  :             hdcDestination = NULL;

	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, ebx
$LN2@Clear:

; 835  :         }
; 836  : 
; 837  :         if(hBitmap)

	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8
	cmp	eax, ebx
	je	SHORT $LN6@Clear

; 838  :         {
; 839  :             DeleteObject(hBitmap);

	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 840  :             hBitmap = NULL;

	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, ebx
$LN6@Clear:

; 841  :         }
; 842  : 
; 843  :         bValid = false;

	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, bl
	pop	ebx

; 844  :     }

	ret	0
?Clear@ColorSelectionData@@QAEXXZ ENDP			; ColorSelectionData::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
??1ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::~ColorSelectionData, COMDAT

; 801  :     inline ~ColorSelectionData() {Clear();}

	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN5@ColorSelec
	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, ebx
$LN5@ColorSelec:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4
	cmp	eax, ebx
	je	SHORT $LN4@ColorSelec
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, ebx
$LN4@ColorSelec:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8
	cmp	eax, ebx
	je	SHORT $LN8@ColorSelec
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, ebx
$LN8@ColorSelec:
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, bl
	pop	ebx
	ret	0
??1ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::~ColorSelectionData
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
??0ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::ColorSelectionData, COMDAT

; 800  :     inline ColorSelectionData() : hdcDesktop(NULL), hdcDestination(NULL), hBitmap(NULL), bValid(false) {}

	xor	eax, eax
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, eax
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, eax
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, eax
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, al
	mov	eax, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	ret	0
??0ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::ColorSelectionData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z	; GetExceptionDevice
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
xdata$x	SEGMENT
__ehfuncinfo$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$10
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
_TEXT	SEGMENT
_filter$ = -64						; size = 4
_strGUID$ = -60						; size = 8
$T104783 = -52						; size = 8
$T104782 = -52						; size = 8
$T104781 = -52						; size = 8
$T104780 = -52						; size = 8
$T104779 = -52						; size = 8
$T104778 = -52						; size = 8
$T104777 = -52						; size = 8
$T104776 = -52						; size = 8
$T104773 = -52						; size = 8
_GUIDData$ = -44					; size = 8
_targetGUID$ = -36					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_lpGUID$ = 8						; size = 4
?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z PROC	; GetExceptionDevice, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _lpGUID$[ebp]

; 111  :     String strGUID = lpGUID;

	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 112  :     if(strGUID.Length() != 38)

	cmp	DWORD PTR _strGUID$[ebp+4], 38		; 00000026H
	je	SHORT $LN5@GetExcepti

; 113  :         return NULL;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN58@GetExcepti
$LN5@GetExcepti:

; 114  : 
; 115  :     strGUID = strGUID.Mid(1, strGUID.Length()-1);

	mov	ebx, DWORD PTR __imp_?Mid@String@@QAE?AV1@II@Z
	push	37					; 00000025H
	push	1
	lea	eax, DWORD PTR $T104773[ebp]
	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T104773[ebp]
	call	edi

; 116  : 
; 117  :     StringList GUIDData;

	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 118  :     strGUID.GetTokenList(GUIDData, '-', FALSE);

	push	0
	push	45					; 0000002dH
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z

; 119  : 
; 120  :     if (GUIDData.Num() != 5)

	cmp	DWORD PTR _GUIDData$[ebp+4], 5

; 121  :         return NULL;

	jne	$LN2@GetExcepti

; 122  : 
; 123  :     if (GUIDData[0].Length() != 8  ||
; 124  :         GUIDData[1].Length() != 4  ||
; 125  :         GUIDData[2].Length() != 4  ||
; 126  :         GUIDData[3].Length() != 4  ||
; 127  :         GUIDData[4].Length() != 12 )

	push	0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax+4]
	cmp	eax, 8
	jne	$LN2@GetExcepti
	push	1
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax+4]
	mov	esi, 4
	cmp	eax, esi
	jne	$LN2@GetExcepti
	push	2
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], esi
	jne	$LN2@GetExcepti
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], esi
	jne	$LN2@GetExcepti
	push	esi
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], 12			; 0000000cH
	jne	$LN2@GetExcepti

; 130  :     }
; 131  : 
; 132  :     GUID targetGUID;
; 133  :     targetGUID.Data1 = (UINT)tstring_base_to_uint(GUIDData[0], NULL, 16);

	push	0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR __imp_?tstring_base_to_uint@@YAIPB_WPAPA_WH@Z
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 134  :     targetGUID.Data2 = (WORD)tstring_base_to_uint(GUIDData[1], NULL, 16);

	push	1
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	DWORD PTR _targetGUID$[ebp], eax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 135  :     targetGUID.Data3 = (WORD)tstring_base_to_uint(GUIDData[2], NULL, 16);

	push	2
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	WORD PTR _targetGUID$[ebp+4], ax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 136  :     targetGUID.Data4[0] = (BYTE)tstring_base_to_uint(GUIDData[3].Left(2), NULL, 16);

	push	2
	lea	edx, DWORD PTR $T104776[ebp]
	push	edx
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	WORD PTR _targetGUID$[ebp+6], ax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Left@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+8], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104776[ebp]
	call	edi

; 137  :     targetGUID.Data4[1] = (BYTE)tstring_base_to_uint(GUIDData[3].Right(2), NULL, 16);

	push	2
	lea	eax, DWORD PTR $T104777[ebp]
	push	eax
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Right@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+9], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104777[ebp]
	call	edi

; 138  :     targetGUID.Data4[2] = (BYTE)tstring_base_to_uint(GUIDData[4].Left(2), NULL, 16);

	push	2
	lea	ecx, DWORD PTR $T104778[ebp]
	push	ecx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Left@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+10], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104778[ebp]
	call	edi

; 139  :     targetGUID.Data4[3] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(2, 4), NULL, 16);

	push	4
	push	2
	lea	edx, DWORD PTR $T104779[ebp]
	push	edx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+11], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104779[ebp]
	call	edi

; 140  :     targetGUID.Data4[4] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(4, 6), NULL, 16);

	push	6
	push	4
	lea	eax, DWORD PTR $T104780[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+12], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104780[ebp]
	call	edi

; 141  :     targetGUID.Data4[5] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(6, 8), NULL, 16);

	push	8
	push	6
	lea	ecx, DWORD PTR $T104781[ebp]
	push	ecx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+13], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104781[ebp]
	call	edi

; 142  :     targetGUID.Data4[6] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(8, 10), NULL, 16);

	push	10					; 0000000aH
	push	8
	lea	edx, DWORD PTR $T104782[ebp]
	push	edx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+14], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104782[ebp]
	call	edi

; 143  :     targetGUID.Data4[7] = (BYTE)tstring_base_to_uint(GUIDData[4].Right(2), NULL, 16);

	push	2
	lea	eax, DWORD PTR $T104783[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Right@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+15], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T104783[ebp]
	call	edi

; 144  : 
; 145  :     IBaseFilter *filter;
; 146  :     if(SUCCEEDED(CoCreateInstance(targetGUID, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&filter)))

	lea	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	push	OFFSET _IID_IBaseFilter
	push	1
	push	0
	lea	edx, DWORD PTR _targetGUID$[ebp]
	push	edx
	call	DWORD PTR __imp__CoCreateInstance@20
	test	eax, eax
	js	SHORT $LN2@GetExcepti

; 147  :         return filter;

	mov	esi, DWORD PTR _filter$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	edi
	mov	eax, esi
	jmp	SHORT $LN6@GetExcepti
$LN2@GetExcepti:

; 128  :     {
; 129  :         return NULL;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	edi
$LN58@GetExcepti:
	xor	eax, eax
$LN6@GetExcepti:

; 148  : 
; 149  :     return NULL;
; 150  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$0:
	lea	ecx, DWORD PTR _strGUID$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$1:
	lea	ecx, DWORD PTR $T104773[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$2:
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$3:
	lea	ecx, DWORD PTR $T104776[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$4:
	lea	ecx, DWORD PTR $T104777[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$5:
	lea	ecx, DWORD PTR $T104778[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$6:
	lea	ecx, DWORD PTR $T104779[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$7:
	lea	ecx, DWORD PTR $T104780[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$8:
	lea	ecx, DWORD PTR $T104781[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$9:
	lea	ecx, DWORD PTR $T104782[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$10:
	lea	ecx, DWORD PTR $T104783[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ENDP	; GetExceptionDevice
PUBLIC	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z	; SourceListHasDevice
; Function compile flags: /Ogtp
;	COMDAT ?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z
_TEXT	SEGMENT
_numSources$ = -8					; size = 4
_i$91967 = -4						; size = 4
_lpDevice$ = 8						; size = 4
_sourceList$ = 12					; size = 4
?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z PROC	; SourceListHasDevice, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   :     UINT numSources = sourceList->NumElements();

	mov	ecx, DWORD PTR _sourceList$[ebp]
	push	ebx
	push	esi
	push	edi
	push	0
	call	DWORD PTR __imp_?NumElements@XElement@@QAEKPB_W@Z
	mov	DWORD PTR _numSources$[ebp], eax

; 41   :     for(UINT i=0; i<numSources; i++)

	mov	DWORD PTR _i$91967[ebp], 0
	test	eax, eax
	je	SHORT $LN4@SourceList
	mov	edi, DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	mov	ebx, DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	npad	2
$LL13@SourceList:

; 42   :     {
; 43   :         XElement *sourceElement = sourceList->GetElementByID(i);

	mov	eax, DWORD PTR _i$91967[ebp]
	mov	ecx, DWORD PTR _sourceList$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetElementByID@XElement@@QBEPAV1@K@Z

; 44   :         if(scmpi(sourceElement->GetString(TEXT("class")), DSHOW_CLASSNAME) == 0)

	push	OFFSET $SG-8124
	mov	esi, eax
	push	0
	push	OFFSET $SG-8125
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	jne	SHORT $LN5@SourceList

; 45   :         {
; 46   :             XElement *data = sourceElement->GetElement(TEXT("data"));

	push	OFFSET $SG-8126
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 47   :             if(scmpi(data->GetString(TEXT("device")), lpDevice) == 0)

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	ecx
	mov	esi, eax
	push	0
	push	OFFSET $SG-8127
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN10@SourceList

; 49   :             if(scmpi(data->GetString(TEXT("audioDevice")), lpDevice) == 0)

	mov	edx, DWORD PTR _lpDevice$[ebp]
	push	edx
	push	0
	push	OFFSET $SG-8128
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN10@SourceList
$LN5@SourceList:

; 41   :     for(UINT i=0; i<numSources; i++)

	mov	eax, DWORD PTR _i$91967[ebp]
	inc	eax
	mov	DWORD PTR _i$91967[ebp], eax
	cmp	eax, DWORD PTR _numSources$[ebp]
	jb	SHORT $LL13@SourceList
$LN4@SourceList:
	pop	edi
	pop	esi

; 50   :                 return true;
; 51   :         }
; 52   :     }
; 53   : 
; 54   :     return false;

	xor	al, al
	pop	ebx

; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@SourceList:
	pop	edi
	pop	esi

; 48   :                 return true;

	mov	al, 1
	pop	ebx

; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ENDP	; SourceListHasDevice
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\obsapi\apiinterface.h
_TEXT	ENDS
;	COMDAT ?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z
_TEXT	SEGMENT
_lpImageSource$ = 8					; size = 4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z PROC ; APIInterface::GetSceneImageSource, COMDAT
; _this$ = ecx

; 99   :     {

	push	ebp
	mov	ebp, esp

; 100  :         Scene *scene = GetScene();

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+40]
	call	edx

; 101  :         if(scene)

	test	eax, eax
	je	SHORT $LN1@GetSceneIm

; 102  :         {
; 103  :             SceneItem *item = scene->GetSceneItem(lpImageSource);

	mov	ecx, DWORD PTR _lpImageSource$[ebp]
	push	ecx
	mov	ecx, eax
	call	DWORD PTR __imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z

; 104  :             if(item)

	test	eax, eax
	je	SHORT $LN1@GetSceneIm

; 105  :             {
; 106  :                 if(item->GetSource())

	mov	eax, DWORD PTR [eax+4]
	test	eax, eax

; 107  :                     return item->GetSource();

	jne	SHORT $LN4@GetSceneIm
$LN1@GetSceneIm:

; 108  :             }
; 109  :         }
; 110  : 
; 111  :         return NULL;

	xor	eax, eax
$LN4@GetSceneIm:

; 112  :     }

	pop	ebp
	ret	4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ENDP ; APIInterface::GetSceneImageSource
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\inline.h
_TEXT	ENDS
;	COMDAT ?nop@@YAXXZ
_TEXT	SEGMENT
?nop@@YAXXZ PROC					; nop, COMDAT

; 310  : }

	ret	0
?nop@@YAXXZ ENDP					; nop
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.0\include\um\winbase.inl
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgCebPnQQeRff@12
_TEXT	SEGMENT
_IsolationAwarePrivatezltRgCebPnQQeRff@12 PROC		; COMDAT
; _ProcName$ = ebx

; 304  : {

	push	esi

; 305  :     FARPROC Proc = NULL;

	xor	esi, esi
	push	edi

; 306  :     HMODULE hModule;
; 307  : #ifdef _M_IX86
; 308  :     static HMODULE s_moduleUnicows;
; 309  :     static BOOL s_fUnicowsInitialized;
; 310  : 
; 311  :     /*
; 312  :        get unicows.dll loaded on-demand
; 313  :     */
; 314  :     if (!s_fUnicowsInitialized)

	cmp	DWORD PTR ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA, esi ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
	jne	SHORT $LN16@IsolationA

; 315  :     {
; 316  :         if ((GetVersion() & 0x80000000) != 0)

	call	DWORD PTR __imp__GetVersion@0
	test	eax, eax
	jns	SHORT $LN15@IsolationA

; 317  :         {
; 318  :             GetFileAttributesW(L"???.???");

	push	OFFSET ??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@
	call	DWORD PTR __imp__GetFileAttributesW@4

; 319  :             s_moduleUnicows = GetModuleHandleA("Unicows.dll");

	push	OFFSET ??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A, eax ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
$LN15@IsolationA:

; 320  :         }
; 321  :         s_fUnicowsInitialized = TRUE;

	mov	DWORD PTR ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA, 1 ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
$LN16@IsolationA:

; 322  :     }
; 323  : 
; 324  :     /*
; 325  :        always call GetProcAddress(unicows) before the usual .dll
; 326  :     */
; 327  :     if (s_moduleUnicows != NULL)

	mov	eax, DWORD PTR ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
	mov	edi, DWORD PTR __imp__GetProcAddress@8
	test	eax, eax
	je	SHORT $LN17@IsolationA

; 328  :     {
; 329  :         Proc = GetProcAddress(s_moduleUnicows, ProcName);

	push	ebx
	push	eax
	call	edi
	mov	esi, eax

; 330  :         if (Proc != NULL)

	test	esi, esi
	jne	SHORT $LN14@IsolationA
$LN17@IsolationA:

; 331  :             goto Exit;
; 332  :     }
; 333  : #endif
; 334  :     hModule = m->WinbaseIsolationAwarePrivateybNQRQzbQhYR;

	mov	eax, DWORD PTR ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m

; 335  :     if (hModule == NULL)

	test	eax, eax
	jne	SHORT $LN3@IsolationA

; 336  :     {
; 337  : #ifdef _M_IX86
; 338  :         hModule = (((GetVersion() & 0x80000000) != 0) ? (*c->WinbaseIsolationAwarePrivateybNQn)(c->WinbaseIsolationAwarePrivateANZRn) : (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ));

	call	DWORD PTR __imp__GetVersion@0
	test	eax, eax
	jns	SHORT $LN11@IsolationA
	mov	eax, DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+12
	push	eax
	call	DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+8
	jmp	SHORT $LN12@IsolationA
$LN11@IsolationA:
	mov	ecx, DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+4
	push	ecx
	call	DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
$LN12@IsolationA:

; 339  : #else
; 340  :         hModule = (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ);
; 341  : #endif
; 342  :         if (hModule == NULL)

	test	eax, eax
	je	SHORT $LN14@IsolationA

; 343  :             goto Exit;
; 344  :         m->WinbaseIsolationAwarePrivateybNQRQzbQhYR = hModule;

	mov	DWORD PTR ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A, eax ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
$LN3@IsolationA:

; 345  :     }
; 346  :     Proc = GetProcAddress(hModule, ProcName);

	push	ebx
	push	eax
	call	edi
	pop	edi
	pop	esi

; 349  : }

	ret	0
$LN14@IsolationA:
	pop	edi

; 347  : Exit:
; 348  :     return Proc;

	mov	eax, esi
$Exit$16584:
	pop	esi

; 349  : }

	ret	0
_IsolationAwarePrivatezltRgCebPnQQeRff@12 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 PROC		; COMDAT

; 51   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRJ(_In_ PCWSTR s) { return GetModuleHandleW(s); }

	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	DWORD PTR __imp__GetModuleHandleW@4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 PROC		; COMDAT

; 48   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRn(_In_ PCSTR s) { return GetModuleHandleA(s); }

	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	DWORD PTR __imp__GetModuleHandleA@4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 ENDP
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@UtagSIZE@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$List@UtagSIZE@@@@QAEXXZ PROC			; List<tagSIZE>::Clear, COMDAT
; _this$ = esi

; 330  :         if(array)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@Clear@2

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 335  :             array = NULL;

	mov	DWORD PTR [esi], 0

; 336  :             num = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@Clear@2:

; 337  :         }
; 338  :     }

	ret	0
?Clear@?$List@UtagSIZE@@@@QAEXXZ ENDP			; List<tagSIZE>::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$List@UtagSIZE@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@UtagSIZE@@@@QAE@XZ PROC			; List<tagSIZE>::~List<tagSIZE>, COMDAT
; _this$ = esi

; 33   :         Clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@List
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN3@List:

; 34   :     }

	ret	0
??1?$List@UtagSIZE@@@@QAE@XZ ENDP			; List<tagSIZE>::~List<tagSIZE>
_TEXT	ENDS
PUBLIC	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$1
__ehfuncinfo$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
_TEXT	SEGMENT
_valueThingy2$92085 = -92				; size = 16
_valueThingy$92084 = -76				; size = 16
_strVal2$92108 = -60					; size = 8
_strVal1$92092 = -52					; size = 8
_count$ = -44						; size = 4
_filter$92095 = -40					; size = 4
_propertyData$92080 = -36				; size = 4
_deviceEnum$ = -32					; size = 4
_bestFilter$ = -28					; size = 4
_videoDeviceEnum$ = -24					; size = 4
_deviceInfo$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_enumType$ = 8						; size = 4
_lpType$ = 12						; size = 4
_lpName$ = 16						; size = 4
_lpType2$ = 20						; size = 4
_lpName2$ = 24						; size = 4
?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z PROC ; GetDeviceByValue, COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 154  :     //---------------------------------
; 155  :     // exception devices
; 156  :     if(scmpi(lpType2, L"DevicePath") == 0 && lpName2 && *lpName2 == '{')

	mov	eax, DWORD PTR _lpType2$[ebp]
	push	OFFSET $SG-8131
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	xor	ebx, ebx
	test	eax, eax
	jne	SHORT $LN27@GetDeviceB
	mov	eax, DWORD PTR _lpName2$[ebp]
	cmp	eax, ebx
	je	SHORT $LN27@GetDeviceB
	cmp	WORD PTR [eax], 123			; 0000007bH
	jne	SHORT $LN27@GetDeviceB

; 157  :         return GetExceptionDevice(lpName2);

	push	eax
	call	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ; GetExceptionDevice
	add	esp, 4

; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@GetDeviceB:

; 158  : 
; 159  :     //---------------------------------
; 160  : 
; 161  :     ICreateDevEnum *deviceEnum;
; 162  :     IEnumMoniker *videoDeviceEnum;
; 163  : 
; 164  :     HRESULT err;
; 165  :     err = CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC, IID_ICreateDevEnum, (void**)&deviceEnum);

	lea	ecx, DWORD PTR _deviceEnum$[ebp]
	push	ecx
	push	OFFSET _IID_ICreateDevEnum
	push	3
	push	ebx
	push	OFFSET _CLSID_SystemDeviceEnum
	call	DWORD PTR __imp__CoCreateInstance@20

; 166  :     if(FAILED(err))

	cmp	eax, ebx
	jge	SHORT $LN26@GetDeviceB

; 167  :     {
; 168  :         AppWarning(TEXT("GetDeviceByName: CoCreateInstance for the device enum failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8132
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN45@GetDeviceB:

; 169  :         return NULL;

	xor	eax, eax

; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@GetDeviceB:

; 170  :     }
; 171  : 
; 172  :     err = deviceEnum->CreateClassEnumerator(enumType, &videoDeviceEnum, 0);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	push	ebx
	lea	ecx, DWORD PTR _videoDeviceEnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _enumType$[ebp]
	push	ecx
	push	eax
	call	edx
	mov	esi, eax

; 173  :     if(FAILED(err))

	cmp	esi, ebx
	jge	SHORT $LN25@GetDeviceB

; 174  :     {
; 175  :         AppWarning(TEXT("GetDeviceByName: deviceEnum->CreateClassEnumerator failed, result = %08lX"), err);

	push	esi
	push	OFFSET $SG-8133
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ

; 176  :         deviceEnum->Release();

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	add	esp, 8
	push	eax
	call	edx

; 177  :         return NULL;

	xor	eax, eax

; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@GetDeviceB:

; 178  :     }
; 179  : 
; 180  :     SafeRelease(deviceEnum);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN24@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceEnum$[ebp], ebx
$LN24@GetDeviceB:

; 181  : 
; 182  :     if(err == S_FALSE) //no devices, so NO ENUM FO U

	cmp	esi, 1

; 183  :         return NULL;

	je	SHORT $LN45@GetDeviceB

; 184  : 
; 185  :     //---------------------------------
; 186  : 
; 187  :     IBaseFilter *bestFilter = NULL;
; 188  : 
; 189  :     IMoniker *deviceInfo;
; 190  :     DWORD count;
; 191  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _bestFilter$[ebp], ebx
	call	eax
	test	eax, eax
	jne	$LN21@GetDeviceB
	mov	edi, DWORD PTR __imp_??1String@@QAE@XZ
$LL22@GetDeviceB:

; 192  :     {
; 193  :         IPropertyBag *propertyData;
; 194  :         err = deviceInfo->BindToStorage(0, 0, IID_IPropertyBag, (void**)&propertyData);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertyData$92080[ebp]
	push	edx
	push	OFFSET _IID_IPropertyBag
	push	ebx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax

; 195  :         if(SUCCEEDED(err))

	cmp	eax, ebx
	jl	$LN19@GetDeviceB

; 196  :         {
; 197  :             VARIANT valueThingy;
; 198  :             VARIANT valueThingy2;
; 199  :             VariantInit(&valueThingy);

	mov	esi, DWORD PTR __imp__VariantInit@4
	lea	ecx, DWORD PTR _valueThingy$92084[ebp]
	push	ecx
	call	esi

; 200  :             VariantInit(&valueThingy2);

	lea	edx, DWORD PTR _valueThingy2$92085[ebp]
	push	edx
	call	esi

; 201  :             /*valueThingy.vt  = VT_BSTR;
; 202  :             valueThingy.pbstrVal = NULL;
; 203  : 
; 204  :             valueThingy2.vt = VT_BSTR;
; 205  :             valueThingy2.bstrVal = NULL;*/
; 206  : 
; 207  :             if(SUCCEEDED(propertyData->Read(lpType, &valueThingy, NULL)))

	mov	eax, DWORD PTR _propertyData$92080[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _valueThingy$92084[ebp]
	push	edx
	mov	edx, DWORD PTR _lpType$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	js	$LN19@GetDeviceB

; 208  :             {
; 209  :                 if(lpType2 && lpName2)

	mov	esi, DWORD PTR _lpType2$[ebp]
	cmp	esi, ebx
	je	SHORT $LN32@GetDeviceB
	cmp	DWORD PTR _lpName2$[ebp], ebx
	je	SHORT $LN32@GetDeviceB

; 210  :                 {
; 211  :                     if(FAILED(propertyData->Read(lpType2, &valueThingy2, NULL)))

	mov	eax, DWORD PTR _propertyData$92080[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _valueThingy2$92085[ebp]
	push	edx
	push	esi
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 212  :                         nop();

$LN32@GetDeviceB:

; 213  :                 }
; 214  : 
; 215  :                 SafeRelease(propertyData);

	mov	eax, DWORD PTR _propertyData$92080[ebp]
	cmp	eax, ebx
	je	SHORT $LN16@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertyData$92080[ebp], ebx
$LN16@GetDeviceB:

; 216  : 
; 217  :                 String strVal1 = (CWSTR)valueThingy.bstrVal;

	mov	eax, DWORD PTR _valueThingy$92084[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 218  : 
; 219  :                 if(strVal1 == lpName)

	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	DWORD PTR __imp_?Compare@String@@QBEHPB_W@Z
	test	eax, eax
	je	$LN3@GetDeviceB

; 220  :                 {
; 221  :                     IBaseFilter *filter;
; 222  :                     err = deviceInfo->BindToObject(NULL, 0, IID_IBaseFilter, (void**)&filter);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR _filter$92095[ebp]
	push	ecx
	push	OFFSET _IID_IBaseFilter
	push	ebx
	push	ebx
	push	eax
	call	edx

; 223  :                     if(FAILED(err))

	cmp	eax, ebx
	jge	SHORT $LN14@GetDeviceB

; 224  :                     {
; 225  :                         AppWarning(TEXT("GetDeviceByName: deviceInfo->BindToObject failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8134
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 226  :                         continue;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	edi
	jmp	$LN2@GetDeviceB
$LN14@GetDeviceB:

; 227  :                     }
; 228  : 
; 229  :                     if(!bestFilter)

	cmp	DWORD PTR _bestFilter$[ebp], ebx
	jne	SHORT $LN13@GetDeviceB

; 230  :                     {
; 231  :                         bestFilter = filter;

	mov	eax, DWORD PTR _filter$92095[ebp]
	mov	DWORD PTR _bestFilter$[ebp], eax

; 232  : 
; 233  :                         if(!lpType2 || !lpName2)

	cmp	esi, ebx
	je	SHORT $LN40@GetDeviceB
	cmp	DWORD PTR _lpName2$[ebp], ebx
	jne	SHORT $LN3@GetDeviceB
$LN40@GetDeviceB:

; 234  :                         {
; 235  :                             SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, ebx
	je	SHORT $LN10@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN10@GetDeviceB:

; 236  :                             SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN9@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _videoDeviceEnum$[ebp], ebx
$LN9@GetDeviceB:

; 237  : 
; 238  :                             return bestFilter;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	edi
	jmp	$LN1@GetDeviceB
$LN13@GetDeviceB:

; 239  :                         }
; 240  :                     }
; 241  :                     else if(lpType2 && lpName2)

	cmp	esi, ebx
	je	SHORT $LN7@GetDeviceB
	mov	esi, DWORD PTR _lpName2$[ebp]
	cmp	esi, ebx
	je	SHORT $LN7@GetDeviceB

; 242  :                     {
; 243  :                         String strVal2 = (CWSTR)valueThingy2.bstrVal;

	mov	ecx, DWORD PTR _valueThingy2$92085[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _strVal2$92108[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 244  :                         if(strVal2 == lpName2)

	push	esi
	lea	ecx, DWORD PTR _strVal2$92108[ebp]
	call	DWORD PTR __imp_?Compare@String@@QBEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN41@GetDeviceB

; 254  :                         }
; 255  :                     }

	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strVal2$92108[ebp]
	call	edi

; 256  :                     else

	jmp	SHORT $LN3@GetDeviceB
$LN7@GetDeviceB:

; 257  :                         filter->Release();

	mov	eax, DWORD PTR _filter$92095[ebp]
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@GetDeviceB:

; 258  :                 }
; 259  :             }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	edi
$LN19@GetDeviceB:

; 260  :         }
; 261  : 
; 262  :         SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, ebx
	je	SHORT $LN2@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN2@GetDeviceB:

; 184  : 
; 185  :     //---------------------------------
; 186  : 
; 187  :     IBaseFilter *bestFilter = NULL;
; 188  : 
; 189  :     IMoniker *deviceInfo;
; 190  :     DWORD count;
; 191  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL22@GetDeviceB
$LN21@GetDeviceB:

; 263  :     }
; 264  : 
; 265  :     SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN1@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@GetDeviceB:

; 266  : 
; 267  :     return bestFilter;

	mov	eax, DWORD PTR _bestFilter$[ebp]

; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@GetDeviceB:

; 245  :                         {
; 246  :                             bestFilter->Release();

	mov	eax, DWORD PTR _bestFilter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 247  : 
; 248  :                             bestFilter = filter;
; 249  : 
; 250  :                             SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	esi, DWORD PTR _filter$92095[ebp]
	cmp	eax, ebx
	je	SHORT $LN5@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN5@GetDeviceB:

; 251  :                             SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN4@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _videoDeviceEnum$[ebp], ebx
$LN4@GetDeviceB:

; 252  : 
; 253  :                             return bestFilter;

	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strVal2$92108[ebp]
	call	edi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	call	edi
	mov	eax, esi

; 268  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$0:
	lea	ecx, DWORD PTR _strVal1$92092[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$1:
	lea	ecx, DWORD PTR _strVal2$92108[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ENDP ; GetDeviceByValue
PUBLIC	?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z		; CurrentDeviceExists
; Function compile flags: /Ogtp
;	COMDAT ?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z
_TEXT	SEGMENT
_numScenes$91992 = -4					; size = 4
_lpDevice$ = 8						; size = 4
_bGlobal$ = 12						; size = 1
?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z PROC		; CurrentDeviceExists, COMDAT
; _isGlobal$ = eax

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, eax

; 59   :     isGlobal = false;
; 60   : 
; 61   :     XElement *globalSources = API->GetGlobalSourceListElement();

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	BYTE PTR [esi], 0
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 62   :     if(globalSources)

	test	eax, eax
	je	SHORT $LN20@CurrentDev

; 63   :     {
; 64   :         if(SourceListHasDevice(lpDevice, globalSources))

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	eax
	push	ecx
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	je	SHORT $LN20@CurrentDev

; 65   :         {
; 66   :             isGlobal = true;

	mov	BYTE PTR [esi], 1

; 67   :             return true;

	mov	al, 1
	pop	esi

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@CurrentDev:

; 68   :         }
; 69   :     }
; 70   : 
; 71   :     if(bGlobal)

	cmp	BYTE PTR _bGlobal$[ebp], 0
	push	ebx
	push	edi
	je	SHORT $LN12@CurrentDev

; 72   :     {
; 73   :         XElement *sceneListElement = API->GetSceneListElement();

	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	mov	edi, eax

; 74   :         if(sceneListElement)

	test	edi, edi
	je	SHORT $LN1@CurrentDev

; 75   :         {
; 76   :             UINT numScenes = sceneListElement->NumElements();

	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?NumElements@XElement@@QAEKPB_W@Z

; 77   :             for(UINT i=0; i<numScenes; i++)

	xor	esi, esi
	mov	DWORD PTR _numScenes$91992[ebp], eax
	test	eax, eax
	je	SHORT $LN1@CurrentDev
	mov	ebx, DWORD PTR __imp_?GetElementByID@XElement@@QBEPAV1@K@Z
	npad	3
$LL10@CurrentDev:

; 78   :             {
; 79   :                 XElement *sceneElement = sceneListElement->GetElementByID(i);

	push	esi
	mov	ecx, edi
	call	ebx

; 80   :                 if(sceneElement)

	test	eax, eax
	je	SHORT $LN9@CurrentDev

; 81   :                 {
; 82   :                     XElement *sourceListElement = sceneElement->GetElement(TEXT("sources"));

	push	OFFSET $SG-8129
	mov	ecx, eax
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 83   :                     if(sourceListElement)

	test	eax, eax
	je	SHORT $LN9@CurrentDev

; 84   :                     {
; 85   :                         if(SourceListHasDevice(lpDevice, sourceListElement))

	push	eax
	mov	eax, DWORD PTR _lpDevice$[ebp]
	push	eax
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	jne	SHORT $LN18@CurrentDev
$LN9@CurrentDev:

; 77   :             for(UINT i=0; i<numScenes; i++)

	inc	esi
	cmp	esi, DWORD PTR _numScenes$91992[ebp]
	jb	SHORT $LL10@CurrentDev
$LN1@CurrentDev:
	pop	edi
	pop	ebx

; 102  :             }
; 103  :         }
; 104  :     }
; 105  : 
; 106  :     return false;

	xor	al, al
	pop	esi

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@CurrentDev:

; 86   :                             return true;
; 87   :                     }
; 88   :                 }
; 89   :             }
; 90   :         }
; 91   :     }
; 92   :     else
; 93   :     {
; 94   :         XElement *sceneElement = API->GetSceneElement();

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 95   :         if(sceneElement)

	test	eax, eax
	je	SHORT $LN1@CurrentDev

; 96   :         {
; 97   :             XElement *sourceListElement = sceneElement->GetElement(TEXT("sources"));

	push	OFFSET $SG-8130
	mov	ecx, eax
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 98   :             if(sourceListElement)

	test	eax, eax
	je	SHORT $LN1@CurrentDev

; 99   :             {
; 100  :                 if(SourceListHasDevice(lpDevice, sourceListElement))

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	eax
	push	ecx
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	je	SHORT $LN1@CurrentDev
$LN18@CurrentDev:
	pop	edi
	pop	ebx

; 101  :                     return true;

	mov	al, 1
	pop	esi

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z ENDP		; CurrentDeviceExists
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.0\include\um\winbase.inl
_TEXT	ENDS
;	COMDAT _WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
_TEXT	SEGMENT
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 PROC ; COMDAT
; _pszProcName$ = ebx

; 586  :     static HMODULE s_module;
; 587  :     /* Use GetModuleHandle instead of LoadLibrary on kernel32.dll because */
; 588  :     /* we already necessarily have a reference on kernel32.dll. */
; 589  :     const static IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB
; 590  :         c = { IsolationAwarePrivatezltRgzbQhYRuNaQYRJ, L"Kernel32.dll"
; 591  : #ifdef _M_IX86
; 592  :              , IsolationAwarePrivatezltRgzbQhYRuNaQYRn, "Kernel32.dll"
; 593  : #endif
; 594  :     };
; 595  :     static IsolationAwarePrivatezHGnoyr_zBqHyr_vAsB m;
; 596  : 
; 597  :     return IsolationAwarePrivatezltRgCebPnQQeRff(&c, &m, pszProcName);

	jmp	_IsolationAwarePrivatezltRgCebPnQQeRff@12
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareQueryActCtxW@28
_TEXT	SEGMENT
_pvBuffer$ = 8						; size = 4
_IsolationAwareQueryActCtxW@28 PROC			; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp

; 261  : #ifdef _WIN64
; 262  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 263  : #else
; 264  :     BOOL fResult = FALSE;
; 265  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ HANDLE hActCtx,_In_opt_ PVOID pvSubInstance,_In_ ULONG ulInfoClass,_Out_writes_bytes_to_opt_(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,_In_ SIZE_T cbBuffer,_Out_opt_ SIZE_T*pcbWrittenOrRequired);
; 266  :     static PFN s_pfn;
; 267  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn

; 268  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@2

; 269  :     {
; 270  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("QueryActCtxW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 271  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@2

; 276  :     return fResult;
; 277  : #endif
; 278  : }

	pop	ebp
	ret	4
$LN1@IsolationA@2:

; 272  :             return fResult;
; 273  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA, eax ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
$LN2@IsolationA@2:

; 274  :     }
; 275  :     fResult = __IsolationAware_pfn(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	mov	ecx, DWORD PTR _pvBuffer$[ebp]
	push	0
	push	8
	push	ecx
	push	1
	push	0
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	-2147483632				; 80000010H
	call	eax

; 276  :     return fResult;
; 277  : #endif
; 278  : }

	pop	ebp
	ret	4
_IsolationAwareQueryActCtxW@28 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareFindActCtxSectionStringW@20
_TEXT	SEGMENT
_ReturnedData$ = 8					; size = 4
_IsolationAwareFindActCtxSectionStringW@20 PROC		; COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp

; 240  : #ifdef _WIN64
; 241  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 242  : #else
; 243  :     BOOL fResult = FALSE;
; 244  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_Reserved_ const GUID*lpExtensionGuid,_In_ ULONG ulSectionId,_In_ LPCWSTR lpStringToFind,_Out_ PACTCTX_SECTION_KEYED_DATA ReturnedData);
; 245  :     static PFN s_pfn;
; 246  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn

; 247  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@3

; 248  :     {
; 249  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("FindActCtxSectionStringW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 250  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@3

; 255  :     return fResult;
; 256  : #endif
; 257  : }

	pop	ebp
	ret	4
$LN1@IsolationA@3:

; 251  :             return fResult;
; 252  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA, eax ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
$LN2@IsolationA@3:

; 253  :     }
; 254  :     fResult = __IsolationAware_pfn(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	mov	ecx, DWORD PTR _ReturnedData$[ebp]
	push	ecx
	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	push	2
	push	0
	push	0
	call	eax

; 255  :     return fResult;
; 256  : #endif
; 257  : }

	pop	ebp
	ret	4
_IsolationAwareFindActCtxSectionStringW@20 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareDeactivateActCtx@8
_TEXT	SEGMENT
_ulCookie$ = 8						; size = 4
_IsolationAwareDeactivateActCtx@8 PROC			; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp

; 219  : #ifdef _WIN64
; 220  :     return DeactivateActCtx(dwFlags,ulCookie);
; 221  : #else
; 222  :     BOOL fResult = FALSE;
; 223  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ ULONG_PTR ulCookie);
; 224  :     static PFN s_pfn;
; 225  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn

; 226  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@4

; 227  :     {
; 228  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("DeactivateActCtx");

	push	ebx
	mov	ebx, OFFSET ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 229  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@4

; 234  :     return fResult;
; 235  : #endif
; 236  : }

	pop	ebp
	ret	4
$LN1@IsolationA@4:

; 230  :             return fResult;
; 231  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA, eax ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
$LN2@IsolationA@4:

; 232  :     }
; 233  :     fResult = __IsolationAware_pfn(dwFlags,ulCookie);

	mov	ecx, DWORD PTR _ulCookie$[ebp]
	push	ecx
	push	0
	call	eax

; 234  :     return fResult;
; 235  : #endif
; 236  : }

	pop	ebp
	ret	4
_IsolationAwareDeactivateActCtx@8 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareActivateActCtx@8
_TEXT	SEGMENT
_hActCtx$ = 8						; size = 4
_lpCookie$ = 12						; size = 4
_IsolationAwareActivateActCtx@8 PROC			; COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp

; 198  : #ifdef _WIN64
; 199  :     return ActivateActCtx(hActCtx,lpCookie);
; 200  : #else
; 201  :     BOOL fResult = FALSE;
; 202  :     typedef BOOL (WINAPI* PFN)(_Inout_opt_ HANDLE hActCtx,_Out_ ULONG_PTR*lpCookie);
; 203  :     static PFN s_pfn;
; 204  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn

; 205  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@5

; 206  :     {
; 207  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("ActivateActCtx");

	push	ebx
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 208  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@5

; 213  :     return fResult;
; 214  : #endif
; 215  : }

	pop	ebp
	ret	8
$LN1@IsolationA@5:

; 209  :             return fResult;
; 210  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax ; `IsolationAwareActivateActCtx'::`2'::s_pfn
$LN2@IsolationA@5:

; 213  :     return fResult;
; 214  : #endif
; 215  : }

	pop	ebp

; 211  :     }
; 212  :     fResult = __IsolationAware_pfn(hActCtx,lpCookie);

	jmp	eax
_IsolationAwareActivateActCtx@8 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareCreateActCtxW@4
_TEXT	SEGMENT
_pActCtx$ = 8						; size = 4
_IsolationAwareCreateActCtxW@4 PROC			; COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp

; 156  : #ifdef _WIN64
; 157  :     return CreateActCtxW(pActCtx);
; 158  : #else
; 159  :     HANDLE result = INVALID_HANDLE_VALUE;
; 160  :     typedef HANDLE (WINAPI* PFN)(_In_ PCACTCTXW pActCtx);
; 161  :     static PFN s_pfn;
; 162  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn

; 163  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@6

; 164  :     {
; 165  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("CreateActCtxW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 166  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@6

; 167  :             return result;

	or	eax, -1

; 171  :     return result;
; 172  : #endif
; 173  : }

	pop	ebp
	ret	4
$LN1@IsolationA@6:

; 168  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA, eax ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
$LN2@IsolationA@6:

; 171  :     return result;
; 172  : #endif
; 173  : }

	pop	ebp

; 169  :     }
; 170  :     result = __IsolationAware_pfn(pActCtx);

	jmp	eax
_IsolationAwareCreateActCtxW@4 ENDP
; Function compile flags: /Ogtp
;	COMDAT ??_GLocaleStringLookup@@QAEPAXI@Z
_TEXT	SEGMENT
??_GLocaleStringLookup@@QAEPAXI@Z PROC			; LocaleStringLookup::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
	mov	eax, esi
	ret	0
??_GLocaleStringLookup@@QAEPAXI@Z ENDP			; LocaleStringLookup::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_UnloadPlugin
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
;	COMDAT _UnloadPlugin
_TEXT	SEGMENT
_UnloadPlugin PROC					; COMDAT

; 1308 :     delete pluginLocale;

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	esi
	mov	esi, ecx
	test	ecx, ecx
	je	SHORT $LN10@UnloadPlug
	call	DWORD PTR __imp_??1LocaleStringLookup@@QAE@XZ
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
$LN10@UnloadPlug:
	pop	esi

; 1309 : }

	ret	0
_UnloadPlugin ENDP
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ConfigDialogData@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0ConfigDialogData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0ConfigDialogData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$8
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0ConfigDialogData@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0ConfigDialogData@@QAE@XZ PROC			; ConfigDialogData::ConfigDialogData, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ConfigDialogData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+24]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+32]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+56]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+64]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR [esi+72]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 8
	jmp	??1?$List@UMediaOutputInfo@@@@QAE@XZ	; List<MediaOutputInfo>::~List<MediaOutputInfo>
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$1:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	jmp	??1?$List@UtagSIZE@@@@QAE@XZ		; List<tagSIZE>::~List<tagSIZE>
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__ehhandler$??0ConfigDialogData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ConfigDialogData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ConfigDialogData@@QAE@XZ ENDP			; ConfigDialogData::ConfigDialogData
PUBLIC	_matchGUID$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ; OpenPropertyPages
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$1
__ehfuncinfo$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
_TEXT	SEGMENT
_cauuid$92876 = -48					; size = 8
_propPages$92875 = -40					; size = 4
_filter$ = -36						; size = 4
_matchGUID$GSCopy$ = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_devicename$ = 8					; size = 8
_deviceid$ = 16						; size = 8
_matchGUID$ = 24					; size = 16
?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z PROC ; OpenPropertyPages, COMDAT
; _hwnd$ = ecx

; 879  : void OpenPropertyPages(HWND hwnd, String devicename, String deviceid, GUID matchGUID) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _matchGUID$[ebp]
	mov	edx, DWORD PTR _matchGUID$[ebp+8]
	mov	esi, ecx
	mov	ecx, DWORD PTR _matchGUID$[ebp+4]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _matchGUID$[ebp+12]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+4], ecx
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+8], edx
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+12], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 880  :     IBaseFilter *filter = GetDeviceByValue(matchGUID,
; 881  :                                             L"FriendlyName", devicename,
; 882  :                                             L"DevicePath", deviceid);

	mov	ecx, DWORD PTR _deviceid$[ebp]
	mov	edx, DWORD PTR _devicename$[ebp]
	push	ecx
	push	OFFSET $SG-8148
	push	edx
	lea	eax, DWORD PTR _matchGUID$GSCopy$[ebp]
	push	OFFSET $SG-8149
	push	eax
	call	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter$[ebp], eax

; 883  :     if(filter)

	test	eax, eax
	je	SHORT $LN4@OpenProper

; 884  :     {
; 885  :         ISpecifyPropertyPages *propPages;
; 886  :         CAUUID cauuid;
; 887  : 
; 888  :         if(SUCCEEDED(filter->QueryInterface(IID_ISpecifyPropertyPages, (void**)&propPages)))

	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propPages$92875[ebp]
	push	edx
	push	OFFSET _IID_ISpecifyPropertyPages
	push	eax
	mov	eax, DWORD PTR [ecx]
	call	eax
	test	eax, eax
	js	SHORT $LN3@OpenProper

; 889  :         {
; 890  :             if(SUCCEEDED(propPages->GetPages(&cauuid)))

	mov	eax, DWORD PTR _propPages$92875[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _cauuid$92876[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	js	SHORT $LN1@OpenProper

; 891  :             {
; 892  :                 if(cauuid.cElems)

	mov	eax, DWORD PTR _cauuid$92876[ebp]
	test	eax, eax
	je	SHORT $LN1@OpenProper

; 893  :                 {
; 894  :                     OleCreatePropertyFrame(hwnd, 0, 0, NULL, 1, (LPUNKNOWN*)&filter, cauuid.cElems, cauuid.pElems, 0, 0, NULL);

	mov	ecx, DWORD PTR _cauuid$92876[ebp+4]
	push	0
	push	0
	push	0
	push	ecx
	push	eax
	lea	edx, DWORD PTR _filter$[ebp]
	push	edx
	push	1
	push	0
	push	0
	push	0
	push	esi
	call	DWORD PTR __imp__OleCreatePropertyFrame@44

; 895  :                     CoTaskMemFree(cauuid.pElems);

	mov	eax, DWORD PTR _cauuid$92876[ebp+4]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
$LN1@OpenProper:

; 896  :                 }
; 897  :             }
; 898  :             propPages->Release();

	mov	eax, DWORD PTR _propPages$92875[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@OpenProper:

; 899  :         }
; 900  : 
; 901  :         filter->Release();

	mov	eax, DWORD PTR _filter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN4@OpenProper:

; 902  :     }
; 903  : 
; 904  :     return;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _devicename$[ebp]
	call	esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _deviceid$[ebp]
	call	esi

; 905  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$0:
	lea	ecx, DWORD PTR _deviceid$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$1:
	lea	ecx, DWORD PTR _devicename$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ENDP ; OpenPropertyPages
PUBLIC	_hwndCombo$GSCopy$
PUBLIC	_GUID_dump$GSCopy$
PUBLIC	_matchGUID$GSCopy$
PUBLIC	_deviceIDList$GSCopy$
PUBLIC	_deviceList$GSCopy$
PUBLIC	_GUIDList$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
xdata$x	SEGMENT
__ehfuncinfo$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$6
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z
_TEXT	SEGMENT
_devicePathValue$92753 = -172				; size = 16
_friendlyNameValue$92752 = -156				; size = 16
$T105761 = -136						; size = 8
$T105759 = -128						; size = 8
$T105758 = -120						; size = 8
_strDeviceID$92788 = -112				; size = 8
$T105757 = -104						; size = 8
$T105760 = -96						; size = 8
_GUIDList$GSCopy$ = -88					; size = 4
_hwndCombo$GSCopy$ = -84				; size = 4
_GUID_dump$GSCopy$ = -80				; size = 4
_count$ = -76						; size = 4
_strDeviceName$92762 = -72				; size = 8
_filter$92758 = -64					; size = 4
_deviceIDList$GSCopy$ = -60				; size = 4
_videoDeviceEnum$ = -56					; size = 4
_propertyData$92748 = -52				; size = 4
_deviceEnum$ = -48					; size = 4
_deviceList$GSCopy$ = -44				; size = 4
_deviceInfo$ = -40					; size = 4
_matchGUID$GSCopy$ = -36				; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_hwndCombo$ = 8						; size = 4
_deviceList$ = 12					; size = 4
_GUID_dump$ = 16					; size = 4
_matchGUID$ = 20					; size = 16
?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z PROC ; FillOutListOfDevices, COMDAT
; _deviceIDList$ = ecx
; _GUIDList$ = edx

; 656  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 701  :         return;
; 702  : 
; 703  :     //------------------------------------------
; 704  : 
; 705  :     IMoniker *deviceInfo;
; 706  :     DWORD count;
; 707  : 
; 708  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _deviceList$[ebp]
	mov	edi, DWORD PTR _hwndCombo$[ebp]
	mov	DWORD PTR _GUIDList$GSCopy$[ebp], edx
	mov	edx, DWORD PTR _matchGUID$[ebp+4]
	mov	DWORD PTR _deviceList$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _GUID_dump$[ebp]
	mov	DWORD PTR _deviceIDList$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR _matchGUID$[ebp]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+4], edx
	mov	edx, DWORD PTR ?lpExceptionGUIDs@@3PAPB_WA ; lpExceptionGUIDs
	mov	DWORD PTR _GUID_dump$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _matchGUID$[ebp+8]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp], ecx
	mov	ecx, DWORD PTR _matchGUID$[ebp+12]
	push	edx

; 758  :     }
; 759  : 
; 760  :     SafeRelease(videoDeviceEnum);

	mov	DWORD PTR _hwndCombo$GSCopy$[ebp], edi
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+8], eax
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+12], ecx
	call	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ; GetExceptionDevice
	mov	esi, eax
	xor	ebx, ebx
	add	esp, 4
	cmp	esi, ebx
	je	SHORT $LN28@FillOutLis

; 657  :     //deviceIDList->Clear();
; 658  :     //deviceList->Clear();
; 659  :     //if(hwndCombo != NULL) SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0);
; 660  : 
; 661  :     //------------------------------------------
; 662  : 
; 663  :     for(int i=0; i<DEV_EXCEPTION_COUNT; i++)
; 664  :     {
; 665  :         IBaseFilter *exceptionFilter = GetExceptionDevice(lpExceptionGUIDs[i]);
; 666  :         if(exceptionFilter)
; 667  :         {
; 668  :             deviceList->Add(lpExceptionNames[i]);

	mov	eax, DWORD PTR ?lpExceptionNames@@3PAPB_WA ; lpExceptionNames
	mov	ecx, DWORD PTR _deviceList$GSCopy$[ebp]
	push	eax
	call	DWORD PTR __imp_?Add@StringList@@QAEIPB_W@Z

; 669  :             deviceIDList->Add(lpExceptionGUIDs[i]);

	mov	ecx, DWORD PTR ?lpExceptionGUIDs@@3PAPB_WA ; lpExceptionGUIDs
	push	ecx
	mov	ecx, DWORD PTR _deviceIDList$GSCopy$[ebp]
	call	DWORD PTR __imp_?Add@StringList@@QAEIPB_W@Z

; 670  : 
; 671  :             if(hwndCombo != NULL) SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)lpExceptionNames[i]);

	cmp	edi, ebx
	je	SHORT $LN25@FillOutLis
	mov	edx, DWORD PTR ?lpExceptionNames@@3PAPB_WA ; lpExceptionNames
	push	edx
	push	ebx
	push	323					; 00000143H
	push	edi
	call	DWORD PTR __imp__SendMessageW@16
$LN25@FillOutLis:

; 672  : 
; 673  :             exceptionFilter->Release();

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+8]
	push	esi
	call	ecx
$LN28@FillOutLis:

; 674  :         }
; 675  :     }
; 676  : 
; 677  :     //------------------------------------------
; 678  : 
; 679  :     ICreateDevEnum *deviceEnum;
; 680  :     IEnumMoniker *videoDeviceEnum;
; 681  : 
; 682  :     HRESULT err;
; 683  :     err = CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC, IID_ICreateDevEnum, (void**)&deviceEnum);

	lea	edx, DWORD PTR _deviceEnum$[ebp]
	push	edx
	push	OFFSET _IID_ICreateDevEnum
	push	3
	push	ebx
	push	OFFSET _CLSID_SystemDeviceEnum
	call	DWORD PTR __imp__CoCreateInstance@20

; 684  :     if(FAILED(err))

	cmp	eax, ebx
	jge	SHORT $LN24@FillOutLis

; 685  :     {
; 686  :         AppWarning(TEXT("FillOutListDevices: CoCreateInstance for the device enum failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8138
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 687  :         return;

	jmp	$LN1@FillOutLis
$LN24@FillOutLis:

; 688  :     }
; 689  : 
; 690  :     err = deviceEnum->CreateClassEnumerator(matchGUID, &videoDeviceEnum, 0);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _videoDeviceEnum$[ebp]
	push	edx
	lea	edx, DWORD PTR _matchGUID$GSCopy$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	esi, eax

; 691  :     if(FAILED(err))

	cmp	esi, ebx
	jge	SHORT $LN23@FillOutLis

; 692  :     {
; 693  :         AppWarning(TEXT("FillOutListDevices: deviceEnum->CreateClassEnumerator failed, result = %08lX"), err);

	push	esi
	push	OFFSET $SG-8139
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ

; 694  :         deviceEnum->Release();

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	add	esp, 8

; 695  :         return;

	jmp	$LN69@FillOutLis
$LN23@FillOutLis:

; 696  :     }
; 697  : 
; 698  :     SafeRelease(deviceEnum);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN22@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceEnum$[ebp], ebx
$LN22@FillOutLis:

; 699  : 
; 700  :     if(err == S_FALSE) //no devices

	cmp	esi, 1
	je	$LN1@FillOutLis

; 701  :         return;
; 702  : 
; 703  :     //------------------------------------------
; 704  : 
; 705  :     IMoniker *deviceInfo;
; 706  :     DWORD count;
; 707  : 
; 708  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	jne	$LN19@FillOutLis
	npad	4
$LL20@FillOutLis:

; 709  :     {
; 710  :         IPropertyBag *propertyData;
; 711  :         err = deviceInfo->BindToStorage(0, 0, IID_IPropertyBag, (void**)&propertyData);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertyData$92748[ebp]
	push	edx
	push	OFFSET _IID_IPropertyBag
	push	ebx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax

; 712  :         if(SUCCEEDED(err))

	test	eax, eax
	js	$LN3@FillOutLis

; 713  :         {
; 714  :             VARIANT friendlyNameValue, devicePathValue;
; 715  :             friendlyNameValue.vt = VT_BSTR;
; 716  :             friendlyNameValue.bstrVal = NULL;
; 717  :             devicePathValue.vt = VT_BSTR;
; 718  :             devicePathValue.bstrVal = NULL;
; 719  : 
; 720  :             err = propertyData->Read(L"FriendlyName", &friendlyNameValue, NULL);

	mov	eax, DWORD PTR _propertyData$92748[ebp]
	mov	ecx, 8
	mov	edx, ecx
	mov	WORD PTR _devicePathValue$92753[ebp], dx
	push	ebx
	lea	edx, DWORD PTR _friendlyNameValue$92752[ebp]
	push	edx
	mov	WORD PTR _friendlyNameValue$92752[ebp], cx
	mov	DWORD PTR _friendlyNameValue$92752[ebp+8], ebx
	mov	DWORD PTR _devicePathValue$92753[ebp+8], ebx
	mov	ecx, DWORD PTR [eax]
	push	OFFSET $SG-8140
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 721  :             propertyData->Read(L"DevicePath", &devicePathValue, NULL);

	push	ebx
	lea	edx, DWORD PTR _devicePathValue$92753[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR _propertyData$92748[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	OFFSET $SG-8141
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 722  : 
; 723  :             if(SUCCEEDED(err))

	cmp	esi, ebx
	jl	$LN16@FillOutLis

; 724  :             {
; 725  :                 IBaseFilter *filter;
; 726  :                 err = deviceInfo->BindToObject(NULL, 0, IID_IBaseFilter, (void**)&filter);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _filter$92758[ebp]
	push	edx
	push	OFFSET _IID_IBaseFilter
	push	ebx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+32]
	call	eax

; 727  :                 if(SUCCEEDED(err))

	cmp	eax, ebx
	jl	$LN16@FillOutLis

; 728  :                 {
; 729  :                     String strDeviceName = (CWSTR)friendlyNameValue.bstrVal;

	mov	ecx, DWORD PTR _friendlyNameValue$92752[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _strDeviceName$92762[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 730  :                     deviceList->Add(strDeviceName);

	mov	edi, DWORD PTR _deviceList$GSCopy$[ebp]
	lea	edx, DWORD PTR _strDeviceName$92762[ebp]
	push	edx
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z

; 731  :                     if(GUIDList != NULL) {

	mov	esi, DWORD PTR _GUIDList$GSCopy$[ebp]
	cmp	esi, ebx
	je	$LN15@FillOutLis

; 732  :                         if(matchGUID == CLSID_AudioInputDeviceCategory) GUIDList->Add("CLSID_AudioInputDeviceCategory");

	mov	ecx, OFFSET _CLSID_AudioInputDeviceCategory
	lea	edx, DWORD PTR _matchGUID$GSCopy$[ebp]
	call	_IsEqualGUID
	test	eax, eax
	je	SHORT $LN14@FillOutLis
	push	OFFSET $SG-8142
	lea	ecx, DWORD PTR $T105757[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR $T105757[ebp]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR $T105757[ebp]

; 733  :                         else if(matchGUID == CLSID_VideoInputDeviceCategory) GUIDList->Add("CLSID_VideoInputDeviceCategory");

	jmp	$LN70@FillOutLis
$LN14@FillOutLis:
	mov	ecx, OFFSET _CLSID_VideoInputDeviceCategory
	lea	edx, DWORD PTR _matchGUID$GSCopy$[ebp]
	call	_IsEqualGUID
	test	eax, eax
	je	SHORT $LN12@FillOutLis
	push	OFFSET $SG-8143
	lea	ecx, DWORD PTR $T105758[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T105758[ebp]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR $T105758[ebp]

; 734  :                         else if(matchGUID == CLSID_AudioRendererCategory) GUIDList->Add("CLSID_AudioRendererCategory");

	jmp	SHORT $LN70@FillOutLis
$LN12@FillOutLis:
	mov	ecx, OFFSET _CLSID_AudioRendererCategory
	lea	edx, DWORD PTR _matchGUID$GSCopy$[ebp]
	call	_IsEqualGUID
	test	eax, eax
	je	SHORT $LN10@FillOutLis
	push	OFFSET $SG-8144
	lea	ecx, DWORD PTR $T105759[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	edx, DWORD PTR $T105759[ebp]
	push	edx
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR $T105759[ebp]
	jmp	SHORT $LN70@FillOutLis
$LN10@FillOutLis:

; 735  :                         else GUIDList->Add("Unknown device category");

	push	OFFSET $SG-8145
	lea	ecx, DWORD PTR $T105760[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	eax, DWORD PTR $T105760[ebp]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR $T105760[ebp]
$LN70@FillOutLis:
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 736  :                         GUID_dump[deviceList->Num()] = matchGUID;

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _matchGUID$GSCopy$[ebp]
	mov	edx, DWORD PTR _matchGUID$GSCopy$[ebp+4]
	shl	eax, 4
	add	eax, DWORD PTR _GUID_dump$GSCopy$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _matchGUID$GSCopy$[ebp+8]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _matchGUID$GSCopy$[ebp+12]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN15@FillOutLis:

; 737  :                     }
; 738  : 
; 739  :                     UINT count = 0;

	xor	edi, edi

; 740  :                     UINT id = INVALID;

	or	eax, -1
	npad	5
$LL8@FillOutLis:

; 741  :                     while((id = deviceList->FindNextValueIndexI(strDeviceName, id)) != INVALID) count++;

	lea	esi, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _deviceList$GSCopy$[ebp]
	cmp	esi, DWORD PTR [eax+4]
	jae	SHORT $LN64@FillOutLis
	npad	5
$LL50@FillOutLis:
	mov	ecx, DWORD PTR _strDeviceName$92762[ebp]
	mov	edx, DWORD PTR _deviceList$GSCopy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	lea	ecx, DWORD PTR [eax+esi*8]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN61@FillOutLis
	mov	ecx, DWORD PTR _deviceList$GSCopy$[ebp]
	inc	esi
	cmp	esi, DWORD PTR [ecx+4]
	jb	SHORT $LL50@FillOutLis
$LN64@FillOutLis:

; 742  : 
; 743  :                     if(count > 1)

	cmp	edi, 1
	jbe	SHORT $LN66@FillOutLis

; 744  :                         strDeviceName << TEXT(" (") << UIntString(count) << TEXT(")");

	push	10					; 0000000aH
	lea	edx, DWORD PTR $T105761[ebp]
	push	edi
	push	edx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	push	OFFSET $SG-8147
	push	eax
	push	OFFSET $SG-8146
	lea	ecx, DWORD PTR _strDeviceName$92762[ebp]
	call	esi
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	esi
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T105761[ebp]
	call	esi
	jmp	SHORT $LN6@FillOutLis
$LN61@FillOutLis:

; 741  :                     while((id = deviceList->FindNextValueIndexI(strDeviceName, id)) != INVALID) count++;

	mov	eax, esi
	cmp	esi, -1
	je	SHORT $LN64@FillOutLis
	inc	edi
	jmp	$LL8@FillOutLis
$LN66@FillOutLis:

; 744  :                         strDeviceName << TEXT(" (") << UIntString(count) << TEXT(")");

	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
$LN6@FillOutLis:

; 745  : 
; 746  :                     String strDeviceID = (CWSTR)devicePathValue.bstrVal;

	mov	eax, DWORD PTR _devicePathValue$92753[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strDeviceID$92788[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 747  :                     if(hwndCombo != NULL) SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)strDeviceName.Array());

	mov	eax, DWORD PTR _hwndCombo$GSCopy$[ebp]
	cmp	eax, ebx
	je	SHORT $LN5@FillOutLis
	mov	ecx, DWORD PTR _strDeviceName$92762[ebp]
	push	ecx
	push	ebx
	push	323					; 00000143H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN5@FillOutLis:

; 748  :                     deviceIDList->Add(strDeviceID);

	mov	ecx, DWORD PTR _deviceIDList$GSCopy$[ebp]
	lea	edx, DWORD PTR _strDeviceID$92788[ebp]
	push	edx
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z

; 749  : 
; 750  :                     SafeRelease(filter);

	mov	eax, DWORD PTR _filter$92758[ebp]
	cmp	eax, ebx
	je	SHORT $LN4@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _filter$92758[ebp], ebx
$LN4@FillOutLis:

; 751  :                 }

	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strDeviceID$92788[ebp]
	call	esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strDeviceName$92762[ebp]
	call	esi
$LN16@FillOutLis:

; 752  :             }
; 753  : 
; 754  :             SafeRelease(propertyData);

	mov	eax, DWORD PTR _propertyData$92748[ebp]
	cmp	eax, ebx
	je	SHORT $LN3@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertyData$92748[ebp], ebx
$LN3@FillOutLis:

; 755  :         }
; 756  : 
; 757  :         SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, ebx
	je	SHORT $LN2@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN2@FillOutLis:

; 701  :         return;
; 702  : 
; 703  :     //------------------------------------------
; 704  : 
; 705  :     IMoniker *deviceInfo;
; 706  :     DWORD count;
; 707  : 
; 708  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL20@FillOutLis
$LN19@FillOutLis:

; 758  :     }
; 759  : 
; 760  :     SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN1@FillOutLis
$LN69@FillOutLis:
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@FillOutLis:

; 761  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$0:
	lea	ecx, DWORD PTR _strDeviceName$92762[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$1:
	lea	ecx, DWORD PTR $T105757[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$2:
	lea	ecx, DWORD PTR $T105758[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$3:
	lea	ecx, DWORD PTR $T105759[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$4:
	lea	ecx, DWORD PTR $T105760[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$5:
	lea	ecx, DWORD PTR $T105761[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z$6:
	lea	ecx, DWORD PTR _strDeviceID$92788[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ENDP ; FillOutListOfDevices
; Function compile flags: /Ogtp
;	COMDAT ?ClearOutputList@ConfigDialogData@@QAEXXZ
_TEXT	SEGMENT
tv260 = -8						; size = 4
_i$92667 = -4						; size = 4
?ClearOutputList@ConfigDialogData@@QAEXXZ PROC		; ConfigDialogData::ClearOutputList, COMDAT
; _this$ = ebx

; 580  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 581  :         for(UINT i=0; i<outputList.Num(); i++)

	xor	esi, esi
	xor	eax, eax
	mov	DWORD PTR _i$92667[ebp], eax
	cmp	DWORD PTR [ebx+12], esi
	jbe	$LN1@ClearOutpu
	push	edi
	mov	DWORD PTR tv260[ebp], esi
	jmp	SHORT $LN3@ClearOutpu
	npad	3
$LL24@ClearOutpu:
	mov	eax, DWORD PTR _i$92667[ebp]
$LN3@ClearOutpu:

; 582  :             outputList[i].FreeData();

	cmp	eax, DWORD PTR [ebx+12]
	jb	SHORT $LN8@ClearOutpu
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMediaOutputInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	esi, DWORD PTR [ebx+8]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN9@ClearOutpu
$LN8@ClearOutpu:
	mov	esi, DWORD PTR [ebx+8]
	add	esi, DWORD PTR tv260[ebp]
$LN9@ClearOutpu:
	mov	edi, DWORD PTR [esi+4]
	cmp	DWORD PTR [edi+64], 0
	je	SHORT $LN14@ClearOutpu
	mov	eax, DWORD PTR [edi+68]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	xor	eax, eax
	mov	DWORD PTR [edi+64], eax
	mov	DWORD PTR [edi+68], eax
$LN14@ClearOutpu:
	mov	eax, DWORD PTR [edi+60]
	test	eax, eax
	je	SHORT $LN13@ClearOutpu
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR [edi+60], 0
$LN13@ClearOutpu:
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	mov	eax, DWORD PTR _i$92667[ebp]
	add	DWORD PTR tv260[ebp], 56		; 00000038H
	inc	eax
	mov	DWORD PTR _i$92667[ebp], eax
	cmp	eax, DWORD PTR [ebx+12]
	jb	SHORT $LL24@ClearOutpu

; 581  :         for(UINT i=0; i<outputList.Num(); i++)

	xor	esi, esi
	pop	edi
$LN1@ClearOutpu:

; 583  :         outputList.Clear();

	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, esi
	je	SHORT $LN17@ClearOutpu
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebx+12], esi
$LN17@ClearOutpu:
	pop	esi

; 584  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearOutputList@ConfigDialogData@@QAEXXZ ENDP		; ConfigDialogData::ClearOutputList
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
xdata$x	SEGMENT
__ehfuncinfo$??1ConfigDialogData@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1ConfigDialogData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??1ConfigDialogData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$8
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ??1ConfigDialogData@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1ConfigDialogData@@QAE@XZ PROC			; ConfigDialogData::~ConfigDialogData, COMDAT

; 575  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1ConfigDialogData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 8

; 576  :         ClearOutputList();

	mov	ebx, esi
	call	?ClearOutputList@ConfigDialogData@@QAEXXZ ; ConfigDialogData::ClearOutputList

; 577  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR [esi+72]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+64]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+56]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+32]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+24]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	xor	ebx, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	je	SHORT $LN14@ConfigDial
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi+16], ebx
	mov	DWORD PTR [esi+20], ebx
$LN14@ConfigDial:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	je	SHORT $LN21@ConfigDial
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
$LN21@ConfigDial:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 8
	jmp	??1?$List@UMediaOutputInfo@@@@QAE@XZ	; List<MediaOutputInfo>::~List<MediaOutputInfo>
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$1:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	jmp	??1?$List@UtagSIZE@@@@QAE@XZ		; List<tagSIZE>::~List<tagSIZE>
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__ehhandler$??1ConfigDialogData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1ConfigDialogData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1ConfigDialogData@@QAE@XZ ENDP			; ConfigDialogData::~ConfigDialogData
PUBLIC	__$ArrayPad$
PUBLIC	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
; Function compile flags: /Ogtp
;	COMDAT ?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z
_TEXT	SEGMENT
_retSize$92155 = -332					; size = 4
_pinMediaType$92133 = -328				; size = 4
_pinDir$92146 = -324					; size = 4
_num$ = -320						; size = 4
_curVal$92138 = -316					; size = 4
_mediaTypesEnum$92134 = -312				; size = 4
_pins$ = -304						; size = 4
_propertySet$92150 = -300				; size = 4
_curPin$ = -296						; size = 4
_chi$92156 = -292					; size = 264
_pinCategory$92154 = -24				; size = 16
__$ArrayPad$ = -8					; size = 4
_filter$ = 8						; size = 4
?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z PROC ; GetOutputPin, COMDAT

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _filter$[ebp]
	push	ebx

; 273  :     IPin *foundPin = NULL;
; 274  :     IEnumPins *pins;
; 275  : 
; 276  :     if(!filter) return NULL;

	xor	ebx, ebx
	push	esi
	push	edi
	cmp	eax, ebx
	je	$LN1@GetOutputP

; 277  :     if(FAILED(filter->EnumPins(&pins))) return NULL;

	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _pins$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	test	eax, eax
	js	$LN1@GetOutputP

; 278  : 
; 279  :     IPin *curPin;
; 280  :     ULONG num;
; 281  :     while(pins->Next(1, &curPin, &num) == S_OK)

	mov	eax, DWORD PTR _pins$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	lea	edx, DWORD PTR _curPin$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	jne	$LN19@GetOutputP
$LL20@GetOutputP:

; 282  :     {
; 283  :         if(majorType)
; 284  :         {
; 285  :             AM_MEDIA_TYPE *pinMediaType;
; 286  : 
; 287  :             IEnumMediaTypes *mediaTypesEnum;
; 288  :             if(FAILED(curPin->EnumMediaTypes(&mediaTypesEnum)))

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _mediaTypesEnum$92134[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+48]
	call	eax
	test	eax, eax

; 289  :             {
; 290  :                 SafeRelease(curPin);
; 291  :                 continue;

	js	$LN3@GetOutputP

; 292  :             }
; 293  : 
; 294  :             ULONG curVal = 0;
; 295  :             HRESULT hRes = mediaTypesEnum->Next(1, &pinMediaType, &curVal);

	mov	eax, DWORD PTR _mediaTypesEnum$92134[ebp]
	lea	edx, DWORD PTR _curVal$92138[ebp]
	push	edx
	lea	edx, DWORD PTR _pinMediaType$92133[ebp]
	push	edx
	mov	DWORD PTR _curVal$92138[ebp], ebx
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	esi, eax

; 296  : 
; 297  :             mediaTypesEnum->Release();

	mov	eax, DWORD PTR _mediaTypesEnum$92134[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 298  : 
; 299  :             if(hRes != S_OK)

	cmp	esi, ebx

; 300  :             {
; 301  :                 SafeRelease(curPin);
; 302  :                 continue;

	jne	$LN3@GetOutputP

; 303  :             }
; 304  : 
; 305  :             BOOL bDesiredMediaType = (pinMediaType->majortype == *majorType);

	mov	edi, DWORD PTR _pinMediaType$92133[ebp]
	mov	ecx, OFFSET _MEDIATYPE_Audio
	mov	edx, edi
	call	_IsEqualGUID
	mov	esi, eax
	neg	esi
	sbb	esi, esi
	neg	esi

; 306  :             DeleteMediaType(pinMediaType);

	cmp	edi, ebx
	je	SHORT $LN27@GetOutputP
	cmp	DWORD PTR [edi+64], 0
	je	SHORT $LN31@GetOutputP
	mov	eax, DWORD PTR [edi+68]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	mov	DWORD PTR [edi+64], 0
	mov	DWORD PTR [edi+68], 0
$LN31@GetOutputP:
	mov	ecx, edi
	mov	eax, DWORD PTR [ecx+60]
	test	eax, eax
	je	SHORT $LN30@GetOutputP
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, edi
	mov	DWORD PTR [ecx+60], 0
$LN30@GetOutputP:
	mov	edx, edi
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4
	xor	ebx, ebx
$LN27@GetOutputP:

; 307  : 
; 308  :             if(!bDesiredMediaType)
; 309  :             {
; 310  :                 SafeRelease(curPin);

	mov	eax, DWORD PTR _curPin$[ebp]
	cmp	esi, ebx

; 311  :                 continue;

	je	$LN43@GetOutputP

; 312  :             }
; 313  :         }
; 314  : 
; 315  :         //------------------------------
; 316  : 
; 317  :         PIN_DIRECTION pinDir;
; 318  :         if(SUCCEEDED(curPin->QueryDirection(&pinDir)))

	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _pinDir$92146[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	test	eax, eax
	js	$LN3@GetOutputP

; 319  :         {
; 320  :             if(pinDir == PINDIR_OUTPUT)

	cmp	DWORD PTR _pinDir$92146[ebp], 1
	jne	$LN3@GetOutputP

; 321  :             {
; 322  :                 IKsPropertySet *propertySet;
; 323  :                 if(SUCCEEDED(curPin->QueryInterface(IID_IKsPropertySet, (void**)&propertySet)))

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertySet$92150[ebp]
	push	edx
	push	OFFSET _IID_IKsPropertySet
	push	eax
	mov	eax, DWORD PTR [ecx]
	call	eax
	test	eax, eax
	js	$LN3@GetOutputP

; 324  :                 {
; 325  :                     GUID pinCategory;
; 326  :                     DWORD retSize;
; 327  : 
; 328  :                     PIN_INFO chi;
; 329  :                     curPin->QueryPinInfo(&chi);

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _chi$92156[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+32]
	call	eax

; 330  : 
; 331  :                     if(chi.pFilter)

	mov	eax, DWORD PTR _chi$92156[ebp]
	cmp	eax, ebx
	je	SHORT $LN8@GetOutputP

; 332  :                         chi.pFilter->Release();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN8@GetOutputP:

; 333  : 
; 334  :                     if(SUCCEEDED(propertySet->Get(AMPROPSETID_Pin, AMPROPERTY_PIN_CATEGORY, NULL, 0, &pinCategory, sizeof(GUID), &retSize)))

	mov	eax, DWORD PTR _propertySet$92150[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _retSize$92155[ebp]
	push	edx
	push	16					; 00000010H
	lea	edx, DWORD PTR _pinCategory$92154[ebp]
	push	edx
	push	ebx
	push	ebx
	push	ebx
	push	OFFSET _AMPROPSETID_Pin
	push	eax
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	test	eax, eax
	js	SHORT $LN6@GetOutputP

; 335  :                     {
; 336  :                         if(pinCategory == PIN_CATEGORY_CAPTURE)

	mov	ecx, OFFSET _PIN_CATEGORY_CAPTURE
	lea	edx, DWORD PTR _pinCategory$92154[ebp]
	call	_IsEqualGUID
	test	eax, eax
	jne	$LN40@GetOutputP
$LN6@GetOutputP:

; 340  : 
; 341  :                             return curPin;
; 342  :                         }
; 343  :                     }
; 344  : 
; 345  :                     SafeRelease(propertySet);

	mov	eax, DWORD PTR _propertySet$92150[ebp]
	cmp	eax, ebx
	je	SHORT $LN3@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertySet$92150[ebp], ebx
$LN3@GetOutputP:

; 346  :                 }
; 347  :             }
; 348  :         }
; 349  : 
; 350  :         SafeRelease(curPin);

	mov	eax, DWORD PTR _curPin$[ebp]
$LN43@GetOutputP:
	cmp	eax, ebx
	je	SHORT $LN2@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _curPin$[ebp], ebx
$LN2@GetOutputP:

; 278  : 
; 279  :     IPin *curPin;
; 280  :     ULONG num;
; 281  :     while(pins->Next(1, &curPin, &num) == S_OK)

	mov	eax, DWORD PTR _pins$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	lea	edx, DWORD PTR _curPin$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL20@GetOutputP
$LN19@GetOutputP:

; 351  :     }
; 352  : 
; 353  :     SafeRelease(pins);

	mov	eax, DWORD PTR _pins$[ebp]
	cmp	eax, ebx
	je	SHORT $LN1@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@GetOutputP:

; 354  : 
; 355  :     return foundPin;

	xor	eax, eax

; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@GetOutputP:

; 337  :                         {
; 338  :                             SafeRelease(propertySet);

	mov	eax, DWORD PTR _propertySet$92150[ebp]
	cmp	eax, ebx
	je	SHORT $LN5@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertySet$92150[ebp], ebx
$LN5@GetOutputP:

; 339  :                             SafeRelease(pins);

	mov	eax, DWORD PTR _pins$[ebp]
	cmp	eax, ebx
	je	SHORT $LN4@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN4@GetOutputP:

; 356  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, DWORD PTR _curPin$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ENDP ; GetOutputPin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\windows kits\8.0\include\um\winbase.inl
xdata$x	SEGMENT
__sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 DD 0ffffffe4H
	DD	00H
	DD	0fffffd78H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN25@WinbaseIso
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT _WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
_TEXT	SEGMENT
_actCtxSectionKeyedData$16631 = -632			; size = 64
_actCtx$16605 = -600					; size = 32
_actCtxBasicInfo$ = -568				; size = 8
_hmodSelf$16608 = -560					; size = 4
_ulpCookie$ = -556					; size = 4
_rgchFullModulePath$16606 = -552			; size = 522
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 PROC		; COMDAT

; 360  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 616				; 00000268H
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 361  :     BOOL fResult = FALSE;

	xor	edi, edi
	xor	esi, esi

; 362  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 363  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], edi

; 364  : 
; 365  : #ifdef _M_IX86
; 366  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi

; 367  :     {
; 368  :         fResult = TRUE;
; 369  :         goto Exit;

	jne	$LN28@WinbaseIso

; 370  :     }
; 371  : #endif
; 372  : 
; 373  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, -1

; 374  :     {
; 375  :         fResult = TRUE;
; 376  :         goto Exit;

	jne	$LN28@WinbaseIso

; 377  :     }
; 378  : 
; 379  :     if (!IsolationAwareQueryActCtxW(
; 380  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 381  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 382  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 383  :         NULL,
; 384  :         ActivationContextBasicInformation,
; 385  :         &actCtxBasicInfo,
; 386  :         sizeof(actCtxBasicInfo),
; 387  :         NULL))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA
	cmp	eax, edi
	jne	SHORT $LN30@WinbaseIso
	mov	ebx, OFFSET ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	$Exit$16596
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA, eax
$LN30@WinbaseIso:
	push	edi
	push	8
	lea	ecx, DWORD PTR _actCtxBasicInfo$[ebp]
	push	ecx
	push	1
	push	edi
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	-2147483632				; 80000010H
	call	eax
	cmp	eax, edi
	je	$Exit$16596

; 388  :         goto Exit;
; 389  : 
; 390  :     /*
; 391  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 392  :     */
; 393  :     if (actCtxBasicInfo.hActCtx == NULL)

	mov	eax, DWORD PTR _actCtxBasicInfo$[ebp]
	cmp	eax, edi
	jne	$LN15@WinbaseIso

; 394  :     {
; 395  :         ACTCTXW actCtx;
; 396  :         WCHAR rgchFullModulePath[MAX_PATH + 1];
; 397  :         DWORD dw;
; 398  :         HMODULE hmodSelf;
; 399  : #ifdef _M_IX86
; 400  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");

	mov	ebx, OFFSET ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12

; 401  :         if (pfnGetModuleHandleExW == NULL)

	cmp	eax, edi
	je	$Exit$16596

; 402  :             goto Exit;
; 403  : #endif
; 404  :         if (!
; 405  : #ifdef _M_IX86
; 406  :             (*pfnGetModuleHandleExW)
; 407  : #else
; 408  :             GetModuleHandleExW
; 409  : #endif
; 410  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 411  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 412  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 413  :                 &hmodSelf))

	lea	edx, DWORD PTR _hmodSelf$16608[ebp]
	push	edx
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	6
	call	eax
	test	eax, eax
	je	$Exit$16596

; 414  :             goto Exit;
; 415  : 
; 416  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath));

	push	261					; 00000105H
	lea	eax, DWORD PTR _rgchFullModulePath$16606[ebp]
	push	eax
	mov	ecx, DWORD PTR _hmodSelf$16608[ebp]
	push	ecx
	call	DWORD PTR __imp__GetModuleFileNameW@12

; 417  :         if (dw == 0)

	cmp	eax, edi
	je	$Exit$16596

; 418  :             goto Exit;
; 419  :         if (dw >= WINBASE_NUMBER_OF(rgchFullModulePath))

	cmp	eax, 261				; 00000105H
	jb	SHORT $LN8@WinbaseIso

; 420  :         {
; 421  :             SetLastError(ERROR_BUFFER_OVERFLOW);

	push	111					; 0000006fH
	call	DWORD PTR __imp__SetLastError@4

; 422  :             goto Exit;

	jmp	$Exit$16596
$LN8@WinbaseIso:

; 423  :         }
; 424  : 
; 425  :         actCtx.cbSize = sizeof(actCtx);

	mov	DWORD PTR _actCtx$16605[ebp], 32	; 00000020H

; 426  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;

	mov	DWORD PTR _actCtx$16605[ebp+4], 136	; 00000088H

; 427  :         actCtx.lpSource = rgchFullModulePath;

	lea	edx, DWORD PTR _rgchFullModulePath$16606[ebp]
	mov	DWORD PTR _actCtx$16605[ebp+8], edx

; 428  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;

	mov	DWORD PTR _actCtx$16605[ebp+20], 3

; 429  :         actCtx.hModule = hmodSelf;

	mov	eax, DWORD PTR _hmodSelf$16608[ebp]
	mov	DWORD PTR _actCtx$16605[ebp+28], eax

; 430  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA
	cmp	eax, edi
	jne	SHORT $LN38@WinbaseIso
	mov	ebx, OFFSET ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	jne	SHORT $LN37@WinbaseIso
	or	eax, -1
	jmp	SHORT $LN39@WinbaseIso
$LN37@WinbaseIso:
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA, eax
$LN38@WinbaseIso:
	lea	ecx, DWORD PTR _actCtx$16605[ebp]
	push	ecx
	call	eax
$LN39@WinbaseIso:
	mov	DWORD PTR _actCtxBasicInfo$[ebp], eax

; 431  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)

	cmp	eax, -1
	jne	SHORT $LN6@WinbaseIso

; 432  :         {
; 433  :             const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0

; 434  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 435  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 436  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 437  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND) &&
; 438  :                 (dwLastError != ERROR_FILE_NOT_FOUND) &&
; 439  :                 (dwLastError != ERROR_PATH_NOT_FOUND))

	cmp	eax, 1812				; 00000714H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1813				; 00000715H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1815				; 00000717H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1814				; 00000716H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 2
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 3
	jne	$Exit$16596
$LN5@WinbaseIso:

; 440  :                 goto Exit;
; 441  : 
; 442  :             actCtxBasicInfo.hActCtx = NULL;

	xor	eax, eax
	mov	DWORD PTR _actCtxBasicInfo$[ebp], eax
$LN6@WinbaseIso:

; 443  :         }
; 444  : 
; 445  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;

	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk, 1
$LN15@WinbaseIso:

; 446  :     }
; 447  : 
; 448  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;

	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, eax

; 449  : 
; 450  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 451  : 
; 452  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))

	mov	esi, eax
	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
	cmp	eax, edi
	jne	SHORT $LN44@WinbaseIso
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	SHORT $LN28@WinbaseIso
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax
$LN44@WinbaseIso:
	lea	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	push	esi
	call	eax
	cmp	eax, edi
	je	SHORT $LN28@WinbaseIso

; 453  :     {
; 454  :         __try

	mov	DWORD PTR __$SEHRec$[ebp+20], edi

; 455  :         {
; 456  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 457  : 
; 458  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);

	mov	DWORD PTR _actCtxSectionKeyedData$16631[ebp], 64 ; 00000040H

; 459  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA
	cmp	eax, edi
	jne	SHORT $LN50@WinbaseIso
	mov	ebx, OFFSET ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	SHORT $LN1@WinbaseIso
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA, eax
$LN50@WinbaseIso:
	lea	ecx, DWORD PTR _actCtxSectionKeyedData$16631[ebp]
	push	ecx
	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	push	2
	push	edi
	push	edi
	call	eax
	cmp	eax, edi
	je	SHORT $LN1@WinbaseIso

; 460  :             {
; 461  :                 /* get button, edit, etc. registered */
; 462  :                 LoadLibraryW(L"Comctl32.dll");

	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	DWORD PTR __imp__LoadLibraryW@4
$LN1@WinbaseIso:

; 463  :             }
; 464  :         }
; 465  :         __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN27@WinbaseIso
$LN28@WinbaseIso:

; 468  :         }
; 469  :     }
; 470  : 
; 471  :     fResult = TRUE;

	mov	esi, 1
$Exit$16596:

; 472  : Exit:
; 473  :     return fResult;

	mov	eax, esi

; 474  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@WinbaseIso:
$LN59@WinbaseIso:
$LN27@WinbaseIso:

; 466  :         {
; 467  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	call	_IsolationAwareDeactivateActCtx@8
$LN26@WinbaseIso:
$LN58@WinbaseIso:
	ret	0
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0DeviceSource@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0DeviceSource@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0DeviceSource@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$8
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0DeviceSource@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0DeviceSource@@QAE@XZ PROC				; DeviceSource::DeviceSource, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DeviceSource@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __imp_??_7ImageSource@@6B@
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edi, DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [esi], OFFSET ??_7DeviceSource@@6B@
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+76]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+84]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+92]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+100]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+108]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+116]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	DWORD PTR [esi+224], 0
	mov	DWORD PTR [esi+228], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DeviceSource@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ImageSource@@UAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$8:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 224				; 000000e0H
	jmp	??1?$List@PAUSampleData@@@@QAE@XZ	; List<SampleData *>::~List<SampleData *>
__ehhandler$??0DeviceSource@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DeviceSource@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DeviceSource@@QAE@XZ ENDP				; DeviceSource::DeviceSource
PUBLIC	?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateDShowSource
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\inline.h
xdata$x	SEGMENT
__unwindtable$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$0
__ehfuncinfo$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
$T106642 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateDShowSource, COMDAT

; 1271 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1272 :     DeviceSource *source = new DeviceSource;

	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	304					; 00000130H
	call	eax
	mov	edx, eax
	mov	ecx, 76					; 0000004cH
	xor	eax, eax
	mov	edi, edx
	rep stosd
	mov	DWORD PTR $T106642[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	test	edx, edx
	je	SHORT $LN4@CreateDSho
	push	edx
	call	??0DeviceSource@@QAE@XZ
	mov	ebx, eax
	jmp	SHORT $LN5@CreateDSho
$LN4@CreateDSho:
	xor	ebx, ebx
$LN5@CreateDSho:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1273 :     if(!source->Init(data))

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?Init@DeviceSource@@QAE_NPAVXElement@@@Z ; DeviceSource::Init
	test	al, al
	jne	SHORT $LN1@CreateDSho

; 1274 :     {
; 1275 :         delete source;

	test	ebx, ebx
	je	SHORT $LN6@CreateDSho
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx]
	push	1
	mov	ecx, ebx
	call	eax
$LN6@CreateDSho:

; 1276 :         return NULL;

	xor	eax, eax

; 1280 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN1@CreateDSho:

; 1277 :     }
; 1278 : 
; 1279 :     return source;

	mov	eax, ebx

; 1280 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$0:
	mov	eax, DWORD PTR $T106642[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateDShowSource
; Function compile flags: /Ogtp
;	COMDAT ??_GConfigDialogData@@QAEPAXI@Z
_TEXT	SEGMENT
??_GConfigDialogData@@QAEPAXI@Z PROC			; ConfigDialogData::`scalar deleting destructor', COMDAT
; _this$ = esi
	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
	mov	eax, esi
	ret	0
??_GConfigDialogData@@QAEPAXI@Z ENDP			; ConfigDialogData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z	; ConfigureDialogProc
;	COMDAT ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
_BSS	SEGMENT
?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; `ConfigureDialogProc'::`2'::$S1
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$6
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_bFoundGlobal$93093 = -45				; size = 1
_bHasAudio$93054 = -45					; size = 1
tv1204 = -44						; size = 4
tv1158 = -44						; size = 4
_soundOutputType$93107 = -44				; size = 4
_hwndAudioList$92911 = -44				; size = 4
tv1203 = -40						; size = 4
tv1091 = -40						; size = 4
_hwndTemp$92940 = -40					; size = 4
tv1352 = -36						; size = 4
tv1351 = -36						; size = 4
tv1205 = -36						; size = 4
$T106739 = -36						; size = 4
_fVol$93116 = -36					; size = 4
_filter$93050 = -36					; size = 4
_fVol$92979 = -36					; size = 4
_soundOutputType$92941 = -36				; size = 4
$T106704 = -32						; size = 4
$T106702 = -32						; size = 4
_hwndAudioDeviceList$93015 = -32			; size = 4
_strAudioDevice$92914 = -32				; size = 8
tv1224 = -24						; size = 4
_strAudioDevice$93090 = -24				; size = 8
$T106703 = -24						; size = 4
$T106701 = -24						; size = 4
_hwndCrossbarList$93016 = -24				; size = 4
_fVol$92950 = -24					; size = 4
__$EHRec$ = -12						; size = 12
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z PROC		; ConfigureDialogProc, COMDAT

; 908  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, eax

; 909  :     static bool bSelectingColor = false;
; 910  :     static bool bMouseDown = false;
; 911  :     static ColorSelectionData colorData;

	test	BYTE PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, 1
	jne	SHORT $LN106@ConfigureD
	or	DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, 1
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[esp+76], edi
	push	OFFSET ??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData''
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, edi
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, edi
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, edi
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, 0
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[esp+76], -1
	jmp	SHORT $LN66@ConfigureD
$LN106@ConfigureD:
	xor	edi, edi
$LN66@ConfigureD:

; 912  : 
; 913  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	sub	eax, 272				; 00000110H
	je	$LN63@ConfigureD
	dec	eax
	jne	$LN47@ConfigureD

; 997  :             }
; 998  : 
; 999  :         case WM_DESTROY:
; 1000 :             break;
; 1001 : 
; 1002 :         case WM_LBUTTONDOWN:
; 1003 :             break;
; 1004 : 
; 1005 :         case WM_MOUSEMOVE:
; 1006 :             break;
; 1007 : 
; 1008 :         case WM_LBUTTONUP:
; 1009 :             break;
; 1010 : 
; 1011 :         case WM_CAPTURECHANGED:
; 1012 :             break;
; 1013 : 
; 1014 :         case WM_COMMAND:
; 1015 :             switch(LOWORD(wParam))

	mov	esi, DWORD PTR _wParam$[ebp]
	movzx	ebx, si
	mov	eax, ebx
	mov	DWORD PTR tv1091[esp+68], ebx
	cmp	eax, 1007				; 000003efH
	jg	$LN69@ConfigureD
	je	$LN23@ConfigureD
	cmp	eax, 1003				; 000003ebH
	jg	$LN70@ConfigureD
	je	$LN28@ConfigureD
	dec	eax
	mov	ebx, DWORD PTR _hwnd$[ebp]
	je	SHORT $LN16@ConfigureD
	dec	eax
	je	$LN3@ConfigureD

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN16@ConfigureD:

; 1153 :                         }
; 1154 :                         break;
; 1155 :                     }
; 1156 : 
; 1157 :                 case IDOK:
; 1158 :                     {
; 1159 :                         UINT audioDeviceID= (UINT)SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1003					; 000003ebH
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	edi, eax

; 1160 :                         if(audioDeviceID == CB_ERR)

	cmp	edi, -1
	je	$LN47@ConfigureD

; 1161 :                             break;
; 1162 : 
; 1163 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	ebx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	esi, eax

; 1164 : 
; 1165 :                         if(!configData->bDShowHasAudio) { audioDeviceID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_GETCURSEL, 0, 0);

	cmp	BYTE PTR [esi+1682], 0
	jne	SHORT $LN13@ConfigureD
	push	0
	push	0
	push	327					; 00000147H
	push	1003					; 000003ebH
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	edi, eax

; 1166 :                             if(audioDeviceID == CB_ERR)

	cmp	edi, -1
	je	$LN47@ConfigureD
$LN13@ConfigureD:

; 1167 :                                 break;
; 1168 :                         }
; 1169 : 
; 1170 :                         String strAudioDevice = GetCBText(GetDlgItem(hwnd, IDC_AUDIOLIST), audioDeviceID);

	push	edi
	push	1003					; 000003ebH
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR _strAudioDevice$93090[esp+76]
	push	eax
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[esp+76], 6

; 1171 : 
; 1172 :                         if(configData->bCreating)

	cmp	BYTE PTR [esi+1681], 0
	je	$LN11@ConfigureD

; 1173 :                         {
; 1174 :                             bool bFoundGlobal;
; 1175 :                             if(CurrentDeviceExists(strAudioDevice, configData->bGlobalSource, bFoundGlobal))

	movzx	ecx, BYTE PTR [esi+1680]
	mov	edx, DWORD PTR _strAudioDevice$93090[esp+68]
	push	ecx
	push	edx
	lea	eax, DWORD PTR _bFoundGlobal$93093[esp+76]
	call	?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z	; CurrentDeviceExists
	add	esp, 8
	test	al, al
	je	SHORT $LN11@ConfigureD

; 1176 :                             {
; 1177 :                                 if(bFoundGlobal)

	cmp	BYTE PTR _bFoundGlobal$93093[esp+68], 0

; 1178 :                                     MessageBox(hwnd, PluginStr("DeviceSelection.GlobalExists"), NULL, 0);

	push	0
	push	0
	je	SHORT $LN10@ConfigureD
	push	OFFSET $SG-8159

; 1179 :                                 else

	jmp	SHORT $LN111@ConfigureD
$LN10@ConfigureD:

; 1180 :                                 {
; 1181 :                                     if(configData->bGlobalSource)

	cmp	BYTE PTR [esi+1680], 0
	je	SHORT $LN8@ConfigureD

; 1182 :                                         MessageBox(hwnd, PluginStr("DeviceSelection.ExistsSomewhere"), NULL, 0);

	push	OFFSET $SG-8160

; 1183 :                                     else

	jmp	SHORT $LN111@ConfigureD
$LN8@ConfigureD:

; 1184 :                                         MessageBox(hwnd, PluginStr("DeviceSelection.ExistsInScene"), NULL, 0);

	push	OFFSET $SG-8161
$LN111@ConfigureD:
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	ebx
	call	DWORD PTR __imp__MessageBoxW@16

; 1185 :                                 }
; 1186 : 
; 1187 :                                 break;

	mov	DWORD PTR __$EHRec$[esp+76], -1
	lea	ecx, DWORD PTR _strAudioDevice$93090[esp+68]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@ConfigureD:

; 1188 :                             }
; 1189 :                         }
; 1190 : 
; 1191 :                         //------------------------------------------
; 1192 : 
; 1193 :                         configData->data->SetString(TEXT("audioDevice"), strAudioDevice);

	mov	eax, DWORD PTR _strAudioDevice$93090[esp+68]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8162
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1194 :                         configData->data->SetString(TEXT("audioDeviceName"), configData->audioNameList[audioDeviceID]);

	push	edi
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8163
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1195 :                         configData->data->SetString(TEXT("audioDeviceID"), configData->audioIDList[audioDeviceID]);

	push	edi
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8164
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1196 :                         configData->data->SetString(TEXT("audioDeviceCLSID"), configData->audioGUID[audioDeviceID]);

	push	edi
	lea	ecx, DWORD PTR [esi+56]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8165
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1197 : 
; 1198 :                         configData->data->SetInt(TEXT("dshowHasAudio"), configData->bDShowHasAudio);

	movzx	ecx, BYTE PTR [esi+1682]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8166
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1199 : 
; 1200 :                         //------------------------------------------
; 1201 : 
; 1202 :                         int soundOutputType = 0;
; 1203 :                         if(SendMessage(GetDlgItem(hwnd, IDC_OUTPUTSOUND), BM_GETCHECK, 0, 0) == BST_CHECKED)

	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	0
	push	0
	push	240					; 000000f0H
	push	1029					; 00000405H
	push	ebx
	mov	DWORD PTR _soundOutputType$93107[esp+88], 0
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN6@ConfigureD

; 1204 :                             soundOutputType = 1;

	mov	DWORD PTR _soundOutputType$93107[esp+68], eax
	jmp	SHORT $LN4@ConfigureD
$LN6@ConfigureD:

; 1205 :                         else if(SendMessage(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), BM_GETCHECK, 0, 0) == BST_CHECKED)

	push	0
	push	0
	push	240					; 000000f0H
	push	1030					; 00000406H
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN4@ConfigureD

; 1206 :                             soundOutputType = 2;

	mov	DWORD PTR _soundOutputType$93107[esp+68], 2
$LN4@ConfigureD:

; 1207 :                         bool bForceCustomAudioDevice = SendMessage(GetDlgItem(hwnd, IDC_FORCECUSTOMAUDIO), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1034					; 0000040aH
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1208 : 
; 1209 :                         configData->data->SetInt(TEXT("soundOutputType"), soundOutputType);

	mov	edx, DWORD PTR _soundOutputType$93107[esp+68]
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	push	OFFSET $SG-8167
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1210 : 
; 1211 :                         int soundTimeOffset = (int)SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1033					; 00000409H
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1212 :                         configData->data->SetInt(TEXT("soundTimeOffset"), soundTimeOffset);

	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8168
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1213 : 
; 1214 :                         float fVol = GetVolumeControlValue(GetDlgItem(hwnd, IDC_VOLUME));

	push	1035					; 0000040bH
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z
	fstp	DWORD PTR _fVol$93116[esp+72]

; 1215 :                         configData->data->SetFloat(TEXT("volume"), fVol);

	fld	DWORD PTR _fVol$93116[esp+72]
	mov	ecx, DWORD PTR [esi+4]
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8169
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1216 : 
; 1217 :                     }

	mov	DWORD PTR __$EHRec$[esp+76], -1
	lea	ecx, DWORD PTR _strAudioDevice$93090[esp+68]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	esi, DWORD PTR _wParam$[ebp]
$LN3@ConfigureD:

; 1218 : 
; 1219 :                 case IDCANCEL:
; 1220 :                     if(LOWORD(wParam) == IDCANCEL)

	cmp	si, 2
	jne	SHORT $LN1@ConfigureD

; 1221 :                     {
; 1222 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	ebx
	call	DWORD PTR __imp__GetWindowLongW@8

; 1223 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	esi, eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	edi, eax

; 1224 : 
; 1225 :                         if(source)

	test	edi, edi
	je	SHORT $LN1@ConfigureD

; 1226 :                         {
; 1227 :                             source->SetInt(TEXT("timeOffset"),          configData->data->GetInt(TEXT("soundTimeOffset"), 0));

	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi+4]
	push	0
	push	OFFSET $SG-8170
	mov	DWORD PTR tv1351[esp+76], edx
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	mov	eax, DWORD PTR tv1351[esp+72]
	mov	edx, DWORD PTR [eax+44]
	push	OFFSET $SG-8171
	mov	ecx, edi
	call	edx

; 1228 :                             source->SetFloat(TEXT("volume"),            configData->data->GetFloat(TEXT("volume"), 1.0f));

	fld1
	mov	eax, DWORD PTR [edi]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8172
	mov	DWORD PTR tv1352[esp+76], eax
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	edx, DWORD PTR tv1352[esp+68]
	mov	eax, DWORD PTR [edx+40]
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8173
	mov	ecx, edi
	call	eax
$LN1@ConfigureD:

; 1229 :                         }
; 1230 :                     }
; 1231 : 
; 1232 :                     EndDialog(hwnd, LOWORD(wParam));

	mov	ecx, DWORD PTR tv1091[esp+68]
	push	ecx
	push	ebx
	call	DWORD PTR __imp__EndDialog@8

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN28@ConfigureD:

; 1088 : 
; 1089 :                         break;
; 1090 :                     }
; 1091 : 
; 1092 :                 case IDC_AUDIOLIST:
; 1093 :                     if(HIWORD(wParam) == CBN_SELCHANGE)

	shr	esi, 16					; 00000010H
	cmp	esi, 1
	jne	$LN47@ConfigureD

; 1094 :                     {
; 1095 :                         HWND hwndDevices = (HWND)lParam;
; 1096 :                         UINT id = (UINT)SendMessage(hwndDevices, CB_GETCURSEL, 0, 0);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edi
	push	edi
	push	327					; 00000147H
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 1097 : 
; 1098 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	esi, DWORD PTR _hwnd$[ebp]
	push	8
	push	esi
	mov	edi, eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	ebx, eax

; 1099 :                         IBaseFilter *filter = GetDeviceByValue(CLSID_AudioInputDeviceCategory,
; 1100 :                                                                 L"FriendlyName", configData->audioNameList[id],
; 1101 :                                                                 L"DevicePath", configData->audioIDList[id]);

	push	edi
	lea	ecx, DWORD PTR [ebx+48]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	push	edi
	lea	ecx, DWORD PTR [ebx+40]
	mov	DWORD PTR $T106739[esp+72], eax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, DWORD PTR $T106739[esp+68]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG-8157
	push	eax
	push	OFFSET $SG-8158
	push	OFFSET _CLSID_AudioInputDeviceCategory
	call	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter$93050[esp+68], eax

; 1102 :                         if(filter)

	test	eax, eax
	je	$LN47@ConfigureD

; 1103 :                         {
; 1104 :                             //--------------------------------
; 1105 :                             // get audio info
; 1106 : 
; 1107 :                             bool bHasAudio = false;
; 1108 : 
; 1109 :                             IPin *outputPin = GetOutputPin(filter, &MEDIATYPE_Audio);

	push	eax
	mov	BYTE PTR _bHasAudio$93054[esp+72], 0
	call	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
	add	esp, 4

; 1110 :                             if(outputPin)

	test	eax, eax
	je	SHORT $LN25@ConfigureD

; 1111 :                             {
; 1112 :                                 bHasAudio = true;
; 1113 :                                 outputPin->Release();

	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR _bHasAudio$93054[esp+72], 1
	call	eax
$LN25@ConfigureD:

; 1114 :                             }
; 1115 : 
; 1116 :                             EnableWindow(GetDlgItem(hwnd, IDC_NOSOUND),          bHasAudio);

	movzx	eax, BYTE PTR _bHasAudio$93054[esp+68]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1031					; 00000407H
	push	esi
	mov	DWORD PTR tv1158[esp+80], eax
	call	edi
	mov	ebx, DWORD PTR __imp__EnableWindow@8
	push	eax
	call	ebx

; 1117 :                             EnableWindow(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), bHasAudio);

	mov	ecx, DWORD PTR tv1158[esp+68]
	push	ecx
	push	1030					; 00000406H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1118 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      bHasAudio);

	mov	edx, DWORD PTR tv1158[esp+68]
	push	edx
	push	1029					; 00000405H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1119 :                             EnableWindow(GetDlgItem(hwnd, IDC_VOLUME),           bHasAudio);

	mov	eax, DWORD PTR tv1158[esp+68]
	push	eax
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1120 : 
; 1121 :                             if(!bHasAudio)

	cmp	BYTE PTR _bHasAudio$93054[esp+68], 0
	jne	SHORT $LN24@ConfigureD

; 1122 :                             {
; 1123 :                                 SendMessage(GetDlgItem(hwnd, IDC_NOSOUND),          BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1031					; 00000407H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1124 :                                 SendMessage(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1030					; 00000406H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1125 :                                 SendMessage(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1029					; 00000405H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1126 : 
; 1127 :                                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET),      FALSE);

	push	0
	push	1033					; 00000409H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1128 :                                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), FALSE);

	push	0
	push	1032					; 00000408H
	push	esi
	call	edi
	push	eax
	call	ebx
$LN24@ConfigureD:

; 1129 :                             }
; 1130 : 
; 1131 :                             filter->Release();

	mov	eax, DWORD PTR _filter$93050[esp+68]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN70@ConfigureD:

; 997  :             }
; 998  : 
; 999  :         case WM_DESTROY:
; 1000 :             break;
; 1001 : 
; 1002 :         case WM_LBUTTONDOWN:
; 1003 :             break;
; 1004 : 
; 1005 :         case WM_MOUSEMOVE:
; 1006 :             break;
; 1007 : 
; 1008 :         case WM_LBUTTONUP:
; 1009 :             break;
; 1010 : 
; 1011 :         case WM_CAPTURECHANGED:
; 1012 :             break;
; 1013 : 
; 1014 :         case WM_COMMAND:
; 1015 :             switch(LOWORD(wParam))

	cmp	eax, 1004				; 000003ecH
	jne	$LN47@ConfigureD
$LN23@ConfigureD:

; 1132 :                         }
; 1133 : 
; 1134 :                             
; 1135 :                     }
; 1136 :                     break;
; 1137 : 
; 1138 :                     case IDC_CONFIGAUDIO:
; 1139 :                     case IDC_CROSSBAR:
; 1140 :                     {
; 1141 :                         UINT id;
; 1142 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	esi, DWORD PTR _hwnd$[ebp]
	push	8
	push	esi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1143 :                         switch(LOWORD(wParam))

	sub	ebx, 1004				; 000003ecH
	mov	edi, eax
	je	$LN20@ConfigureD
	sub	ebx, 3
	jne	$LN47@ConfigureD

; 1148 :                                 break;
; 1149 :                             case IDC_CROSSBAR:
; 1150 :                                 id = (UINT)SendMessage(GetDlgItem(hwnd, IDC_CROSSBARLIST), CB_GETCURSEL, 0, 0);

	push	ebx
	push	ebx
	push	327					; 00000147H
	push	1006					; 000003eeH
	push	esi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	ebx, eax

; 1151 :                                 if(id != CB_ERR) OpenPropertyPages(hwnd, configData->crossbarList[id], configData->crossbarIDList[id], AM_KSCATEGORY_CROSSBAR);

	cmp	ebx, -1
	je	$LN47@ConfigureD
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+4
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+12
	mov	DWORD PTR [eax+8], ecx
	push	ebx
	lea	ecx, DWORD PTR [edi+72]
	mov	DWORD PTR [eax+12], edx
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106703[esp+92], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[esp+100], 4
	push	ebx
	lea	ecx, DWORD PTR [edi+64]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106704[esp+100], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+108], 5

; 1152 :                                 break;

	jmp	$LN112@ConfigureD
$LN20@ConfigureD:

; 1144 :                         {
; 1145 :                             case IDC_CONFIGAUDIO:
; 1146 :                                 id = (UINT)SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1003					; 000003ebH
	push	esi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	ebx, eax

; 1147 :                                 if(id != CB_ERR) OpenPropertyPages(hwnd, configData->audioNameList[id], configData->audioIDList[id], configData->listGUID[id]);

	cmp	ebx, -1
	je	$LN47@ConfigureD
	lea	eax, DWORD PTR [ebx+5]
	shl	eax, 4
	mov	edx, DWORD PTR [eax+edi]
	add	eax, edi
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
	push	ebx
	lea	ecx, DWORD PTR [edi+48]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106701[esp+92], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[esp+100], 2
	push	ebx
	lea	ecx, DWORD PTR [edi+40]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106702[esp+100], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+108], 3
$LN112@ConfigureD:
	mov	DWORD PTR __$EHRec$[esp+108], -1
	mov	ecx, esi
	call	?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ; OpenPropertyPages
	add	esp, 32					; 00000020H

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN69@ConfigureD:

; 997  :             }
; 998  : 
; 999  :         case WM_DESTROY:
; 1000 :             break;
; 1001 : 
; 1002 :         case WM_LBUTTONDOWN:
; 1003 :             break;
; 1004 : 
; 1005 :         case WM_MOUSEMOVE:
; 1006 :             break;
; 1007 : 
; 1008 :         case WM_LBUTTONUP:
; 1009 :             break;
; 1010 : 
; 1011 :         case WM_CAPTURECHANGED:
; 1012 :             break;
; 1013 : 
; 1014 :         case WM_COMMAND:
; 1015 :             switch(LOWORD(wParam))

	sub	eax, 1011				; 000003f3H
	cmp	eax, 24					; 00000018H
	ja	$LN47@ConfigureD
	movzx	ecx, BYTE PTR $LN104@ConfigureD[eax]
	jmp	DWORD PTR $LN115@ConfigureD[ecx*4]
$LN46@ConfigureD:

; 1016 :             {
; 1017 :                 case IDC_NOSOUND:
; 1018 :                 case IDC_PLAYDESKTOPSOUND:
; 1019 :                 case IDC_OUTPUTSOUND:
; 1020 :                     if(HIWORD(wParam) == BN_CLICKED)

	mov	edx, esi
	shr	edx, 16					; 00000010H
	test	edx, edx
	jne	$LN47@ConfigureD

; 1021 :                     {
; 1022 :                         EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET),      LOWORD(wParam) == IDC_OUTPUTSOUND);

	mov	ebx, DWORD PTR _hwnd$[ebp]
	xor	ecx, ecx
	mov	eax, 1029				; 00000405H
	cmp	si, ax
	sete	cl
	mov	edi, ecx
	push	edi
	push	1033					; 00000409H
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1023 :                         EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), LOWORD(wParam) == IDC_OUTPUTSOUND);

	push	edi
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	1032					; 00000408H
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1024 :                         EnableWindow(GetDlgItem(hwnd, IDC_VOLUME),          LOWORD(wParam) != IDC_NOSOUND);

	xor	eax, eax
	mov	edx, 1031				; 00000407H
	cmp	si, dx
	setne	al
	push	eax
	push	1035					; 0000040bH
	push	ebx
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN44@ConfigureD:

; 1025 :                     }
; 1026 :                     break;
; 1027 : 
; 1028 :                 case IDC_VOLUME:
; 1029 :                     if(HIWORD(wParam) == VOLN_ADJUSTING || HIWORD(wParam) == VOLN_FINALVALUE)

	shr	esi, 16					; 00000010H
	mov	ecx, 768				; 00000300H
	cmp	si, cx
	je	SHORT $LN42@ConfigureD
	mov	edx, 769				; 00000301H
	cmp	si, dx
	jne	$LN47@ConfigureD
$LN42@ConfigureD:

; 1030 :                     {
; 1031 :                         if(IsWindowEnabled((HWND)lParam))

	mov	esi, DWORD PTR _lParam$[ebp]
	push	esi
	call	DWORD PTR __imp__IsWindowEnabled@4
	test	eax, eax
	je	$LN47@ConfigureD

; 1032 :                         {
; 1033 :                             float fVol = GetVolumeControlValue((HWND)lParam);

	push	esi
	call	DWORD PTR __imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z
	fstp	DWORD PTR _fVol$92979[esp+72]

; 1034 : 
; 1035 :                             ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	eax, DWORD PTR _hwnd$[ebp]
	add	esp, 4
	push	8
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8

; 1036 :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1037 :                             if(source)

	cmp	eax, edi
	je	$LN47@ConfigureD

; 1038 :                                 source->SetFloat(TEXT("volume"), fVol);

	mov	edx, DWORD PTR [eax]
	fld	DWORD PTR _fVol$92979[esp+68]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+40]
	push	OFFSET $SG-8155
	call	eax

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN39@ConfigureD:

; 1039 :                         }
; 1040 :                     }
; 1041 :                     break;
; 1042 : 
; 1043 :                 case IDC_TIMEOFFSET_EDIT:
; 1044 :                     if(HIWORD(wParam) == EN_CHANGE)

	shr	esi, 16					; 00000010H
	cmp	esi, 768				; 00000300H
	jne	$LN47@ConfigureD

; 1045 :                     {
; 1046 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	edi, DWORD PTR _hwnd$[ebp]
	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1047 :                         if(configData)

	test	eax, eax
	je	$LN47@ConfigureD

; 1048 :                         {
; 1049 :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	esi, eax

; 1050 : 
; 1051 :                             if(source)

	test	esi, esi
	je	$LN47@ConfigureD

; 1052 :                             {
; 1053 :                                 HWND hwndVal = NULL;

	xor	eax, eax

; 1054 :                                 switch(LOWORD(wParam))

	cmp	ebx, 1032				; 00000408H
	jne	SHORT $LN34@ConfigureD

; 1055 :                                 {
; 1056 :                                     case IDC_TIMEOFFSET_EDIT:       hwndVal = GetDlgItem(hwnd, IDC_TIMEOFFSET); break;

	push	1033					; 00000409H
	push	edi
	call	DWORD PTR __imp__GetDlgItem@8
$LN34@ConfigureD:

; 1057 :                                 }
; 1058 : 
; 1059 :                                 int val = (int)SendMessage(hwndVal, UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1060 :                                 switch(LOWORD(wParam))

	cmp	ebx, 1032				; 00000408H
	jne	$LN47@ConfigureD

; 1061 :                                 {
; 1062 :                                     case IDC_TIMEOFFSET_EDIT:       source->SetInt(TEXT("timeOffset"), val); break;

	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx+44]
	push	OFFSET $SG-8156
	mov	ecx, esi
	call	eax

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN29@ConfigureD:

; 1063 :                                 }
; 1064 :                             }
; 1065 :                         }
; 1066 :                     }
; 1067 :                     break;
; 1068 : 
; 1069 :                 case IDC_REFRESH:
; 1070 :                     {
; 1071 :                         HWND hwndAudioDeviceList = GetDlgItem(hwnd, IDC_AUDIOLIST);

	mov	esi, DWORD PTR _hwnd$[ebp]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	1003					; 000003ebH
	push	esi
	call	edi

; 1072 :                         HWND hwndCrossbarList = GetDlgItem(hwnd, IDC_CROSSBARLIST);

	push	1006					; 000003eeH
	push	esi
	mov	DWORD PTR _hwndAudioDeviceList$93015[esp+76], eax
	call	edi

; 1073 : 
; 1074 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	esi
	mov	DWORD PTR _hwndCrossbarList$93016[esp+76], eax
	call	DWORD PTR __imp__GetWindowLongW@8

; 1075 : 
; 1076 :                         SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	push	1003					; 000003ebH
	push	esi
	mov	ebx, eax
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1077 :                         configData->audioIDList.Clear();

	lea	ecx, DWORD PTR [ebx+48]
	mov	DWORD PTR tv1203[esp+68], ecx
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ

; 1078 :                         configData->audioNameList.Clear();

	lea	ecx, DWORD PTR [ebx+40]
	mov	DWORD PTR tv1204[esp+68], ecx
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ

; 1079 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioInputDeviceCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+12
	lea	ecx, DWORD PTR [ebx+80]
	push	ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR tv1204[esp+88]
	push	eax
	push	1003					; 000003ebH
	push	esi
	mov	DWORD PTR tv1205[esp+100], ecx
	add	ebx, 56					; 00000038H
	call	edi
	mov	ecx, DWORD PTR tv1203[esp+92]
	push	eax
	mov	edx, ebx
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 1080 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_VideoInputDeviceCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+4
	add	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR tv1204[esp+84]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR tv1205[esp+84]
	push	eax
	push	ecx
	push	1003					; 000003ebH
	push	esi
	call	edi
	mov	ecx, DWORD PTR tv1203[esp+92]
	push	eax
	mov	edx, ebx
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 1081 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioRendererCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	edx, DWORD PTR _CLSID_AudioRendererCategory
	mov	ecx, DWORD PTR _CLSID_AudioRendererCategory+4
	add	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _CLSID_AudioRendererCategory+8
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _CLSID_AudioRendererCategory+12
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR tv1205[esp+84]
	push	edx
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR tv1204[esp+88]
	push	eax
	push	1003					; 000003ebH
	push	esi
	call	edi
	mov	ecx, DWORD PTR tv1203[esp+92]
	push	eax
	mov	edx, ebx
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 1082 :                         //FillOutListOfDevices(GetDlgItem(hwnd, IDC_CROSSBARLIST), AM_KSCATEGORY_CROSSBAR, &configData->crossbarList, &configData->crossbarIDList, NULL);
; 1083 : 
; 1084 :                         SendMessage(hwndAudioDeviceList, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndAudioDeviceList$93015[esp+96]
	mov	ebx, DWORD PTR __imp__SendMessageW@16
	add	esp, 28					; 0000001cH
	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 1085 :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioDeviceList);

	push	edi
	push	66539					; 000103ebH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1086 :                         SendMessage(hwndCrossbarList, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndCrossbarList$93016[esp+68]
	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 1087 :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_CROSSBARLIST, CBN_SELCHANGE), (LPARAM)hwndCrossbarList);

	push	edi
	push	66542					; 000103eeH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc
$LN47@ConfigureD:

; 1233 :             }
; 1234 :     }
; 1235 : 
; 1236 :     return FALSE;

	xor	eax, eax

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN63@ConfigureD:

; 914  :     {
; 915  :         case WM_INITDIALOG:
; 916  :             {
; 917  :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)lParam);

	mov	ebx, DWORD PTR _lParam$[ebp]
	mov	esi, DWORD PTR _hwnd$[ebp]
	push	ebx
	push	8
	push	esi
	call	DWORD PTR __imp__SetWindowLongW@12

; 918  : 
; 919  :                 ConfigDialogData *configData = (ConfigDialogData*)lParam;
; 920  : 
; 921  :                 HWND hwndAudioList      = GetDlgItem(hwnd, IDC_AUDIOLIST);

	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	1003					; 000003ebH
	push	esi
	call	edi

; 922  :                 HWND hwndCrossbarlist   = GetDlgItem(hwnd, IDC_CROSSBARLIST);

	push	1006					; 000003eeH
	push	esi
	mov	DWORD PTR _hwndAudioList$92911[esp+76], eax
	call	edi

; 923  : 
; 924  :                 //------------------------------------------
; 925  : 
; 926  :                 configData->bDShowHasAudio = configData->data->GetInt(TEXT("dshowHasAudio")) != 0;

	mov	ecx, DWORD PTR [ebx+4]
	push	0
	push	OFFSET $SG-8150
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	setne	cl

; 927  : 
; 928  :                 //------------------------------------------
; 929  : 
; 930  :                 String strAudioDevice = configData->data->GetString(TEXT("audioDevice"));

	push	0
	mov	BYTE PTR [ebx+1682], cl
	mov	ecx, DWORD PTR [ebx+4]
	push	OFFSET $SG-8151
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	lea	ecx, DWORD PTR _strAudioDevice$92914[esp+72]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[esp+76], 1

; 931  : 
; 932  :                 LocalizeWindow(hwnd, pluginLocale);

	mov	edx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	edx
	push	esi
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 933  :                 SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 934  :                 configData->audioIDList.Clear();

	lea	ecx, DWORD PTR [ebx+48]
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ

; 935  :                 configData->audioNameList.Clear();

	lea	ecx, DWORD PTR [ebx+40]
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ

; 936  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioInputDeviceCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+4
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+12
	lea	ecx, DWORD PTR [ebx+80]
	push	ecx
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR [ebx+40]
	push	eax
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	lea	edx, DWORD PTR [ebx+56]
	lea	ecx, DWORD PTR [ebx+48]
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 937  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_VideoInputDeviceCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+4
	add	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR [ebx+80]
	push	eax
	lea	eax, DWORD PTR [ebx+40]
	push	eax
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	lea	edx, DWORD PTR [ebx+56]
	lea	ecx, DWORD PTR [ebx+48]
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 938  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioRendererCategory, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);

	mov	ecx, DWORD PTR _CLSID_AudioRendererCategory
	mov	edx, DWORD PTR _CLSID_AudioRendererCategory+4
	add	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_AudioRendererCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_AudioRendererCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR [ebx+80]
	push	eax
	lea	eax, DWORD PTR [ebx+40]
	push	eax
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	lea	edx, DWORD PTR [ebx+56]
	lea	ecx, DWORD PTR [ebx+48]
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@22PAU2@@Z ; FillOutListOfDevices

; 939  : 
; 940  :                 //FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), KSCATEGORY_AUDIO, &configData->audioNameList, &configData->audioIDList, &configData->audioGUID, configData->listGUID);
; 941  : 
; 942  :                 //FillOutListOfDevices(GetDlgItem(hwnd, IDC_CROSSBARLIST), AM_KSCATEGORY_CROSSBAR, &configData->crossbarList, &configData->crossbarIDList, NULL, NULL);
; 943  : 
; 944  :                 //SendMessage(hwndCrossbarlist, CB_SETCURSEL, 0, 0);
; 945  :                 //ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_CROSSBARLIST, CBN_SELCHANGE), (LPARAM)hwndCrossbarlist);
; 946  : 
; 947  :                 UINT audioDeviceID = CB_ERR;
; 948  :                 if(strAudioDevice.IsValid())

	mov	eax, DWORD PTR _strAudioDevice$92914[esp+96]
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN103@ConfigureD
	cmp	WORD PTR [eax], 0
	je	SHORT $LN103@ConfigureD
	cmp	DWORD PTR _strAudioDevice$92914[esp+72], 0
	je	SHORT $LN103@ConfigureD

; 949  :                     audioDeviceID = (UINT)SendMessage(hwndAudioList, CB_FINDSTRINGEXACT, -1, (LPARAM)strAudioDevice.Array());

	push	eax
	mov	eax, DWORD PTR _hwndAudioList$92911[esp+72]
	push	-1
	push	344					; 00000158H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 950  : 
; 951  : 
; 952  :                 if(audioDeviceID == CB_ERR)

	cmp	eax, -1
	jne	SHORT $LN61@ConfigureD
$LN103@ConfigureD:

; 953  :                 {
; 954  :                     SendMessage(hwndAudioList, CB_SETCURSEL, 0, 0);

	mov	ecx, DWORD PTR _hwndAudioList$92911[esp+68]
	push	0
	push	0
	push	334					; 0000014eH
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 955  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioList);

	mov	edx, DWORD PTR _hwndAudioList$92911[esp+68]
	push	edx

; 956  :                 }
; 957  :                 else

	jmp	SHORT $LN113@ConfigureD
$LN61@ConfigureD:

; 958  :                 {
; 959  :                     SendMessage(hwndAudioList, CB_SETCURSEL, audioDeviceID, 0);

	push	0
	push	eax
	mov	eax, DWORD PTR _hwndAudioList$92911[esp+76]
	push	334					; 0000014eH
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 960  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioList);

	mov	ecx, DWORD PTR _hwndAudioList$92911[esp+68]
	push	ecx
$LN113@ConfigureD:
	push	66539					; 000103ebH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 961  :                 }
; 962  : 
; 963  :                 //------------------------------------------
; 964  : 
; 965  :                 HWND hwndTemp;
; 966  : 
; 967  :                 int soundOutputType = configData->data->GetInt(TEXT("soundOutputType"));

	mov	ecx, DWORD PTR [ebx+4]
	push	0
	push	OFFSET $SG-8152
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _soundOutputType$92941[esp+68], eax

; 968  :                 switch(soundOutputType)

	sub	eax, 0
	je	SHORT $LN57@ConfigureD
	dec	eax
	je	SHORT $LN56@ConfigureD
	dec	eax
	jne	SHORT $LN58@ConfigureD

; 972  :                     case 2: hwndTemp = GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND); break;

	push	1030					; 00000406H
	jmp	SHORT $LN114@ConfigureD
$LN56@ConfigureD:

; 971  :                     case 1: hwndTemp = GetDlgItem(hwnd, IDC_OUTPUTSOUND); break;

	push	1029					; 00000405H
	jmp	SHORT $LN114@ConfigureD
$LN57@ConfigureD:

; 969  :                 {
; 970  :                     case 0: hwndTemp = GetDlgItem(hwnd, IDC_NOSOUND); break;

	push	1031					; 00000407H
$LN114@ConfigureD:
	push	esi
	call	edi
	mov	DWORD PTR _hwndTemp$92940[esp+68], eax
$LN58@ConfigureD:

; 973  :                 }
; 974  :                 EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        true);

	push	1
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 975  : 
; 976  :                 SendMessage(hwndTemp, BM_SETCHECK, BST_CHECKED, 0);

	mov	edx, DWORD PTR _hwndTemp$92940[esp+68]
	push	0
	push	1
	push	241					; 000000f1H
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 977  : 
; 978  :                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET), soundOutputType == 1);

	xor	eax, eax
	cmp	DWORD PTR _soundOutputType$92941[esp+68], 1
	sete	al
	push	eax
	push	1033					; 00000409H
	push	esi
	mov	DWORD PTR tv1224[esp+80], eax
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 979  :                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), soundOutputType == 1);

	mov	eax, DWORD PTR tv1224[esp+68]
	push	eax
	push	1032					; 00000408H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 980  :                 EnableWindow(GetDlgItem(hwnd, IDC_VOLUME), soundOutputType != 0);

	xor	ecx, ecx
	cmp	DWORD PTR _soundOutputType$92941[esp+68], ecx
	setne	cl
	push	ecx
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 981  : 
; 982  :                 //------------------------------------------
; 983  : 
; 984  :                 float fVol = configData->data->GetFloat(TEXT("volume"), 1.0f);

	fld1
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR [ebx+4]
	push	OFFSET $SG-8153
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	fstp	DWORD PTR _fVol$92950[esp+68]

; 985  :                 SetVolumeControlValue(GetDlgItem(hwnd, IDC_VOLUME), fVol);

	fld	DWORD PTR _fVol$92950[esp+68]
	push	ecx
	fstp	DWORD PTR [esp]
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp_?SetVolumeControlValue@@YAMPAUHWND__@@M@Z
	fstp	ST(0)

; 986  : 
; 987  :                 //------------------------------------------
; 988  : 
; 989  :                 int pos = configData->data->GetInt(TEXT("soundTimeOffset"));

	mov	ecx, DWORD PTR [ebx+4]
	add	esp, 8
	push	0
	push	OFFSET $SG-8154
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 990  : 
; 991  :                 SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_SETRANGE32, -150, 3000);

	push	3000					; 00000bb8H
	push	-150					; ffffff6aH
	push	1135					; 0000046fH
	push	1033					; 00000409H
	push	esi
	mov	ebx, eax
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 992  :                 SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_SETPOS32, 0, pos);

	push	ebx
	push	0
	push	1137					; 00000471H
	push	1033					; 00000409H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 993  : 
; 994  :                 //------------------------------------------
; 995  : 
; 996  :                 return TRUE;

	mov	DWORD PTR __$EHRec$[esp+76], -1
	lea	ecx, DWORD PTR _strAudioDevice$92914[esp+68]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, 1

; 1237 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN115@ConfigureD:
	DD	$LN29@ConfigureD
	DD	$LN46@ConfigureD
	DD	$LN39@ConfigureD
	DD	$LN44@ConfigureD
	DD	$LN47@ConfigureD
$LN104@ConfigureD:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	1
	DB	1
	DB	2
	DB	4
	DB	4
	DB	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$0:
	mov	eax, DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, eax
	ret	0
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$6:
	lea	ecx, DWORD PTR _strAudioDevice$93090[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$4:
	mov	ecx, DWORD PTR $T106703[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$5:
	mov	ecx, DWORD PTR $T106704[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$2:
	mov	ecx, DWORD PTR $T106701[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$3:
	mov	ecx, DWORD PTR $T106702[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$1:
	lea	ecx, DWORD PTR _strAudioDevice$92914[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-52]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ENDP		; ConfigureDialogProc
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.0\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatenPgViNgRzlnPgpgk@4
_TEXT	SEGMENT
_pulpCookie$ = 8					; size = 4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 PROC		; COMDAT

; 536  : {

	push	ebp
	mov	ebp, esp
	push	edi

; 537  :     BOOL fResult = FALSE;

	xor	edi, edi

; 538  : 
; 539  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, edi
	je	SHORT $LN11@IsolationA@7

; 540  :     {
; 541  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 542  :         OutputDebugStringA(debugString);

	push	OFFSET ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN11@IsolationA@7:

; 543  :     }
; 544  : 
; 545  : #ifdef _M_IX86
; 546  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi
	je	SHORT $LN10@IsolationA@7

; 547  :     {
; 548  :         fResult = TRUE;

	mov	eax, 1
	pop	edi

; 579  : }

	pop	ebp
	ret	4
$LN10@IsolationA@7:
	push	esi

; 549  :         goto Exit;
; 550  :     }
; 551  : #endif
; 552  : 
; 553  :     /* Do not call Init if Cleanup has been called. */
; 554  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, edi
	jne	SHORT $LN7@IsolationA@7

; 555  :     {
; 556  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	test	eax, eax
	je	SHORT $LN20@IsolationA@7
$LN7@IsolationA@7:

; 557  :             goto Exit;
; 558  :     }
; 559  :     /* If Cleanup has been called and id3 was in use, this will activate NULL. */
; 560  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
	mov	esi, DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk
	test	eax, eax
	jne	SHORT $LN15@IsolationA@7
	push	ebx
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx
	test	eax, eax
	je	SHORT $LN20@IsolationA@7
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax
$LN15@IsolationA@7:
	mov	ecx, DWORD PTR _pulpCookie$[ebp]
	push	ecx
	push	esi
	call	eax
	test	eax, eax
	je	SHORT $LN20@IsolationA@7

; 561  :         goto Exit;
; 562  : 
; 563  :     fResult = TRUE;

	pop	esi
	mov	eax, 1
	pop	edi

; 579  : }

	pop	ebp
	ret	4
$LN20@IsolationA@7:

; 564  : Exit:
; 565  : #ifdef _M_IX86
; 566  :     if (!fResult)
; 567  :     {
; 568  :         const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0

; 569  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 570  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 571  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED)

	cmp	eax, 127				; 0000007fH
	je	SHORT $LN1@IsolationA@7
	cmp	eax, 126				; 0000007eH
	je	SHORT $LN1@IsolationA@7
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN21@IsolationA@7
$LN1@IsolationA@7:

; 572  :         {
; 573  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	eax, 1
	pop	esi
	mov	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, eax
	pop	edi

; 579  : }

	pop	ebp
	ret	4
$LN21@IsolationA@7:
	pop	esi

; 574  :             fResult = TRUE;
; 575  :         }
; 576  :     }
; 577  : #endif
; 578  :     return fResult;

	mov	eax, edi
	pop	edi

; 579  : }

	pop	ebp
	ret	4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 ENDP
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_IsolationAwareDialogBoxParamW@20 DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN12@IsolationA@8
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.0\include\um\winuser.inl
xdata$x	ENDS
;	COMDAT _IsolationAwareDialogBoxParamW@20
_TEXT	SEGMENT
_ulpCookie$ = -32					; size = 4
_nResult$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_hWndParent$ = 8					; size = 4
_dwLastError$26071 = 12					; size = 4
_dwInitParam$ = 12					; size = 4
_IsolationAwareDialogBoxParamW@20 PROC			; COMDAT

; 628  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_IsolationAwareDialogBoxParamW@20
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain

; 629  :     INT_PTR nResult = -1;

	mov	DWORD PTR _nResult$[ebp], -1

; 630  :     ULONG_PTR ulpCookie = 0;

	xor	edi, edi
	mov	DWORD PTR _ulpCookie$[ebp], edi

; 631  :     const BOOL fActivateActCtxSuccess =
; 632  : #ifdef _M_IX86
; 633  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 634  : #endif
; 635  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi
	jne	SHORT $LN4@IsolationA@8
	lea	eax, DWORD PTR _ulpCookie$[ebp]
	push	eax
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	test	eax, eax

; 636  :     if (!fActivateActCtxSuccess)

	jne	SHORT $LN4@IsolationA@8

; 637  :         return nResult;

	or	eax, -1

; 656  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@IsolationA@8:

; 638  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], edi

; 639  :     {
; 640  :         nResult = DialogBoxParamW(hInstance,lpTemplateName,hWndParent,lpDialogFunc,dwInitParam);

	mov	ecx, DWORD PTR _dwInitParam$[ebp]
	push	ecx
	push	OFFSET ?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc
	mov	edx, DWORD PTR _hWndParent$[ebp]
	push	edx
	push	101					; 00000065H
	push	esi
	call	DWORD PTR __imp__DialogBoxParamW@20
	mov	DWORD PTR _nResult$[ebp], eax

; 641  :     }
; 642  :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN14@IsolationA@8
$LN15@IsolationA@8:

; 653  :         }
; 654  :     }
; 655  :     return nResult;

	mov	eax, DWORD PTR _nResult$[ebp]

; 656  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN12@IsolationA@8:
$LN25@IsolationA@8:
$LN14@IsolationA@8:

; 643  :     {
; 644  : #ifdef _M_IX86
; 645  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN13@IsolationA@8

; 646  : #endif
; 647  :         {
; 648  :             const BOOL fPreserveLastError = (nResult == -1);

	xor	eax, eax
	cmp	DWORD PTR _nResult$[ebp], -1
	sete	al
	mov	edi, eax

; 649  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	test	edi, edi
	je	SHORT $LN9@IsolationA@8
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _dwLastError$26071[ebp], eax
	jmp	SHORT $LN10@IsolationA@8
$LN9@IsolationA@8:
	mov	DWORD PTR _dwLastError$26071[ebp], 0
$LN10@IsolationA@8:

; 650  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	esi, DWORD PTR _ulpCookie$[ebp]
	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA
	test	eax, eax
	jne	SHORT $LN17@IsolationA@8
	mov	ebx, OFFSET ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	test	eax, eax
	je	SHORT $LN18@IsolationA@8
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA, eax
$LN17@IsolationA@8:
	push	esi
	push	0
	call	eax
$LN18@IsolationA@8:

; 651  :             if (fPreserveLastError)

	test	edi, edi
	je	SHORT $LN13@IsolationA@8

; 652  :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR _dwLastError$26071[ebp]
	push	ecx
	call	DWORD PTR __imp__SetLastError@4
$LN13@IsolationA@8:
$LN24@IsolationA@8:
	ret	0
_IsolationAwareDialogBoxParamW@20 ENDP
PUBLIC	?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z	; ConfigureDShowSource
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\alloc.h
xdata$x	SEGMENT
__unwindtable$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z$0
__ehfuncinfo$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT ?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
$T107451 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_element$ = 8						; size = 4
_bCreating$ = 12					; size = 1
?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z PROC	; ConfigureDShowSource, COMDAT

; 1240 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1241 :     if(!element)

	mov	ebx, DWORD PTR _element$[ebp]
	xor	esi, esi
	cmp	ebx, esi
	jne	SHORT $LN3@ConfigureD@2

; 1242 :     {
; 1243 :         AppWarning(TEXT("ConfigureDShowSource: NULL element"));

	push	OFFSET $SG-8174
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 1244 :         return false;

	jmp	$LN52@ConfigureD@2
$LN3@ConfigureD@2:

; 1245 :     }
; 1246 : 
; 1247 :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG-8175
	mov	ecx, ebx
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax

; 1248 :     if(!data)

	cmp	eax, esi
	jne	SHORT $LN2@ConfigureD@2

; 1249 :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG-8176
	mov	ecx, ebx
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax
$LN2@ConfigureD@2:

; 1250 : 
; 1251 :     ConfigDialogData *configData = new ConfigDialogData;

	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	1688					; 00000698H
	call	eax
	mov	edx, eax
	mov	ecx, 422				; 000001a6H
	xor	eax, eax
	mov	edi, edx
	rep stosd
	mov	DWORD PTR $T107451[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	cmp	edx, esi
	je	SHORT $LN6@ConfigureD@2
	push	edx
	call	??0ConfigDialogData@@QAE@XZ
	mov	esi, eax
$LN6@ConfigureD@2:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1252 :     configData->lpName = element->GetName();

	mov	ecx, DWORD PTR [ebx+4]

; 1253 :     configData->data = data;

	mov	edi, DWORD PTR _data$[ebp]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edi

; 1254 :     configData->bGlobalSource = (scmpi(element->GetParent()->GetName(), TEXT("global sources")) == 0);

	mov	edx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [edx+4]
	push	OFFSET $SG-8177
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z

; 1255 :     configData->bCreating = bCreating;

	mov	cl, BYTE PTR _bCreating$[ebp]

; 1256 : 
; 1257 :     if(DialogBoxParam(hinstMain, MAKEINTRESOURCE(IDD_CONFIG), API->GetMainWindow(), ConfigureDialogProc, (LPARAM)configData) == IDOK)

	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	test	eax, eax
	sete	al
	mov	BYTE PTR [esi+1680], al
	mov	BYTE PTR [esi+1681], cl
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+92]
	push	esi
	call	edx
	push	eax
	call	_IsolationAwareDialogBoxParamW@20
	cmp	eax, 1
	jne	SHORT $LN1@ConfigureD@2

; 1258 :     {
; 1259 :         element->SetInt(TEXT("cx"), data->GetInt(TEXT("resolutionWidth")));

	push	0
	push	OFFSET $SG-8178
	mov	ecx, edi
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG-8179
	mov	ecx, ebx
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1260 :         element->SetInt(TEXT("cy"), data->GetInt(TEXT("resolutionHeight")));

	push	0
	push	OFFSET $SG-8180
	mov	ecx, edi
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG-8181
	mov	ecx, ebx
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1261 : 
; 1262 :         delete configData;

	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax

; 1263 :         return true;

	mov	al, 1

; 1268 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN1@ConfigureD@2:

; 1264 :     }
; 1265 : 
; 1266 :     delete configData;

	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
$LN52@ConfigureD@2:

; 1267 :     return false;

	xor	al, al

; 1268 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z$0:
	mov	eax, DWORD PTR $T107451[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z ENDP	; ConfigureDShowSource
PUBLIC	_LoadPlugin
;	COMDAT xdata$x
; File c:\users\beeanyew\documents\github\obs\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$_LoadPlugin DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadPlugin$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadPlugin$1
__ehfuncinfo$_LoadPlugin DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_LoadPlugin
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File c:\users\beeanyew\documents\github\obs\dshowaudioplugin\dshowaudioplugin.cpp
xdata$x	ENDS
;	COMDAT _LoadPlugin
_TEXT	SEGMENT
_pluginStringFile$93199 = -20				; size = 8
$T107602 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_LoadPlugin PROC					; COMDAT

; 1284 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_LoadPlugin
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1285 :     InitVolumeControl(hinstMain);

	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?InitVolumeControl@@YAXPAUHINSTANCE__@@@Z

; 1286 :     InitVolumeMeter(hinstMain);

	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	ecx
	call	DWORD PTR __imp_?InitVolumeMeter@@YAXPAUHINSTANCE__@@@Z

; 1287 : 
; 1288 :     pluginLocale = new LocaleStringLookup;

	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	add	esp, 8
	push	12					; 0000000cH
	call	edx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR $T107602[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], ecx
	test	eax, eax
	je	SHORT $LN6@LoadPlugin
	mov	ecx, eax
	call	DWORD PTR __imp_??0LocaleStringLookup@@QAE@XZ
	jmp	SHORT $LN7@LoadPlugin
$LN6@LoadPlugin:
	xor	eax, eax
$LN7@LoadPlugin:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1289 : 
; 1290 :     if(!pluginLocale->LoadStringFile(TEXT("plugins/DShowAudioPlugin/locale/en.txt")))

	mov	edi, DWORD PTR __imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z
	push	0
	push	OFFSET $SG-8182
	mov	ecx, eax
	mov	DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A, eax ; pluginLocale
	call	edi
	mov	ebx, DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	test	eax, eax
	jne	SHORT $LN3@LoadPlugin

; 1291 :         AppWarning(TEXT("Could not open locale string file '%s'"), TEXT("plugins/DShowAudioPlugin/locale/en.txt"));

	push	OFFSET $SG-8183
	push	OFFSET $SG-8184
	call	ebx
	add	esp, 8
$LN3@LoadPlugin:

; 1292 : 
; 1293 :     if(scmpi(API->GetLanguage(), TEXT("en")) != 0)

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+88]
	push	OFFSET $SG-8185
	call	eax
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN2@LoadPlugin

; 1294 :     {
; 1295 :         String pluginStringFile;

	lea	ecx, DWORD PTR _pluginStringFile$93199[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1296 :         pluginStringFile << TEXT("plugins/DShowAudioPlugin/locale/") << API->GetLanguage() << TEXT(".txt");

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+88]
	push	OFFSET $SG-8187
	call	eax
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	push	eax
	push	OFFSET $SG-8186
	lea	ecx, DWORD PTR _pluginStringFile$93199[ebp]
	call	esi
	mov	ecx, eax
	call	esi
	mov	ecx, eax
	call	esi

; 1297 :         if(!pluginLocale->LoadStringFile(pluginStringFile))

	mov	ecx, DWORD PTR _pluginStringFile$93199[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	call	edi
	test	eax, eax
	jne	SHORT $LN1@LoadPlugin

; 1298 :             AppWarning(TEXT("Could not open locale string file '%s'"), pluginStringFile.Array());

	mov	edx, DWORD PTR _pluginStringFile$93199[ebp]
	push	edx
	push	OFFSET $SG-8188
	call	ebx
	add	esp, 8
$LN1@LoadPlugin:

; 1299 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pluginStringFile$93199[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN2@LoadPlugin:

; 1300 : 
; 1301 :     API->RegisterImageSourceClass(DSHOW_CLASSNAME, PluginStr("ClassName"), (OBSCREATEPROC)CreateDShowSource, (OBSCONFIGPROC)ConfigureDShowSource);

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	mov	edi, DWORD PTR [esi]
	push	OFFSET ?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z ; ConfigureDShowSource
	push	OFFSET ?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateDShowSource
	push	OFFSET $SG-8189
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	edx, DWORD PTR [edi+20]
	push	eax
	push	OFFSET $SG-8190
	mov	ecx, esi
	call	edx

; 1302 : 
; 1303 :     return true;

	mov	al, 1

; 1304 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_LoadPlugin$0:
	mov	eax, DWORD PTR $T107602[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$_LoadPlugin$1:
	lea	ecx, DWORD PTR _pluginStringFile$93199[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$_LoadPlugin:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_LoadPlugin
	jmp	___CxxFrameHandler3
text$x	ENDS
_LoadPlugin ENDP
; Function compile flags: /Ogtp
;	COMDAT ??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ
text$yd	SEGMENT
??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ PROC ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData'', COMDAT
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN7@dynamic
	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, ebx
$LN7@dynamic:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4
	cmp	eax, ebx
	je	SHORT $LN6@dynamic
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, ebx
$LN6@dynamic:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8
	cmp	eax, ebx
	je	SHORT $LN10@dynamic
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, ebx
$LN10@dynamic:
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, bl
	pop	ebx
	ret	0
??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ENDP ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData''
text$yd	ENDS
END
