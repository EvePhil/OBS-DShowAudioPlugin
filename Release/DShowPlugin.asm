; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Installs\OBS\gitshit\DShowPlugin\DShowPlugin.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@		; `string'
PUBLIC	??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
PUBLIC	?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
PUBLIC	?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
PUBLIC	?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
PUBLIC	?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
PUBLIC	?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
PUBLIC	?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn
PUBLIC	?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z	; List<MediaOutputInfo>::SetSize
PUBLIC	?CreateNew@?$List@UMediaOutputInfo@@@@QAEPAUMediaOutputInfo@@XZ ; List<MediaOutputInfo>::CreateNew
PUBLIC	?CloseDouble@@YAHNNN@Z				; CloseDouble
PUBLIC	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
PUBLIC	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
PUBLIC	??0?$List@UFPSInterval@@@@QAE@XZ		; List<FPSInterval>::List<FPSInterval>
PUBLIC	??0FPSInfo@@QAE@XZ				; FPSInfo::FPSInfo
PUBLIC	??1?$List@UFPSInterval@@@@QAE@XZ		; List<FPSInterval>::~List<FPSInterval>
PUBLIC	??1FPSInfo@@QAE@XZ				; FPSInfo::~FPSInfo
PUBLIC	??A?$List@UtagSIZE@@@@QBEAAUtagSIZE@@I@Z	; List<tagSIZE>::operator[]
PUBLIC	?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z ; ResolutionListHasValue
PUBLIC	?Num@?$List@UtagSIZE@@@@QBEIXZ			; List<tagSIZE>::Num
PUBLIC	?Add@?$List@UtagSIZE@@@@QAEIABUtagSIZE@@@Z	; List<tagSIZE>::Add
PUBLIC	??6?$List@UtagSIZE@@@@QAEAAV0@ABUtagSIZE@@@Z	; List<tagSIZE>::operator<<
PUBLIC	??A?$List@UtagSIZE@@@@QAEAAUtagSIZE@@I@Z	; List<tagSIZE>::operator[]
PUBLIC	?mswap@@YGXPAXPBXI@Z				; mswap
PUBLIC	?SwapValues@?$List@UtagSIZE@@@@QAEXII@Z		; List<tagSIZE>::SwapValues
PUBLIC	?GetResolutions@ConfigDialogData@@QAEXAAV?$List@UtagSIZE@@@@@Z ; ConfigDialogData::GetResolutions
PUBLIC	??0FPSInterval@@QAE@_K0@Z			; FPSInterval::FPSInterval
PUBLIC	?Num@?$List@UFPSInterval@@@@QBEIXZ		; List<FPSInterval>::Num
PUBLIC	?Clear@?$List@UFPSInterval@@@@QAEXXZ		; List<FPSInterval>::Clear
PUBLIC	?Add@?$List@UFPSInterval@@@@QAEIABUFPSInterval@@@Z ; List<FPSInterval>::Add
PUBLIC	??6?$List@UFPSInterval@@@@QAEAAV0@ABUFPSInterval@@@Z ; List<FPSInterval>::operator<<
PUBLIC	?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z ; ConfigDialogData::GetResolutionFPSInfo
PUBLIC	??0ColorSelectionData@@QAE@XZ			; ColorSelectionData::ColorSelectionData
PUBLIC	?Init@ColorSelectionData@@QAE_NXZ		; ColorSelectionData::Init
PUBLIC	?nop@@YAXXZ					; nop
PUBLIC	?GetColor@ColorSelectionData@@QAEKXZ		; ColorSelectionData::GetColor
PUBLIC	?Clear@ColorSelectionData@@QAEXXZ		; ColorSelectionData::Clear
PUBLIC	??1ColorSelectionData@@QAE@XZ			; ColorSelectionData::~ColorSelectionData
PUBLIC	??0?$List@W4VideoOutputType@@@@QAE@XZ		; List<enum VideoOutputType>::List<enum VideoOutputType>
PUBLIC	?Clear@?$List@W4VideoOutputType@@@@QAEXXZ	; List<enum VideoOutputType>::Clear
PUBLIC	??1?$List@W4VideoOutputType@@@@QAE@XZ		; List<enum VideoOutputType>::~List<enum VideoOutputType>
PUBLIC	?Num@?$List@W4VideoOutputType@@@@QBEIXZ		; List<enum VideoOutputType>::Num
PUBLIC	??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z ; List<enum VideoOutputType>::operator[]
PUBLIC	_IsolationAwareCreateActCtxW@4
PUBLIC	_IsolationAwareActivateActCtx@8
PUBLIC	_IsolationAwareFindActCtxSectionStringW@20
PUBLIC	_IsolationAwareQueryActCtxW@28
PUBLIC	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
PUBLIC	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
PUBLIC	_IsolationAwarePrivatezltRgCebPnQQeRff@12
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
PUBLIC	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
PUBLIC	_IsolationAwareDeactivateActCtx@8
PUBLIC	_IsolationAwareDialogBoxParamW@20
PUBLIC	??0?$List@UtagSIZE@@@@QAE@XZ			; List<tagSIZE>::List<tagSIZE>
PUBLIC	??0ConfigDialogData@@QAE@XZ			; ConfigDialogData::ConfigDialogData
PUBLIC	?Clear@?$List@UtagSIZE@@@@QAEXXZ		; List<tagSIZE>::Clear
PUBLIC	??1?$List@UtagSIZE@@@@QAE@XZ			; List<tagSIZE>::~List<tagSIZE>
PUBLIC	?ClearOutputList@ConfigDialogData@@QAEXXZ	; ConfigDialogData::ClearOutputList
PUBLIC	??1ConfigDialogData@@QAE@XZ			; ConfigDialogData::~ConfigDialogData
PUBLIC	??_GConfigDialogData@@QAEPAXI@Z			; ConfigDialogData::`scalar deleting destructor'
PUBLIC	??0DeviceSource@@QAE@XZ				; DeviceSource::DeviceSource
PUBLIC	??_GLocaleStringLookup@@QAEPAXI@Z		; LocaleStringLookup::`scalar deleting destructor'
PUBLIC	??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@		; `string'
PUBLIC	??_C@_0P@CECBPMJL@ActivateActCtx?$AA@		; `string'
PUBLIC	??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@	; `string'
PUBLIC	??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ ; `string'
PUBLIC	??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@		; `string'
PUBLIC	??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@		; `string'
PUBLIC	??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@	; `string'
PUBLIC	??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
PUBLIC	?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
PUBLIC	?pluginLocale@@3PAVLocaleStringLookup@@A	; pluginLocale
PUBLIC	?hinstMain@@3PAUHINSTANCE__@@A			; hinstMain
PUBLIC	?lpExceptionNames@@3PAPB_WA			; lpExceptionNames
PUBLIC	?lpExceptionGUIDs@@3PAPB_WA			; lpExceptionGUIDs
PUBLIC	??_R0?AUtagSIZE@@@8				; tagSIZE `RTTI Type Descriptor'
PUBLIC	??_R0?AUFPSInterval@@@8				; FPSInterval `RTTI Type Descriptor'
PUBLIC	??_R0?AW4VideoOutputType@@@8			; enum VideoOutputType `RTTI Type Descriptor'
EXTRN	__imp_?GetElementByID@XElement@@QBEPAV1@K@Z:PROC
EXTRN	__imp_?NumElements@XElement@@QAEKPB_W@Z:PROC
EXTRN	__imp_?tstring_base_to_uint@@YAIPB_WPAPA_WH@Z:PROC
EXTRN	__imp_?Left@String@@QAE?AV1@I@Z:PROC
EXTRN	__imp_?Mid@String@@QAE?AV1@II@Z:PROC
EXTRN	__imp_?Right@String@@QAE?AV1@I@Z:PROC
EXTRN	__imp_?Length@String@@QBEIXZ:PROC
EXTRN	__imp__VariantInit@4:PROC
EXTRN	_IID_IKsPropertySet:BYTE
EXTRN	_AMPROPSETID_Pin:BYTE
EXTRN	_FORMAT_VideoInfo2:BYTE
EXTRN	__imp_?Clear@StringList@@QAEXXZ:PROC
EXTRN	__imp_?Add@StringList@@QAEIABVString@@@Z:PROC
EXTRN	__imp_?Add@StringList@@QAEIPB_W@Z:PROC
EXTRN	__imp_?FindNextValueIndexI@StringList@@QBEIABVString@@I@Z:PROC
EXTRN	_IID_IPropertyBag:BYTE
EXTRN	_IID_ICreateDevEnum:BYTE
EXTRN	_CLSID_SystemDeviceEnum:BYTE
EXTRN	__imp_?ValidIntString@@YGHPB_W@Z:PROC
EXTRN	__imp_?NumTokens@String@@QBEH_W@Z:PROC
EXTRN	__imp_?GetToken@String@@QBE?AV1@H_W@Z:PROC
EXTRN	__imp_?ToInt@String@@QBEHH@Z:PROC
EXTRN	_IID_ISpecifyPropertyPages:BYTE
EXTRN	__imp__OleCreatePropertyFrame@44:PROC
EXTRN	_atexit:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__IsWindowEnabled@4:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__LoadImageW@24:PROC
EXTRN	__imp_?schr@@YGPA_WPB_W_W@Z:PROC
EXTRN	__imp_?ValidFloatString@@YGHPB_W@Z:PROC
EXTRN	__imp_??8String@@QBEHPB_W@Z:PROC
EXTRN	__imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z:PROC
EXTRN	__imp_?ToFloat@String@@QBEMXZ:PROC
EXTRN	__imp_?Num@?$List@VString@@@@QBEIXZ:PROC
EXTRN	__imp_??A?$List@VString@@@@QAEAAVString@@I@Z:PROC
EXTRN	__imp_?Last@?$List@VString@@@@QBEAAVString@@XZ:PROC
EXTRN	__imp_?UIntString@@YA?AVString@@IH@Z:PROC
EXTRN	__imp_?IntString@@YA?AVString@@HH@Z:PROC
EXTRN	__imp_?FloatString@@YA?AVString@@N@Z:PROC
EXTRN	__imp_?SetString@XElement@@QAEXPB_W0@Z:PROC
EXTRN	__imp_?SetFloat@XElement@@QAEXPB_WM@Z:PROC
EXTRN	__imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z:PROC
EXTRN	__imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z:PROC
EXTRN	__imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z:PROC
EXTRN	__imp_?GetSource@SceneItem@@QBEPAVImageSource@@XZ:PROC
EXTRN	__imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z:PROC
EXTRN	__imp_?CCGetColor@@YAKPAUHWND__@@@Z:PROC
EXTRN	__imp_?CCSetColor@@YAXPAUHWND__@@K@Z:PROC
EXTRN	__imp_?SetVolumeControlValue@@YAMPAUHWND__@@M@Z:PROC
EXTRN	__imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z:PROC
EXTRN	_AM_KSCATEGORY_CROSSBAR:BYTE
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__GetDIBits@28:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetVersion@0:PROC
EXTRN	__imp__GetFileAttributesW@4:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp_?GetName@XBaseItem@@QBEPB_WXZ:PROC
EXTRN	__imp_?SetInt@XElement@@QAEXPB_WH@Z:PROC
EXTRN	__imp_?GetElement@XElement@@QBEPAV1@PB_W@Z:PROC
EXTRN	__imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z:PROC
EXTRN	__imp_?GetParent@XElement@@QBEPAV1@XZ:PROC
EXTRN	__imp_??0StringList@@QAE@XZ:PROC
EXTRN	__imp_??1StringList@@QAE@XZ:PROC
EXTRN	__imp_??0ImageSource@@QAE@XZ:PROC
EXTRN	__imp_??0LocaleStringLookup@@QAE@XZ:PROC
EXTRN	__imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z:PROC
EXTRN	__imp_?InitColorControl@@YAXPAUHINSTANCE__@@@Z:PROC
EXTRN	__imp_?InitVolumeControl@@YAXPAUHINSTANCE__@@@Z:PROC
EXTRN	__imp_?InitVolumeMeter@@YAXPAUHINSTANCE__@@@Z:PROC
EXTRN	__imp_??1LocaleStringLookup@@QAE@XZ:PROC
EXTRN	__imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z:PROC
;	COMDAT ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA DD 01H DUP (?) ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
_BSS	ENDS
;	COMDAT ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA
_BSS	SEGMENT
?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA DD 01H DUP (?) ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
_BSS	ENDS
;	COMDAT ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A
_BSS	SEGMENT
?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA DD 01H DUP (?) ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA DD 01H DUP (?) ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA DD 01H DUP (?) ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA DD 01H DUP (?) ; `IsolationAwareActivateActCtx'::`2'::s_pfn
?pluginLocale@@3PAVLocaleStringLookup@@A DD 01H DUP (?)	; pluginLocale
?hinstMain@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hinstMain
;	COMDAT ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureDialogProc'::`2'::bSelectingColor
_BSS	ENDS
;	COMDAT ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureDialogProc'::`2'::bMouseDown
;	COMDAT ??_R0?AW4VideoOutputType@@@8
_DATA	SEGMENT
??_R0?AW4VideoOutputType@@@8 DD FLAT:??_7type_info@@6B@	; enum VideoOutputType `RTTI Type Descriptor'
	DD	00H
	DB	'.?AW4VideoOutputType@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUFPSInterval@@@8
_DATA	SEGMENT
??_R0?AUFPSInterval@@@8 DD FLAT:??_7type_info@@6B@	; FPSInterval `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUFPSInterval@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUtagSIZE@@@8
_DATA	SEGMENT
??_R0?AUtagSIZE@@@8 DD FLAT:??_7type_info@@6B@		; tagSIZE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUtagSIZE@@', 00H
?lpExceptionNames@@3PAPB_WA DD FLAT:$SG-8156		; lpExceptionNames
?lpExceptionGUIDs@@3PAPB_WA DD FLAT:$SG-8157		; lpExceptionGUIDs
;	COMDAT ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
CONST	SEGMENT
?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B DD FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
	DD	FLAT:??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	DD	FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
	DD	FLAT:??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	ENDS
;	COMDAT ??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	SEGMENT
??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@ DB 'Kernel32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB
CONST	SEGMENT
?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB DB 'Iso'
	DB	'lationAware function called after IsolationAwareCleanup', 0aH
	DB	00H						; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
CONST	ENDS
;	COMDAT ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'c', 00H, 't', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
CONST	SEGMENT
??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@ DB 'GetModuleHandleExW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@
CONST	SEGMENT
??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@ DB 'Unicows.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@ DB '?'
	DB	00H, '?', 00H, '?', 00H, '.', 00H, '?', 00H, '?', 00H, '?', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
CONST	SEGMENT
??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@ DB 'QueryActCtxW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
CONST	SEGMENT
??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ DB 'FindActCtxSectionStr'
	DB	'ingW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
CONST	SEGMENT
??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@ DB 'DeactivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
CONST	SEGMENT
??_C@_0P@CECBPMJL@ActivateActCtx?$AA@ DB 'ActivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
CONST	SEGMENT
??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@ DB 'CreateActCtxW', 00H ; `string'
$SG-8125 DB	00H
	ORG $+2
$SG-8126 DB	00H, 00H
	ORG $+2
$SG-8127 DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8128 DB	'R', 00H, 'G', 00H, 'B', 00H, '2', 00H, '4', 00H, 00H, 00H
$SG-8129 DB	'R', 00H, 'G', 00H, 'B', 00H, '3', 00H, '2', 00H, 00H, 00H
$SG-8130 DB	'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG-8131 DB	'I', 00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG-8132 DB	'Y', 00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG-8133 DB	'Y', 00H, '4', 00H, '1', 00H, 'P', 00H, 00H, 00H
	ORG $+2
$SG-8134 DB	'Y', 00H, 'V', 00H, 'U', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG-8135 DB	'Y', 00H, 'V', 00H, 'Y', 00H, 'U', 00H, 00H, 00H
	ORG $+2
$SG-8136 DB	'Y', 00H, 'U', 00H, 'Y', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG-8137 DB	'U', 00H, 'Y', 00H, 'V', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG-8138 DB	'H', 00H, 'D', 00H, 'Y', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG-8139 DB	'M', 00H, 'P', 00H, 'E', 00H, 'G', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG-8140 DB	'H', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG-8141 DB	'd', 00H, 'v', 00H, 's', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG-8142 DB	'd', 00H, 'v', 00H, 's', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8143 DB	'd', 00H, 'v', 00H, 'h', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8144 DB	'M', 00H, 'J', 00H, 'P', 00H, 'G', 00H, 00H, 00H
	ORG $+2
_EnumToName DD	FLAT:$SG-8127
	DD	FLAT:$SG-8128
	DD	FLAT:$SG-8129
	DD	FLAT:$SG-8130
	DD	FLAT:$SG-8131
	DD	FLAT:$SG-8132
	DD	FLAT:$SG-8133
	DD	FLAT:$SG-8134
	DD	FLAT:$SG-8135
	DD	FLAT:$SG-8136
	DD	FLAT:$SG-8137
	DD	FLAT:$SG-8138
	DD	FLAT:$SG-8139
	DD	FLAT:$SG-8140
	DD	FLAT:$SG-8141
	DD	FLAT:$SG-8142
	DD	FLAT:$SG-8143
	DD	FLAT:$SG-8144
$SG-8145 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
$SG-8146 DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG-8147 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8148 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8149 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8150 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG-8151 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG-8152 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8160 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8153 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-8163 DB	')', 00H, 00H, 00H
$SG-8154 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'E', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '-', 00H, '>', 00H, 'C', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H
$SG-8165 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8155 DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 'B', 00H, 'y', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, '-', 00H, '>', 00H, 'B', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'T', 00H, 'o', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+2
$SG-8156 DB	'E', 00H, 'l', 00H, 'g', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'C'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'H', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG-8166 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG-8157 DB	'{', 00H, '3', 00H, '9', 00H, 'F', 00H, '5', 00H, '0', 00H
	DB	'F', 00H, '4', 00H, 'C', 00H, '-', 00H, '9', 00H, '9', 00H, 'E'
	DB	00H, '1', 00H, '-', 00H, '4', 00H, '6', 00H, '4', 00H, 'a', 00H
	DB	'-', 00H, 'B', 00H, '6', 00H, 'F', 00H, '9', 00H, '-', 00H, 'D'
	DB	00H, '6', 00H, '0', 00H, '5', 00H, 'B', 00H, '4', 00H, 'F', 00H
	DB	'B', 00H, '5', 00H, '9', 00H, '1', 00H, '8', 00H, '}', 00H, 00H
	DB	00H
	ORG $+2
$SG-8158 DB	'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'o', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l'
	DB	00H, 'X', 00H, 00H, 00H
$SG-8159 DB	'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'D', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'C'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'E', 00H, 'n', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG-8161 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8162 DB	' ', 00H, '(', 00H, 00H, 00H
	ORG $+2
$SG-8164 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8167 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-8168 DB	'd', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 00H, 00H
$SG-8169 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-8170 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8171 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8172 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H
$SG-8173 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8174 DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'I', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 00H, 00H
$SG-8175 DB	'c', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG-8176 DB	'x', 00H, 00H, 00H
$SG-8177 DB	'u', 00H, 's', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8178 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-8179 DB	'f', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'A', 00H, 'u'
	DB	00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8180 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8181 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8182 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8183 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG-8184 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG-8185 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8186 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8187 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8188 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8189 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8190 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8191 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8192 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG-8193 DB	'f', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'A', 00H, 'u'
	DB	00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8194 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG-8195 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-8196 DB	't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8197 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-8198 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG-8199 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8200 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8201 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8202 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8203 DB	'x', 00H, 00H, 00H
$SG-8204 DB	'x', 00H, 00H, 00H
$SG-8205 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG-8206 DB	'F', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'l', 00H, 'y', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG-8207 DB	'M', 00H, 'e', 00H, 'h', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG-8208 DB	'A', 00H, 'u', 00H, 'h', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG-8209 DB	'0', 00H, 00H, 00H
$SG-8210 DB	'-', 00H, 00H, 00H
$SG-8211 DB	'p', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, 00H, 00H
$SG-8212 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'I', 00H, 'n', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 00H, 00H
$SG-8213 DB	'0', 00H, 00H, 00H
$SG-8214 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'U', 00H, 'n', 00H, 's', 00H
	DB	'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8215 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'G', 00H, 'l', 00H, 'o', 00H
	DB	'b', 00H, 'a', 00H, 'l', 00H, 'E', 00H, 'x', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG-8216 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'E', 00H, 'x', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 's', 00H, 'S', 00H, 'o', 00H, 'm', 00H, 'e'
	DB	00H, 'w', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 00H, 00H
$SG-8217 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'E', 00H, 'x', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 's', 00H, 'I', 00H, 'n', 00H, 'S', 00H, 'c'
	DB	00H, 'e', 00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG-8218 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8219 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8220 DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'I', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG-8221 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG-8222 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'N', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8223 DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'I', 00H, 'D'
	DB	00H, 00H, 00H
$SG-8224 DB	'd', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'w', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 00H, 00H
$SG-8225 DB	'c', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG-8226 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H
$SG-8227 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8228 DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'I', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 00H, 00H
$SG-8229 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG-8230 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-8231 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-8232 DB	'u', 00H, 's', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8233 DB	'p', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, 00H, 00H
$SG-8234 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG-8235 DB	'f', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'A', 00H, 'u'
	DB	00H, 'd', 00H, 'i', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG-8236 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8237 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8238 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8239 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG-8240 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG-8241 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8242 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8243 DB	's', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 00H, 00H
$SG-8244 DB	't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8245 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8246 DB	'v', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG-8247 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG-8248 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG-8249 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-8250 DB	'f', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'l', 00H
	DB	00H, 00H
$SG-8251 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-8252 DB	'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG-8253 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8254 DB	'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H
	DB	00H
	ORG $+2
$SG-8255 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG-8256 DB	'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG-8257 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG-8258 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG-8259 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8260 DB	'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG-8261 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8262 DB	'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'p', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'R', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG-8264 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8263 DB	'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o'
	DB	00H, 'w', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, ':', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, ' ', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8265 DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG-8266 DB	'g', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG-8267 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H
$SG-8268 DB	'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG-8269 DB	'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'H', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8270 DB	'c', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG-8271 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'/', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e'
	DB	00H, '/', 00H, 'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H
$SG-8276 DB	'.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG-8272 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'/', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e'
	DB	00H, '/', 00H, 'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H
$SG-8278 DB	'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8273 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG-8274 DB	'e', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG-8275 DB	'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, '/', 00H, 'D', 00H, 'S', 00H, 'h', 00H, 'o', 00H, 'w'
	DB	00H, 'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'/', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e'
	DB	00H, '/', 00H, 00H, 00H
$SG-8277 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG-8279 DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
$SG-8280 DB	'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'.', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG-8281 DB	'P', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'.', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\utility\template.h
;	COMDAT ??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z
_TEXT	SEGMENT
??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z PROC ; List<enum VideoOutputType>::operator[], COMDAT
; _this$ = esi
; _index$ = eax

; 375  :         assert(index < num);
; 376  :         if(index >= num) {CrashError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LN1@operator@2
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AW4VideoOutputType@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH

; 378  :     }

	ret	0
$LN1@operator@2:

; 377  :         return array[index];

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]

; 378  :     }

	ret	0
??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z ENDP ; List<enum VideoOutputType>::operator[]
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Num@?$List@W4VideoOutputType@@@@QBEIXZ
_TEXT	SEGMENT
?Num@?$List@W4VideoOutputType@@@@QBEIXZ PROC		; List<enum VideoOutputType>::Num, COMDAT
; _this$ = eax

; 37   :     inline unsigned int Num() const     {return num;}

	mov	eax, DWORD PTR [eax+4]
	ret	0
?Num@?$List@W4VideoOutputType@@@@QBEIXZ ENDP		; List<enum VideoOutputType>::Num
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$List@W4VideoOutputType@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@W4VideoOutputType@@@@QAE@XZ PROC		; List<enum VideoOutputType>::List<enum VideoOutputType>, COMDAT
; _this$ = eax

; 30   :     inline List() : array(NULL), num(0) {}

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$List@W4VideoOutputType@@@@QAE@XZ ENDP		; List<enum VideoOutputType>::List<enum VideoOutputType>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z
_TEXT	SEGMENT
??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z PROC	; List<FPSInterval>::operator[], COMDAT
; _this$ = esi
; _index$ = eax

; 375  :         assert(index < num);
; 376  :         if(index >= num) {CrashError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LN1@operator@3
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUFPSInterval@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH

; 378  :     }

	ret	0
$LN1@operator@3:

; 377  :         return array[index];

	shl	eax, 4
	add	eax, DWORD PTR [esi]

; 378  :     }

	ret	0
??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ENDP	; List<FPSInterval>::operator[]
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Num@?$List@UFPSInterval@@@@QBEIXZ
_TEXT	SEGMENT
?Num@?$List@UFPSInterval@@@@QBEIXZ PROC			; List<FPSInterval>::Num, COMDAT
; _this$ = eax

; 37   :     inline unsigned int Num() const     {return num;}

	mov	eax, DWORD PTR [eax+4]
	ret	0
?Num@?$List@UFPSInterval@@@@QBEIXZ ENDP			; List<FPSInterval>::Num
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$List@UFPSInterval@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@UFPSInterval@@@@QAE@XZ PROC			; List<FPSInterval>::List<FPSInterval>, COMDAT
; _this$ = eax

; 30   :     inline List() : array(NULL), num(0) {}

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$List@UFPSInterval@@@@QAE@XZ ENDP			; List<FPSInterval>::List<FPSInterval>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??A?$List@UtagSIZE@@@@QBEAAUtagSIZE@@I@Z
_TEXT	SEGMENT
??A?$List@UtagSIZE@@@@QBEAAUtagSIZE@@I@Z PROC		; List<tagSIZE>::operator[], COMDAT
; _this$ = esi
; _index$ = eax

; 382  :         assert(index < num);
; 383  :         if(index >= num) {CrashError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LN1@operator@4
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUtagSIZE@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH

; 385  :     }

	ret	0
$LN1@operator@4:

; 384  :         return array[index];

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]

; 385  :     }

	ret	0
??A?$List@UtagSIZE@@@@QBEAAUtagSIZE@@I@Z ENDP		; List<tagSIZE>::operator[]
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??A?$List@UtagSIZE@@@@QAEAAUtagSIZE@@I@Z
_TEXT	SEGMENT
??A?$List@UtagSIZE@@@@QAEAAUtagSIZE@@I@Z PROC		; List<tagSIZE>::operator[], COMDAT
; _this$ = esi
; _index$ = eax

; 375  :         assert(index < num);
; 376  :         if(index >= num) {CrashError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LN1@operator@5
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUtagSIZE@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH

; 378  :     }

	ret	0
$LN1@operator@5:

; 377  :         return array[index];

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]

; 378  :     }

	ret	0
??A?$List@UtagSIZE@@@@QAEAAUtagSIZE@@I@Z ENDP		; List<tagSIZE>::operator[]
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Num@?$List@UtagSIZE@@@@QBEIXZ
_TEXT	SEGMENT
?Num@?$List@UtagSIZE@@@@QBEIXZ PROC			; List<tagSIZE>::Num, COMDAT
; _this$ = eax

; 37   :     inline unsigned int Num() const     {return num;}

	mov	eax, DWORD PTR [eax+4]
	ret	0
?Num@?$List@UtagSIZE@@@@QBEIXZ ENDP			; List<tagSIZE>::Num
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0?$List@UtagSIZE@@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@UtagSIZE@@@@QAE@XZ PROC			; List<tagSIZE>::List<tagSIZE>, COMDAT
; _this$ = eax

; 30   :     inline List() : array(NULL), num(0) {}

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$List@UtagSIZE@@@@QAE@XZ ENDP			; List<tagSIZE>::List<tagSIZE>
_TEXT	ENDS
PUBLIC	_DllMain@12
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
_hInst$ = 8						; size = 4
_dwReason$ = 12						; size = 4
_lpBla$ = 16						; size = 4
_DllMain@12 PROC					; COMDAT

; 1920 : {

	push	ebp
	mov	ebp, esp

; 1921 :     if(dwReason == DLL_PROCESS_ATTACH)

	mov	eax, 1
	cmp	DWORD PTR _dwReason$[ebp], eax
	jne	SHORT $LN1@DllMain

; 1922 :         hinstMain = hInst;

	mov	ecx, DWORD PTR _hInst$[ebp]
	mov	DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A, ecx ; hinstMain
$LN1@DllMain:

; 1923 : 
; 1924 :     return TRUE;
; 1925 : }

	pop	ebp
	ret	12					; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
PUBLIC	_GetPluginDescription
; Function compile flags: /Ogtp
;	COMDAT _GetPluginDescription
_TEXT	SEGMENT
_GetPluginDescription PROC				; COMDAT

; 1915 :     return PluginStr("Plugin.Description");

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	OFFSET $SG-8281
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z

; 1916 : }

	ret	0
_GetPluginDescription ENDP
_TEXT	ENDS
PUBLIC	_GetPluginName
; Function compile flags: /Ogtp
;	COMDAT _GetPluginName
_TEXT	SEGMENT
_GetPluginName PROC					; COMDAT

; 1910 :     return PluginStr("Plugin.Name");

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	OFFSET $SG-8280
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z

; 1911 : }

	ret	0
_GetPluginName ENDP
_TEXT	ENDS
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0DeviceSource@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0DeviceSource@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0DeviceSource@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0DeviceSource@@QAE@XZ$6
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0DeviceSource@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0DeviceSource@@QAE@XZ PROC				; DeviceSource::DeviceSource, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0DeviceSource@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __imp_??_7ImageSource@@6B@
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edi, DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [esi], OFFSET ??_7DeviceSource@@6B@
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+76]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+84]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+92]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+100]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+108]
	call	edi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DeviceSource@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1ImageSource@@UAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$??0DeviceSource@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$??0DeviceSource@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0DeviceSource@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0DeviceSource@@QAE@XZ ENDP				; DeviceSource::DeviceSource
; Function compile flags: /Ogtp
;	COMDAT ?Clear@ColorSelectionData@@QAEXXZ
_TEXT	SEGMENT
?Clear@ColorSelectionData@@QAEXXZ PROC			; ColorSelectionData::Clear, COMDAT
; _this$ = esi

; 811  :         if(hdcDesktop)

	mov	eax, DWORD PTR [esi]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN3@Clear

; 812  :         {
; 813  :             ReleaseDC(NULL, hdcDesktop);

	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8

; 814  :             hdcDesktop = NULL;

	mov	DWORD PTR [esi], ebx
$LN3@Clear:

; 815  :         }
; 816  : 
; 817  :         if(hdcDestination)

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $LN2@Clear

; 818  :         {
; 819  :             DeleteDC(hdcDestination);

	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 820  :             hdcDestination = NULL;

	mov	DWORD PTR [esi+4], ebx
$LN2@Clear:

; 821  :         }
; 822  : 
; 823  :         if(hBitmap)

	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	je	SHORT $LN6@Clear

; 824  :         {
; 825  :             DeleteObject(hBitmap);

	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 826  :             hBitmap = NULL;

	mov	DWORD PTR [esi+8], ebx
$LN6@Clear:

; 827  :         }
; 828  : 
; 829  :         bValid = false;

	mov	BYTE PTR [esi+12], bl
	pop	ebx

; 830  :     }

	ret	0
?Clear@ColorSelectionData@@QAEXXZ ENDP			; ColorSelectionData::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Init@ColorSelectionData@@QAE_NXZ
_TEXT	SEGMENT
?Init@ColorSelectionData@@QAE_NXZ PROC			; ColorSelectionData::Init, COMDAT
; _this$ = esi

; 791  :         hdcDesktop = GetDC(NULL);

	push	0
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR [esi], eax

; 792  :         if(!hdcDesktop)

	test	eax, eax
	jne	SHORT $LN3@Init
$LN6@Init:

; 793  :             return false;

	xor	al, al

; 807  :     }

	ret	0
$LN3@Init:

; 794  : 
; 795  :         hdcDestination = CreateCompatibleDC(hdcDesktop);

	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR [esi+4], eax

; 796  :         if(!hdcDestination)

	test	eax, eax

; 797  :             return false;

	je	SHORT $LN6@Init

; 798  : 
; 799  :         hBitmap = CreateCompatibleBitmap(hdcDesktop, 1, 1);

	mov	eax, DWORD PTR [esi]
	push	1
	push	1
	push	eax
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
	mov	DWORD PTR [esi+8], eax

; 800  :         if(!hBitmap)

	test	eax, eax

; 801  :             return false;

	je	SHORT $LN6@Init

; 802  : 
; 803  :         SelectObject(hdcDestination, hBitmap);

	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	ecx
	call	DWORD PTR __imp__SelectObject@8

; 804  :         bValid = true;

	mov	BYTE PTR [esi+12], 1

; 805  : 
; 806  :         return true;

	mov	al, 1

; 807  :     }

	ret	0
?Init@ColorSelectionData@@QAE_NXZ ENDP			; ColorSelectionData::Init
_TEXT	ENDS
;	COMDAT ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
_BSS	SEGMENT
?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A DB 010H DUP (?) ; `ConfigureDialogProc'::`2'::colorData
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT ??1ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
??1ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::~ColorSelectionData, COMDAT

; 787  :     inline ~ColorSelectionData() {Clear();}

	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN5@ColorSelec
	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, ebx
$LN5@ColorSelec:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4
	cmp	eax, ebx
	je	SHORT $LN4@ColorSelec
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, ebx
$LN4@ColorSelec:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8
	cmp	eax, ebx
	je	SHORT $LN8@ColorSelec
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, ebx
$LN8@ColorSelec:
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, bl
	pop	ebx
	ret	0
??1ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::~ColorSelectionData
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
??0ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::ColorSelectionData, COMDAT
; _this$ = eax

; 786  :     inline ColorSelectionData() : hdcDesktop(NULL), hdcDestination(NULL), hBitmap(NULL), bValid(false) {}

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	BYTE PTR [eax+12], cl
	ret	0
??0ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::ColorSelectionData
_TEXT	ENDS
PUBLIC	?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z	; GetResolution
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
xdata$x	SEGMENT
__ehfuncinfo$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$4
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z
_TEXT	SEGMENT
$T102570 = -44						; size = 8
$T102569 = -44						; size = 8
_strCY$ = -36						; size = 8
_strCX$ = -28						; size = 8
_strResolution$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_resolution$ = 8					; size = 4
_bSelChange$ = 12					; size = 4
?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z PROC	; GetResolution, COMDAT
; _hwndResolution$ = ecx

; 751  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 752  :     String strResolution;

	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 753  :     if(bSelChange)

	cmp	DWORD PTR _bSelChange$[ebp], ebx
	je	SHORT $LN7@GetResolut

; 754  :         strResolution = GetCBText(hwndResolution);

	push	-1
	lea	eax, DWORD PTR $T102569[ebp]
	push	esi
	push	eax
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 755  :     else

	jmp	SHORT $LN30@GetResolut
$LN7@GetResolut:

; 756  :         strResolution = GetEditText(hwndResolution);

	lea	ecx, DWORD PTR $T102570[ebp]
	push	esi
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 2
$LN30@GetResolut:
	push	eax
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T102570[ebp]
	call	esi

; 757  : 
; 758  :     if(strResolution.NumTokens('x') != 2)

	push	120					; 00000078H
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	DWORD PTR __imp_?NumTokens@String@@QBEH_W@Z
	cmp	eax, 2

; 759  :         return false;

	jne	$LN31@GetResolut

; 760  : 
; 761  :     String strCX = strResolution.GetToken(0, 'x');

	mov	edi, DWORD PTR __imp_?GetToken@String@@QBE?AV1@H_W@Z
	push	120					; 00000078H
	push	ebx
	lea	edx, DWORD PTR _strCX$[ebp]
	push	edx
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 762  :     String strCY = strResolution.GetToken(1, 'x');

	push	120					; 00000078H
	push	1
	lea	eax, DWORD PTR _strCY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 763  : 
; 764  :     if(strCX.IsEmpty() || strCX.IsEmpty() || !ValidIntString(strCX) || !ValidIntString(strCY))

	mov	eax, DWORD PTR _strCX$[ebp]
	cmp	eax, ebx
	je	$LN3@GetResolut
	cmp	WORD PTR [eax], bx
	je	$LN3@GetResolut
	cmp	DWORD PTR _strCX$[ebp+4], ebx
	je	$LN3@GetResolut
	mov	edi, DWORD PTR __imp_?ValidIntString@@YGHPB_W@Z
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN3@GetResolut
	mov	ecx, DWORD PTR _strCY$[ebp]
	push	ecx
	call	edi
	test	eax, eax
	je	SHORT $LN3@GetResolut

; 766  : 
; 767  :     UINT cx = strCX.ToInt();

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _strCX$[ebp]
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z

; 768  :     UINT cy = strCY.ToInt();

	push	10					; 0000000aH
	lea	ecx, DWORD PTR _strCY$[ebp]
	mov	edi, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z

; 769  : 
; 770  :     if(cx < 32 || cy < 32 || cx > 4096 || cy > 4096)

	cmp	edi, 32					; 00000020H
	jb	SHORT $LN3@GetResolut
	cmp	eax, 32					; 00000020H
	jb	SHORT $LN3@GetResolut
	cmp	edi, 4096				; 00001000H
	ja	SHORT $LN3@GetResolut
	cmp	eax, 4096				; 00001000H
	ja	SHORT $LN3@GetResolut

; 771  :         return false;
; 772  : 
; 773  :     resolution.cx = cx;

	mov	ecx, DWORD PTR _resolution$[ebp]
	mov	DWORD PTR [ecx], edi

; 774  :     resolution.cy = cy;

	mov	DWORD PTR [ecx+4], eax

; 775  : 
; 776  :     return true;

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strCY$[ebp]
	call	esi
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strCX$[ebp]
	call	esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	esi
	mov	al, 1

; 777  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@GetResolut:

; 765  :         return false;

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strCY$[ebp]
	call	esi
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strCX$[ebp]
	call	esi
$LN31@GetResolut:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strResolution$[ebp]
	call	esi
	xor	al, al

; 777  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$0:
	lea	ecx, DWORD PTR _strResolution$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$1:
	lea	ecx, DWORD PTR $T102569[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$2:
	lea	ecx, DWORD PTR $T102570[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$3:
	lea	ecx, DWORD PTR _strCX$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z$4:
	lea	ecx, DWORD PTR _strCY$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z ENDP	; GetResolution
; Function compile flags: /Ogtp
;	COMDAT ??0FPSInterval@@QAE@_K0@Z
_TEXT	SEGMENT
_minVal$ = 8						; size = 8
_maxVal$ = 16						; size = 8
??0FPSInterval@@QAE@_K0@Z PROC				; FPSInterval::FPSInterval, COMDAT
; _this$ = eax

; 477  :     inline FPSInterval(UINT64 minVal, UINT64 maxVal) : minFrameInterval(minVal), maxFrameInterval(maxVal) {}

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _minVal$[ebp]
	mov	edx, DWORD PTR _minVal$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _maxVal$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _maxVal$[ebp+4]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	16					; 00000010H
??0FPSInterval@@QAE@_K0@Z ENDP				; FPSInterval::FPSInterval
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z PROC ; ResolutionListHasValue, COMDAT
; _resolutions$ = edi

; 458  : {

	push	ebp
	mov	ebp, esp

; 459  :     bool bHasResolution = false;
; 460  : 
; 461  :     for(UINT i=0; i<resolutions.Num(); i++)

	mov	eax, DWORD PTR [edi+4]
	push	esi
	xor	cl, cl
	xor	esi, esi
	test	eax, eax
	je	SHORT $LN15@Resolution
	push	ebx
	mov	ebx, DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 462  :     {
; 463  :         SIZE &testSize = resolutions[i];

	cmp	esi, eax
	jb	SHORT $LN9@Resolution
	push	esi
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUtagSIZE@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	ebx
	mov	eax, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@Resolution
$LN9@Resolution:

; 459  :     bool bHasResolution = false;
; 460  : 
; 461  :     for(UINT i=0; i<resolutions.Num(); i++)

	mov	eax, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+esi*8]

; 462  :     {
; 463  :         SIZE &testSize = resolutions[i];

$LN10@Resolution:

; 464  :         if(size.cx == testSize.cx && size.cy == testSize.cy)

	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN3@Resolution
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN13@Resolution
$LN3@Resolution:

; 459  :     bool bHasResolution = false;
; 460  : 
; 461  :     for(UINT i=0; i<resolutions.Num(); i++)

	mov	eax, DWORD PTR [edi+4]
	inc	esi
	cmp	esi, eax
	jb	SHORT $LN9@Resolution

; 467  :             break;
; 468  :         }
; 469  :     }
; 470  : 
; 471  :     return bHasResolution;

	pop	ebx
	xor	al, al
	pop	esi

; 472  : }

	pop	ebp
	ret	0
$LN13@Resolution:
	pop	ebx

; 465  :         {
; 466  :             bHasResolution = true;

	mov	al, 1
	pop	esi

; 472  : }

	pop	ebp
	ret	0
$LN15@Resolution:

; 467  :             break;
; 468  :         }
; 469  :     }
; 470  : 
; 471  :     return bHasResolution;

	mov	al, cl
	pop	esi

; 472  : }

	pop	ebp
	ret	0
?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z ENDP ; ResolutionListHasValue
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z	; GetExceptionDevice
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
xdata$x	SEGMENT
__ehfuncinfo$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$10
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
_TEXT	SEGMENT
_filter$ = -64						; size = 4
_strGUID$ = -60						; size = 8
$T102644 = -52						; size = 8
$T102643 = -52						; size = 8
$T102642 = -52						; size = 8
$T102641 = -52						; size = 8
$T102640 = -52						; size = 8
$T102639 = -52						; size = 8
$T102638 = -52						; size = 8
$T102637 = -52						; size = 8
$T102634 = -52						; size = 8
_GUIDData$ = -44					; size = 8
_targetGUID$ = -36					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_lpGUID$ = 8						; size = 4
?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z PROC	; GetExceptionDevice, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _lpGUID$[ebp]

; 110  :     String strGUID = lpGUID;

	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 111  :     if(strGUID.Length() != 38)

	cmp	DWORD PTR _strGUID$[ebp+4], 38		; 00000026H
	je	SHORT $LN5@GetExcepti

; 112  :         return NULL;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN58@GetExcepti
$LN5@GetExcepti:

; 113  : 
; 114  :     strGUID = strGUID.Mid(1, strGUID.Length()-1);

	mov	ebx, DWORD PTR __imp_?Mid@String@@QAE?AV1@II@Z
	push	37					; 00000025H
	push	1
	lea	eax, DWORD PTR $T102634[ebp]
	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T102634[ebp]
	call	edi

; 115  : 
; 116  :     StringList GUIDData;

	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 117  :     strGUID.GetTokenList(GUIDData, '-', FALSE);

	push	0
	push	45					; 0000002dH
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	DWORD PTR __imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z

; 118  : 
; 119  :     if (GUIDData.Num() != 5)

	cmp	DWORD PTR _GUIDData$[ebp+4], 5

; 120  :         return NULL;

	jne	$LN2@GetExcepti

; 121  : 
; 122  :     if (GUIDData[0].Length() != 8  ||
; 123  :         GUIDData[1].Length() != 4  ||
; 124  :         GUIDData[2].Length() != 4  ||
; 125  :         GUIDData[3].Length() != 4  ||
; 126  :         GUIDData[4].Length() != 12 )

	push	0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax+4]
	cmp	eax, 8
	jne	$LN2@GetExcepti
	push	1
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax+4]
	mov	esi, 4
	cmp	eax, esi
	jne	$LN2@GetExcepti
	push	2
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], esi
	jne	$LN2@GetExcepti
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], esi
	jne	$LN2@GetExcepti
	push	esi
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	cmp	DWORD PTR [eax+4], 12			; 0000000cH
	jne	$LN2@GetExcepti

; 129  :     }
; 130  : 
; 131  :     GUID targetGUID;
; 132  :     targetGUID.Data1 = (UINT)tstring_base_to_uint(GUIDData[0], NULL, 16);

	push	0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR __imp_?tstring_base_to_uint@@YAIPB_WPAPA_WH@Z
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 133  :     targetGUID.Data2 = (WORD)tstring_base_to_uint(GUIDData[1], NULL, 16);

	push	1
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	DWORD PTR _targetGUID$[ebp], eax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 134  :     targetGUID.Data3 = (WORD)tstring_base_to_uint(GUIDData[2], NULL, 16);

	push	2
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	WORD PTR _targetGUID$[ebp+4], ax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH

; 135  :     targetGUID.Data4[0] = (BYTE)tstring_base_to_uint(GUIDData[3].Left(2), NULL, 16);

	push	2
	lea	edx, DWORD PTR $T102637[ebp]
	push	edx
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	mov	WORD PTR _targetGUID$[ebp+6], ax
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Left@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+8], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102637[ebp]
	call	edi

; 136  :     targetGUID.Data4[1] = (BYTE)tstring_base_to_uint(GUIDData[3].Right(2), NULL, 16);

	push	2
	lea	eax, DWORD PTR $T102638[ebp]
	push	eax
	push	3
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Right@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+9], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102638[ebp]
	call	edi

; 137  :     targetGUID.Data4[2] = (BYTE)tstring_base_to_uint(GUIDData[4].Left(2), NULL, 16);

	push	2
	lea	ecx, DWORD PTR $T102639[ebp]
	push	ecx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Left@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+10], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102639[ebp]
	call	edi

; 138  :     targetGUID.Data4[3] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(2, 4), NULL, 16);

	push	4
	push	2
	lea	edx, DWORD PTR $T102640[ebp]
	push	edx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+11], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102640[ebp]
	call	edi

; 139  :     targetGUID.Data4[4] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(4, 6), NULL, 16);

	push	6
	push	4
	lea	eax, DWORD PTR $T102641[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+12], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102641[ebp]
	call	edi

; 140  :     targetGUID.Data4[5] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(6, 8), NULL, 16);

	push	8
	push	6
	lea	ecx, DWORD PTR $T102642[ebp]
	push	ecx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+13], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102642[ebp]
	call	edi

; 141  :     targetGUID.Data4[6] = (BYTE)tstring_base_to_uint(GUIDData[4].Mid(8, 10), NULL, 16);

	push	10					; 0000000aH
	push	8
	lea	edx, DWORD PTR $T102643[ebp]
	push	edx
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+14], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102643[ebp]
	call	edi

; 142  :     targetGUID.Data4[7] = (BYTE)tstring_base_to_uint(GUIDData[4].Right(2), NULL, 16);

	push	2
	lea	eax, DWORD PTR $T102644[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Right@String@@QAE?AV1@I@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR [eax]
	push	16					; 00000010H
	push	0
	push	eax
	call	esi
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _targetGUID$[ebp+15], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T102644[ebp]
	call	edi

; 143  : 
; 144  :     IBaseFilter *filter;
; 145  :     if(SUCCEEDED(CoCreateInstance(targetGUID, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&filter)))

	lea	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	push	OFFSET _IID_IBaseFilter
	push	1
	push	0
	lea	edx, DWORD PTR _targetGUID$[ebp]
	push	edx
	call	DWORD PTR __imp__CoCreateInstance@20
	test	eax, eax
	js	SHORT $LN2@GetExcepti

; 146  :         return filter;

	mov	esi, DWORD PTR _filter$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	edi
	mov	eax, esi
	jmp	SHORT $LN6@GetExcepti
$LN2@GetExcepti:

; 127  :     {
; 128  :         return NULL;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGUID$[ebp]
	call	edi
$LN58@GetExcepti:
	xor	eax, eax
$LN6@GetExcepti:

; 147  : 
; 148  :     return NULL;
; 149  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$0:
	lea	ecx, DWORD PTR _strGUID$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$1:
	lea	ecx, DWORD PTR $T102634[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$2:
	lea	ecx, DWORD PTR _GUIDData$[ebp]
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$3:
	lea	ecx, DWORD PTR $T102637[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$4:
	lea	ecx, DWORD PTR $T102638[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$5:
	lea	ecx, DWORD PTR $T102639[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$6:
	lea	ecx, DWORD PTR $T102640[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$7:
	lea	ecx, DWORD PTR $T102641[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$8:
	lea	ecx, DWORD PTR $T102642[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$9:
	lea	ecx, DWORD PTR $T102643[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z$10:
	lea	ecx, DWORD PTR $T102644[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ENDP	; GetExceptionDevice
PUBLIC	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z	; SourceListHasDevice
; Function compile flags: /Ogtp
;	COMDAT ?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z
_TEXT	SEGMENT
_numSources$ = -8					; size = 4
_i$88542 = -4						; size = 4
_lpDevice$ = 8						; size = 4
_sourceList$ = 12					; size = 4
?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z PROC	; SourceListHasDevice, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 39   :     UINT numSources = sourceList->NumElements();

	mov	ecx, DWORD PTR _sourceList$[ebp]
	push	ebx
	push	esi
	push	edi
	push	0
	call	DWORD PTR __imp_?NumElements@XElement@@QAEKPB_W@Z
	mov	DWORD PTR _numSources$[ebp], eax

; 40   :     for(UINT i=0; i<numSources; i++)

	mov	DWORD PTR _i$88542[ebp], 0
	test	eax, eax
	je	SHORT $LN4@SourceList
	mov	edi, DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	mov	ebx, DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	npad	2
$LL13@SourceList:

; 41   :     {
; 42   :         XElement *sourceElement = sourceList->GetElementByID(i);

	mov	eax, DWORD PTR _i$88542[ebp]
	mov	ecx, DWORD PTR _sourceList$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetElementByID@XElement@@QBEPAV1@K@Z

; 43   :         if(scmpi(sourceElement->GetString(TEXT("class")), DSHOW_CLASSNAME) == 0)

	push	OFFSET $SG-8145
	mov	esi, eax
	push	0
	push	OFFSET $SG-8146
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	jne	SHORT $LN5@SourceList

; 44   :         {
; 45   :             XElement *data = sourceElement->GetElement(TEXT("data"));

	push	OFFSET $SG-8147
	mov	ecx, esi
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 46   :             if(scmpi(data->GetString(TEXT("device")), lpDevice) == 0)

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	ecx
	mov	esi, eax
	push	0
	push	OFFSET $SG-8148
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN10@SourceList

; 48   :             if(scmpi(data->GetString(TEXT("audioDevice")), lpDevice) == 0)

	mov	edx, DWORD PTR _lpDevice$[ebp]
	push	edx
	push	0
	push	OFFSET $SG-8149
	mov	ecx, esi
	call	ebx
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN10@SourceList
$LN5@SourceList:

; 40   :     for(UINT i=0; i<numSources; i++)

	mov	eax, DWORD PTR _i$88542[ebp]
	inc	eax
	mov	DWORD PTR _i$88542[ebp], eax
	cmp	eax, DWORD PTR _numSources$[ebp]
	jb	SHORT $LL13@SourceList
$LN4@SourceList:
	pop	edi
	pop	esi

; 49   :                 return true;
; 50   :         }
; 51   :     }
; 52   : 
; 53   :     return false;

	xor	al, al
	pop	ebx

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@SourceList:
	pop	edi
	pop	esi

; 47   :                 return true;

	mov	al, 1
	pop	ebx

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ENDP	; SourceListHasDevice
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\apiinterface.h
_TEXT	ENDS
;	COMDAT ?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z
_TEXT	SEGMENT
_lpImageSource$ = 8					; size = 4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z PROC ; APIInterface::GetSceneImageSource, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp

; 131  :         Scene *scene = GetScene();

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+40]
	call	edx

; 132  :         if(scene)

	test	eax, eax
	je	SHORT $LN1@GetSceneIm

; 133  :         {
; 134  :             SceneItem *item = scene->GetSceneItem(lpImageSource);

	mov	ecx, DWORD PTR _lpImageSource$[ebp]
	push	ecx
	mov	ecx, eax
	call	DWORD PTR __imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z

; 135  :             if(item)

	test	eax, eax
	je	SHORT $LN1@GetSceneIm

; 136  :             {
; 137  :                 if(item->GetSource())

	mov	eax, DWORD PTR [eax+4]
	test	eax, eax

; 138  :                     return item->GetSource();

	jne	SHORT $LN4@GetSceneIm
$LN1@GetSceneIm:

; 139  :             }
; 140  :         }
; 141  : 
; 142  :         return NULL;

	xor	eax, eax
$LN4@GetSceneIm:

; 143  :     }

	pop	ebp
	ret	4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ENDP ; APIInterface::GetSceneImageSource
_TEXT	ENDS
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\obsapi.h
;	COMDAT ?CloseDouble@@YAHNNN@Z
_TEXT	SEGMENT
_f1$ = 8						; size = 8
_f2$ = 16						; size = 8
_precision$ = 24					; size = 8
?CloseDouble@@YAHNNN@Z PROC				; CloseDouble, COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp

; 100  :     return fabs(f1-f2) <= precision;

	fld	QWORD PTR _f1$[ebp]
	fsub	QWORD PTR _f2$[ebp]
	fabs
	fcomp	QWORD PTR _precision$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@CloseDoubl
	mov	eax, 1

; 101  : }

	pop	ebp
	ret	0
$LN3@CloseDoubl:

; 100  :     return fabs(f1-f2) <= precision;

	xor	eax, eax

; 101  : }

	pop	ebp
	ret	0
?CloseDouble@@YAHNNN@Z ENDP				; CloseDouble
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\utility\inline.h
_TEXT	ENDS
;	COMDAT ?nop@@YAXXZ
_TEXT	SEGMENT
?nop@@YAXXZ PROC					; nop, COMDAT

; 313  : }

	ret	0
?nop@@YAXXZ ENDP					; nop
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?mswap@@YGXPAXPBXI@Z
_TEXT	SEGMENT
?mswap@@YGXPAXPBXI@Z PROC				; mswap, COMDAT
; _pDest$ = ecx
; _pSrc$ = eax

; 261  : {

	push	esi

; 262  :     assert(pDest);
; 263  :     assert(pSrc);
; 264  : 
; 265  :     register size_t iLenMod4 = iLen&3;
; 266  :     register size_t iLenDiv4 = iLen>>2;

	mov	edx, 2

; 267  : 
; 268  :     register DWORD *srcDW = (DWORD*)pSrc, *destDW = (DWORD*)pDest;
; 269  :     while(iLenDiv4--)

	sub	ecx, eax
	push	edi
	npad	7
$LL4@mswap:

; 270  :     {
; 271  :         DWORD dw = *destDW;
; 272  :         *(destDW++) = *srcDW;

	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR [ecx+eax], edi

; 273  :         *(srcDW++) = dw;

	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL4@mswap

; 274  :     }
; 275  : 
; 276  :     register BYTE *srcB = (BYTE*)srcDW, *destB = (BYTE*)destDW;
; 277  :     while(iLenMod4--)
; 278  :     {
; 279  :         BYTE b = *destB;
; 280  :         *(destB++) = *srcB;
; 281  :         *(srcB++) = b;
; 282  :     }
; 283  : }

	pop	edi
	pop	esi
	ret	0
?mswap@@YGXPAXPBXI@Z ENDP				; mswap
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winbase.inl
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgCebPnQQeRff@12
_TEXT	SEGMENT
_IsolationAwarePrivatezltRgCebPnQQeRff@12 PROC		; COMDAT
; _ProcName$ = ebx

; 369  : {

	push	esi

; 370  :     FARPROC Proc = NULL;

	xor	esi, esi
	push	edi

; 371  :     HMODULE hModule;
; 372  : #ifdef _M_IX86
; 373  :     static HMODULE s_moduleUnicows;
; 374  :     static BOOL s_fUnicowsInitialized;
; 375  : 
; 376  :     /*
; 377  :        get unicows.dll loaded on-demand
; 378  :     */
; 379  :     if (!s_fUnicowsInitialized)

	cmp	DWORD PTR ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA, esi ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
	jne	SHORT $LN16@IsolationA

; 380  :     {
; 381  :         if ((GetVersion() & 0x80000000) != 0)

	call	DWORD PTR __imp__GetVersion@0
	test	eax, eax
	jns	SHORT $LN15@IsolationA

; 382  :         {
; 383  :             GetFileAttributesW(L"???.???");

	push	OFFSET ??_C@_1BA@KHFEOAHJ@?$AA?$DP?$AA?$DP?$AA?$DP?$AA?4?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$AA@
	call	DWORD PTR __imp__GetFileAttributesW@4

; 384  :             s_moduleUnicows = GetModuleHandleA("Unicows.dll");

	push	OFFSET ??_C@_0M@IFMOPPGK@Unicows?4dll?$AA@
	call	DWORD PTR __imp__GetModuleHandleA@4
	mov	DWORD PTR ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A, eax ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
$LN15@IsolationA:

; 385  :         }
; 386  :         s_fUnicowsInitialized = TRUE;

	mov	DWORD PTR ?s_fUnicowsInitialized@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4HA, 1 ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_fUnicowsInitialized
$LN16@IsolationA:

; 387  :     }
; 388  : 
; 389  :     /*
; 390  :        always call GetProcAddress(unicows) before the usual .dll
; 391  :     */
; 392  :     if (s_moduleUnicows != NULL)

	mov	eax, DWORD PTR ?s_moduleUnicows@?1??IsolationAwarePrivatezltRgCebPnQQeRff@@9@12@4PAUHINSTANCE__@@A ; `IsolationAwarePrivatezltRgCebPnQQeRff'::`2'::s_moduleUnicows
	mov	edi, DWORD PTR __imp__GetProcAddress@8
	test	eax, eax
	je	SHORT $LN17@IsolationA

; 393  :     {
; 394  :         Proc = GetProcAddress(s_moduleUnicows, ProcName);

	push	ebx
	push	eax
	call	edi
	mov	esi, eax

; 395  :         if (Proc != NULL)

	test	esi, esi
	jne	SHORT $LN14@IsolationA
$LN17@IsolationA:

; 396  :             goto Exit;
; 397  :     }
; 398  : #endif
; 399  :     hModule = m->WinbaseIsolationAwarePrivateybNQRQzbQhYR;

	mov	eax, DWORD PTR ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m

; 400  :     if (hModule == NULL)

	test	eax, eax
	jne	SHORT $LN3@IsolationA

; 401  :     {
; 402  : #ifdef _M_IX86
; 403  :         hModule = (((GetVersion() & 0x80000000) != 0) ? (*c->WinbaseIsolationAwarePrivateybNQn)(c->WinbaseIsolationAwarePrivateANZRn) : (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ));

	call	DWORD PTR __imp__GetVersion@0
	test	eax, eax
	jns	SHORT $LN11@IsolationA
	mov	eax, DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+12
	push	eax
	call	DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+8
	jmp	SHORT $LN12@IsolationA
$LN11@IsolationA:
	mov	ecx, DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B+4
	push	ecx
	call	DWORD PTR ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
$LN12@IsolationA:

; 404  : #else
; 405  :         hModule = (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ);
; 406  : #endif
; 407  :         if (hModule == NULL)

	test	eax, eax
	je	SHORT $LN14@IsolationA

; 408  :             goto Exit;
; 409  :         m->WinbaseIsolationAwarePrivateybNQRQzbQhYR = hModule;

	mov	DWORD PTR ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A, eax ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
$LN3@IsolationA:

; 410  :     }
; 411  :     Proc = GetProcAddress(hModule, ProcName);

	push	ebx
	push	eax
	call	edi
	pop	edi
	pop	esi

; 414  : }

	ret	0
$LN14@IsolationA:
	pop	edi

; 412  : Exit:
; 413  :     return Proc;

	mov	eax, esi
$Exit$15591:
	pop	esi

; 414  : }

	ret	0
_IsolationAwarePrivatezltRgCebPnQQeRff@12 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 PROC		; COMDAT

; 51   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRJ(__in PCWSTR s) { return GetModuleHandleW(s); }

	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	DWORD PTR __imp__GetModuleHandleW@4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 PROC		; COMDAT

; 48   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRn(__in PCSTR s) { return GetModuleHandleA(s); }

	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	DWORD PTR __imp__GetModuleHandleA@4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 ENDP
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@W4VideoOutputType@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$List@W4VideoOutputType@@@@QAEXXZ PROC		; List<enum VideoOutputType>::Clear, COMDAT
; _this$ = esi

; 330  :         if(array)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@Clear@2

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 335  :             array = NULL;

	mov	DWORD PTR [esi], 0

; 336  :             num = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@Clear@2:

; 337  :         }
; 338  :     }

	ret	0
?Clear@?$List@W4VideoOutputType@@@@QAEXXZ ENDP		; List<enum VideoOutputType>::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Add@?$List@UFPSInterval@@@@QAEIABUFPSInterval@@@Z
_TEXT	SEGMENT
?Add@?$List@UFPSInterval@@@@QAEIABUFPSInterval@@@Z PROC	; List<FPSInterval>::Add, COMDAT
; _this$ = esi
; _val$ = edi

; 41   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	inc	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	edx

; 42   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR [edi]
	add	ecx, ecx
	lea	eax, DWORD PTR [eax+ecx*8-16]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], ecx

; 43   :         return num-1;

	mov	eax, DWORD PTR [esi+4]
	dec	eax

; 44   :     }

	ret	0
?Add@?$List@UFPSInterval@@@@QAEIABUFPSInterval@@@Z ENDP	; List<FPSInterval>::Add
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Add@?$List@UtagSIZE@@@@QAEIABUtagSIZE@@@Z
_TEXT	SEGMENT
?Add@?$List@UtagSIZE@@@@QAEIABUtagSIZE@@@Z PROC		; List<tagSIZE>::Add, COMDAT
; _this$ = esi
; _val$ = edi

; 41   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	inc	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	edx

; 42   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	lea	eax, DWORD PTR [eax+ecx*8-8]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx

; 43   :         return num-1;

	mov	eax, DWORD PTR [esi+4]
	dec	eax

; 44   :     }

	ret	0
?Add@?$List@UtagSIZE@@@@QAEIABUtagSIZE@@@Z ENDP		; List<tagSIZE>::Add
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$List@W4VideoOutputType@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@W4VideoOutputType@@@@QAE@XZ PROC		; List<enum VideoOutputType>::~List<enum VideoOutputType>, COMDAT
; _this$ = esi

; 33   :         Clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@List
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN3@List:

; 34   :     }

	ret	0
??1?$List@W4VideoOutputType@@@@QAE@XZ ENDP		; List<enum VideoOutputType>::~List<enum VideoOutputType>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??6?$List@UFPSInterval@@@@QAEAAV0@ABUFPSInterval@@@Z
_TEXT	SEGMENT
??6?$List@UFPSInterval@@@@QAEAAV0@ABUFPSInterval@@@Z PROC ; List<FPSInterval>::operator<<, COMDAT
; _this$ = esi
; _val$ = edi

; 362  :         Add(val);

	inc	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR [edi]
	add	ecx, ecx
	lea	eax, DWORD PTR [eax+ecx*8-16]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], ecx

; 363  :         return *this;

	mov	eax, esi

; 364  :     }

	ret	0
??6?$List@UFPSInterval@@@@QAEAAV0@ABUFPSInterval@@@Z ENDP ; List<FPSInterval>::operator<<
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Clear@?$List@UFPSInterval@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$List@UFPSInterval@@@@QAEXXZ PROC		; List<FPSInterval>::Clear, COMDAT
; _this$ = esi

; 330  :         if(array)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@Clear@3

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 335  :             array = NULL;

	mov	DWORD PTR [esi], 0

; 336  :             num = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@Clear@3:

; 337  :         }
; 338  :     }

	ret	0
?Clear@?$List@UFPSInterval@@@@QAEXXZ ENDP		; List<FPSInterval>::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$List@UFPSInterval@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@UFPSInterval@@@@QAE@XZ PROC			; List<FPSInterval>::~List<FPSInterval>, COMDAT
; _this$ = esi

; 33   :         Clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@List@2
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN3@List@2:

; 34   :     }

	ret	0
??1?$List@UFPSInterval@@@@QAE@XZ ENDP			; List<FPSInterval>::~List<FPSInterval>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SwapValues@?$List@UtagSIZE@@@@QAEXII@Z
_TEXT	SEGMENT
?SwapValues@?$List@UtagSIZE@@@@QAEXII@Z PROC		; List<tagSIZE>::SwapValues, COMDAT
; _this$ = eax
; _valA$ = edx
; _valB$ = ecx

; 433  :     {

	push	esi
	mov	esi, edx

; 434  :         assert(valA < num && valB < num);
; 435  :         if(valA == valB || valA >= num || valB >= num)

	cmp	esi, ecx
	je	SHORT $LL6@SwapValues
	mov	edx, DWORD PTR [eax+4]
	cmp	esi, edx
	jae	SHORT $LL6@SwapValues
	cmp	ecx, edx
	jae	SHORT $LL6@SwapValues

; 436  :             return;
; 437  :         mswap(array+valA, array+valB, sizeof(T));

	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, 2
	lea	eax, DWORD PTR [eax+esi*8]
	push	edi
$LL8@SwapValues:
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [ecx], esi
	add	eax, 4
	add	ecx, 4
	dec	edx
	jne	SHORT $LL8@SwapValues
	pop	edi
$LL6@SwapValues:
	pop	esi

; 438  :     }

	ret	0
?SwapValues@?$List@UtagSIZE@@@@QAEXII@Z ENDP		; List<tagSIZE>::SwapValues
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??6?$List@UtagSIZE@@@@QAEAAV0@ABUtagSIZE@@@Z
_TEXT	SEGMENT
??6?$List@UtagSIZE@@@@QAEAAV0@ABUtagSIZE@@@Z PROC	; List<tagSIZE>::operator<<, COMDAT
; _this$ = esi
; _val$ = edi

; 362  :         Add(val);

	inc	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	mov	eax, DWORD PTR [esi]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	lea	eax, DWORD PTR [eax+ecx*8-8]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx

; 363  :         return *this;

	mov	eax, esi

; 364  :     }

	ret	0
??6?$List@UtagSIZE@@@@QAEAAV0@ABUtagSIZE@@@Z ENDP	; List<tagSIZE>::operator<<
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Clear@?$List@UtagSIZE@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$List@UtagSIZE@@@@QAEXXZ PROC			; List<tagSIZE>::Clear, COMDAT
; _this$ = esi

; 330  :         if(array)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@Clear@4

; 331  :         {
; 332  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 333  :                 CrashError(TEXT("what the.."));*/
; 334  :             Free(array);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 335  :             array = NULL;

	mov	DWORD PTR [esi], 0

; 336  :             num = 0;

	mov	DWORD PTR [esi+4], 0
$LN1@Clear@4:

; 337  :         }
; 338  :     }

	ret	0
?Clear@?$List@UtagSIZE@@@@QAEXXZ ENDP			; List<tagSIZE>::Clear
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1?$List@UtagSIZE@@@@QAE@XZ
_TEXT	SEGMENT
??1?$List@UtagSIZE@@@@QAE@XZ PROC			; List<tagSIZE>::~List<tagSIZE>, COMDAT
; _this$ = esi

; 33   :         Clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@List@3
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN3@List@3:

; 34   :     }

	ret	0
??1?$List@UtagSIZE@@@@QAE@XZ ENDP			; List<tagSIZE>::~List<tagSIZE>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FPSInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FPSInfo@@QAE@XZ$0
__ehfuncinfo$??1FPSInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1FPSInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1FPSInfo@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1FPSInfo@@QAE@XZ PROC					; FPSInfo::~FPSInfo, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FPSInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@FPSInfo
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN6@FPSInfo:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FPSInfo@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	jmp	??1?$List@UFPSInterval@@@@QAE@XZ	; List<FPSInterval>::~List<FPSInterval>
__ehhandler$??1FPSInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FPSInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FPSInfo@@QAE@XZ ENDP					; FPSInfo::~FPSInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FPSInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FPSInfo@@QAE@XZ$0
__ehfuncinfo$??0FPSInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FPSInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0FPSInfo@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0FPSInfo@@QAE@XZ PROC					; FPSInfo::FPSInfo, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FPSInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FPSInfo@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	jmp	??1?$List@UFPSInterval@@@@QAE@XZ	; List<FPSInterval>::~List<FPSInterval>
__ehhandler$??0FPSInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FPSInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FPSInfo@@QAE@XZ ENDP					; FPSInfo::FPSInfo
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
;	COMDAT ?GetColor@ColorSelectionData@@QAEKXZ
_TEXT	SEGMENT
_p$ = -60						; size = 8
_buffer$89412 = -52					; size = 4
_data$89408 = -48					; size = 44
__$ArrayPad$ = -4					; size = 4
?GetColor@ColorSelectionData@@QAEKXZ PROC		; ColorSelectionData::GetColor, COMDAT
; _this$ = esi

; 833  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 834  :         POINT p;
; 835  :         if(GetCursorPos(&p))

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	test	eax, eax
	je	$LN13@GetColor

; 836  :         {
; 837  :             BITMAPINFO data;
; 838  :             zero(&data, sizeof(data));
; 839  : 
; 840  :             data.bmiHeader.biSize = sizeof(data.bmiHeader);
; 841  :             data.bmiHeader.biWidth = 1;
; 842  :             data.bmiHeader.biHeight = 1;
; 843  :             data.bmiHeader.biPlanes = 1;
; 844  :             data.bmiHeader.biBitCount = 24;
; 845  :             data.bmiHeader.biCompression = BI_RGB;
; 846  :             data.bmiHeader.biSizeImage = 4;
; 847  : 
; 848  :             if(BitBlt(hdcDestination, 0, 0, 1, 1, hdcDesktop, p.x, p.y, SRCCOPY|CAPTUREBLT))

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [esi]
	xor	eax, eax
	push	1087111200				; 40cc0020H
	mov	DWORD PTR _data$89408[ebp+16], eax
	mov	DWORD PTR _data$89408[ebp], eax
	mov	DWORD PTR _data$89408[ebp+4], eax
	mov	DWORD PTR _data$89408[ebp+8], eax
	mov	DWORD PTR _data$89408[ebp+12], eax
	mov	DWORD PTR _data$89408[ebp+20], eax
	mov	DWORD PTR _data$89408[ebp+24], eax
	mov	DWORD PTR _data$89408[ebp+28], eax
	mov	DWORD PTR _data$89408[ebp+32], eax
	mov	DWORD PTR _data$89408[ebp+36], eax
	mov	DWORD PTR _data$89408[ebp+40], eax
	mov	DWORD PTR _data$89408[ebp+16], eax
	mov	eax, DWORD PTR _p$[ebp+4]
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	push	edx
	push	1
	push	1
	push	0
	push	0
	push	eax
	mov	DWORD PTR _data$89408[ebp], 40		; 00000028H
	mov	DWORD PTR _data$89408[ebp+4], 1
	mov	DWORD PTR _data$89408[ebp+8], 1
	mov	DWORD PTR _data$89408[ebp+12], 1572865	; 00180001H
	mov	DWORD PTR _data$89408[ebp+20], 4
	call	DWORD PTR __imp__BitBlt@36
	test	eax, eax
	je	SHORT $LN3@GetColor

; 849  :             {
; 850  :                 DWORD buffer;
; 851  :                 if(GetDIBits(hdcDestination, hBitmap, 0, 1, &buffer, &data, DIB_RGB_COLORS))

	mov	eax, DWORD PTR [esi+8]
	push	0
	lea	ecx, DWORD PTR _data$89408[ebp]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	lea	edx, DWORD PTR _buffer$89412[ebp]
	push	edx
	push	1
	push	0
	push	eax
	push	ecx
	call	DWORD PTR __imp__GetDIBits@28
	test	eax, eax
	je	SHORT $LN13@GetColor

; 852  :                     return 0xFF000000|buffer;

	mov	eax, DWORD PTR _buffer$89412[ebp]
	or	eax, -16777216				; ff000000H

; 858  :             }
; 859  :         }
; 860  : 
; 861  :         return 0xFF000000;
; 862  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@GetColor:

; 853  :             }
; 854  :             else
; 855  :             {
; 856  :                 int err = GetLastError();

	call	DWORD PTR __imp__GetLastError@0

; 857  :                 nop();

$LN13@GetColor:

; 858  :             }
; 859  :         }
; 860  : 
; 861  :         return 0xFF000000;
; 862  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	mov	eax, -16777216				; ff000000H
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetColor@ColorSelectionData@@QAEKXZ ENDP		; ColorSelectionData::GetColor
_TEXT	ENDS
PUBLIC	_deviceIDList$GSCopy$
PUBLIC	_hwndCombo$GSCopy$
PUBLIC	_matchGUID$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$2
__ehfuncinfo$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z
_TEXT	SEGMENT
_devicePathValue$89319 = -120				; size = 16
$T103382 = -104						; size = 8
_friendlyNameValue$89318 = -96				; size = 16
_strDeviceID$89339 = -80				; size = 8
_count$ = -72						; size = 4
_hwndCombo$GSCopy$ = -68				; size = 4
_strDeviceName$89328 = -64				; size = 8
_deviceIDList$GSCopy$ = -56				; size = 4
_videoDeviceEnum$ = -52					; size = 4
_filter$89324 = -48					; size = 4
_exceptionFilter$89291 = -48				; size = 4
_deviceEnum$ = -44					; size = 4
_propertyData$89314 = -40				; size = 4
_deviceInfo$ = -36					; size = 4
_matchGUID$GSCopy$ = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_matchGUID$ = 8						; size = 16
?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z PROC ; FillOutListOfDevices, COMDAT
; _hwndCombo$ = edx
; _deviceList$ = ebx
; _deviceIDList$ = ecx

; 649  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _matchGUID$[ebp]
	mov	esi, edx
	mov	edx, DWORD PTR _matchGUID$[ebp+4]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _matchGUID$[ebp+8]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+4], edx
	mov	edx, DWORD PTR _matchGUID$[ebp+12]

; 694  :         return;
; 695  : 
; 696  :     //------------------------------------------
; 697  : 
; 698  :     IMoniker *deviceInfo;
; 699  :     DWORD count;
; 700  : 
; 701  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	DWORD PTR _hwndCombo$GSCopy$[ebp], esi
	mov	DWORD PTR _deviceIDList$GSCopy$[ebp], ecx
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+8], eax
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+12], edx
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ
	mov	ecx, ebx
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ
	xor	edi, edi
	cmp	esi, edi
	je	SHORT $LN23@FillOutLis

; 650  :     deviceIDList->Clear();
; 651  :     deviceList->Clear();
; 652  :     if(hwndCombo != NULL) SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0);

	push	edi
	push	edi
	push	331					; 0000014bH
	push	esi
	call	DWORD PTR __imp__SendMessageW@16
$LN23@FillOutLis:

; 653  : 
; 654  :     //------------------------------------------
; 655  : 
; 656  :     for(int i=0; i<DEV_EXCEPTION_COUNT; i++)
; 657  :     {
; 658  :         IBaseFilter *exceptionFilter = GetExceptionDevice(lpExceptionGUIDs[i]);

	mov	eax, DWORD PTR ?lpExceptionGUIDs@@3PAPB_WA ; lpExceptionGUIDs
	push	eax
	call	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ; GetExceptionDevice
	add	esp, 4
	mov	DWORD PTR _exceptionFilter$89291[ebp], eax

; 659  :         if(exceptionFilter)

	cmp	eax, edi
	je	SHORT $LN21@FillOutLis

; 660  :         {
; 661  :             deviceList->Add(lpExceptionNames[i]);

	mov	ecx, DWORD PTR ?lpExceptionNames@@3PAPB_WA ; lpExceptionNames
	push	ecx
	mov	ecx, ebx
	call	DWORD PTR __imp_?Add@StringList@@QAEIPB_W@Z

; 662  :             deviceIDList->Add(lpExceptionGUIDs[i]);

	mov	edx, DWORD PTR ?lpExceptionGUIDs@@3PAPB_WA ; lpExceptionGUIDs
	mov	ecx, DWORD PTR _deviceIDList$GSCopy$[ebp]
	push	edx
	call	DWORD PTR __imp_?Add@StringList@@QAEIPB_W@Z

; 663  : 
; 664  :             if(hwndCombo != NULL) SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)lpExceptionNames[i]);

	cmp	esi, edi
	je	SHORT $LN18@FillOutLis
	mov	eax, DWORD PTR ?lpExceptionNames@@3PAPB_WA ; lpExceptionNames
	push	eax
	push	edi
	push	323					; 00000143H
	push	esi
	call	DWORD PTR __imp__SendMessageW@16
$LN18@FillOutLis:

; 665  : 
; 666  :             exceptionFilter->Release();

	mov	eax, DWORD PTR _exceptionFilter$89291[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN21@FillOutLis:

; 667  :         }
; 668  :     }
; 669  : 
; 670  :     //------------------------------------------
; 671  : 
; 672  :     ICreateDevEnum *deviceEnum;
; 673  :     IEnumMoniker *videoDeviceEnum;
; 674  : 
; 675  :     HRESULT err;
; 676  :     err = CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC, IID_ICreateDevEnum, (void**)&deviceEnum);

	lea	eax, DWORD PTR _deviceEnum$[ebp]
	push	eax
	push	OFFSET _IID_ICreateDevEnum
	push	3
	push	edi
	push	OFFSET _CLSID_SystemDeviceEnum
	call	DWORD PTR __imp__CoCreateInstance@20

; 677  :     if(FAILED(err))

	cmp	eax, edi
	jge	SHORT $LN17@FillOutLis

; 678  :     {
; 679  :         AppWarning(TEXT("FillOutListDevices: CoCreateInstance for the device enum failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8158
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 680  :         return;

	jmp	$LN1@FillOutLis
$LN17@FillOutLis:

; 681  :     }
; 682  : 
; 683  :     err = deviceEnum->CreateClassEnumerator(matchGUID, &videoDeviceEnum, 0);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edi
	lea	edx, DWORD PTR _videoDeviceEnum$[ebp]
	push	edx
	lea	edx, DWORD PTR _matchGUID$GSCopy$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	esi, eax

; 684  :     if(FAILED(err))

	cmp	esi, edi
	jge	SHORT $LN16@FillOutLis

; 685  :     {
; 686  :         AppWarning(TEXT("FillOutListDevices: deviceEnum->CreateClassEnumerator failed, result = %08lX"), err);

	push	esi
	push	OFFSET $SG-8159
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ

; 687  :         deviceEnum->Release();

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	add	esp, 8

; 688  :         return;

	jmp	$LN52@FillOutLis
$LN16@FillOutLis:

; 689  :     }
; 690  : 
; 691  :     SafeRelease(deviceEnum);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	cmp	eax, edi
	je	SHORT $LN15@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceEnum$[ebp], edi
$LN15@FillOutLis:

; 692  : 
; 693  :     if(err == S_FALSE) //no devices

	cmp	esi, 1
	je	$LN1@FillOutLis

; 694  :         return;
; 695  : 
; 696  :     //------------------------------------------
; 697  : 
; 698  :     IMoniker *deviceInfo;
; 699  :     DWORD count;
; 700  : 
; 701  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	jne	$LN12@FillOutLis
	npad	6
$LL13@FillOutLis:

; 702  :     {
; 703  :         IPropertyBag *propertyData;
; 704  :         err = deviceInfo->BindToStorage(0, 0, IID_IPropertyBag, (void**)&propertyData);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertyData$89314[ebp]
	push	edx
	push	OFFSET _IID_IPropertyBag
	push	edi
	push	edi
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax

; 705  :         if(SUCCEEDED(err))

	test	eax, eax
	js	$LN3@FillOutLis

; 706  :         {
; 707  :             VARIANT friendlyNameValue, devicePathValue;
; 708  :             friendlyNameValue.vt = VT_BSTR;
; 709  :             friendlyNameValue.bstrVal = NULL;
; 710  :             devicePathValue.vt = VT_BSTR;
; 711  :             devicePathValue.bstrVal = NULL;
; 712  : 
; 713  :             err = propertyData->Read(L"FriendlyName", &friendlyNameValue, NULL);

	mov	eax, DWORD PTR _propertyData$89314[ebp]
	mov	ecx, 8
	mov	edx, ecx
	mov	WORD PTR _devicePathValue$89319[ebp], dx
	push	edi
	lea	edx, DWORD PTR _friendlyNameValue$89318[ebp]
	push	edx
	mov	WORD PTR _friendlyNameValue$89318[ebp], cx
	mov	DWORD PTR _friendlyNameValue$89318[ebp+8], edi
	mov	DWORD PTR _devicePathValue$89319[ebp+8], edi
	mov	ecx, DWORD PTR [eax]
	push	OFFSET $SG-8160
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 714  :             propertyData->Read(L"DevicePath", &devicePathValue, NULL);

	push	edi
	lea	edx, DWORD PTR _devicePathValue$89319[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR _propertyData$89314[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	OFFSET $SG-8161
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 715  : 
; 716  :             if(SUCCEEDED(err))

	cmp	esi, edi
	jl	$LN9@FillOutLis

; 717  :             {
; 718  :                 IBaseFilter *filter;
; 719  :                 err = deviceInfo->BindToObject(NULL, 0, IID_IBaseFilter, (void**)&filter);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _filter$89324[ebp]
	push	edx
	push	OFFSET _IID_IBaseFilter
	push	edi
	push	edi
	push	eax
	mov	eax, DWORD PTR [ecx+32]
	call	eax

; 720  :                 if(SUCCEEDED(err))

	cmp	eax, edi
	jl	$LN9@FillOutLis

; 721  :                 {
; 722  :                     String strDeviceName = (CWSTR)friendlyNameValue.bstrVal;

	mov	ecx, DWORD PTR _friendlyNameValue$89318[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _strDeviceName$89328[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], edi

; 723  :                     deviceList->Add(strDeviceName);

	lea	edx, DWORD PTR _strDeviceName$89328[ebp]
	push	edx
	mov	ecx, ebx
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z

; 724  : 
; 725  :                     UINT count = 0;
; 726  :                     UINT id = INVALID;

	or	eax, -1
$LL8@FillOutLis:

; 727  :                     while((id = deviceList->FindNextValueIndexI(strDeviceName, id)) != INVALID) count++;

	lea	esi, DWORD PTR [eax+1]
	cmp	esi, DWORD PTR [ebx+4]
	jae	SHORT $LN46@FillOutLis
	npad	4
$LL32@FillOutLis:
	mov	eax, DWORD PTR _strDeviceName$89328[ebp]
	mov	ecx, DWORD PTR [ebx]
	push	eax
	lea	ecx, DWORD PTR [ecx+esi*8]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN43@FillOutLis
	inc	esi
	cmp	esi, DWORD PTR [ebx+4]
	jb	SHORT $LL32@FillOutLis
$LN46@FillOutLis:

; 728  : 
; 729  :                     if(count > 1)

	cmp	edi, 1
	jbe	SHORT $LN49@FillOutLis

; 730  :                         strDeviceName << TEXT(" (") << UIntString(count) << TEXT(")");

	push	10					; 0000000aH
	lea	edx, DWORD PTR $T103382[ebp]
	push	edi
	push	edx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	push	OFFSET $SG-8163
	push	eax
	push	OFFSET $SG-8162
	lea	ecx, DWORD PTR _strDeviceName$89328[ebp]
	call	esi
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	esi
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T103382[ebp]
	call	esi
	jmp	SHORT $LN6@FillOutLis
$LN43@FillOutLis:

; 727  :                     while((id = deviceList->FindNextValueIndexI(strDeviceName, id)) != INVALID) count++;

	mov	eax, esi
	cmp	esi, -1
	je	SHORT $LN46@FillOutLis
	inc	edi
	jmp	SHORT $LL8@FillOutLis
$LN49@FillOutLis:

; 730  :                         strDeviceName << TEXT(" (") << UIntString(count) << TEXT(")");

	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
$LN6@FillOutLis:

; 731  : 
; 732  :                     String strDeviceID = (CWSTR)devicePathValue.bstrVal;

	mov	eax, DWORD PTR _devicePathValue$89319[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strDeviceID$89339[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 733  :                     if(hwndCombo != NULL) SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)strDeviceName.Array());

	mov	eax, DWORD PTR _hwndCombo$GSCopy$[ebp]
	test	eax, eax
	je	SHORT $LN5@FillOutLis
	mov	ecx, DWORD PTR _strDeviceName$89328[ebp]
	push	ecx
	push	0
	push	323					; 00000143H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN5@FillOutLis:

; 734  :                     deviceIDList->Add(strDeviceID);

	mov	ecx, DWORD PTR _deviceIDList$GSCopy$[ebp]
	lea	edx, DWORD PTR _strDeviceID$89339[ebp]
	push	edx
	call	DWORD PTR __imp_?Add@StringList@@QAEIABVString@@@Z

; 735  : 
; 736  :                     SafeRelease(filter);

	mov	eax, DWORD PTR _filter$89324[ebp]
	test	eax, eax
	je	SHORT $LN4@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _filter$89324[ebp], 0
$LN4@FillOutLis:

; 737  :                 }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strDeviceID$89339[ebp]
	call	esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strDeviceName$89328[ebp]
	call	esi
	xor	edi, edi
$LN9@FillOutLis:

; 738  :             }
; 739  : 
; 740  :             SafeRelease(propertyData);

	mov	eax, DWORD PTR _propertyData$89314[ebp]
	cmp	eax, edi
	je	SHORT $LN3@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertyData$89314[ebp], edi
$LN3@FillOutLis:

; 741  :         }
; 742  : 
; 743  :         SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, edi
	je	SHORT $LN2@FillOutLis
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], edi
$LN2@FillOutLis:

; 694  :         return;
; 695  : 
; 696  :     //------------------------------------------
; 697  : 
; 698  :     IMoniker *deviceInfo;
; 699  :     DWORD count;
; 700  : 
; 701  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL13@FillOutLis
$LN12@FillOutLis:

; 744  :     }
; 745  : 
; 746  :     SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, edi
	je	SHORT $LN1@FillOutLis
$LN52@FillOutLis:
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@FillOutLis:

; 747  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$0:
	lea	ecx, DWORD PTR _strDeviceName$89328[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$1:
	lea	ecx, DWORD PTR $T103382[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z$2:
	lea	ecx, DWORD PTR _strDeviceID$89339[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ENDP ; FillOutListOfDevices
; Function compile flags: /Ogtp
;	COMDAT ?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z
_TEXT	SEGMENT
$T103428 = -28						; size = 16
tv289 = -8						; size = 4
_this$ = 8						; size = 4
_resolution$ = 12					; size = 4
_fpsInfo$ = 16						; size = 4
?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z PROC ; ConfigDialogData::GetResolutionFPSInfo, COMDAT

; 622  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi

; 623  :         fpsInfo.supportedIntervals.Clear();

	mov	edi, DWORD PTR _fpsInfo$[ebp]
	mov	eax, DWORD PTR [edi]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN9@GetResolut@2
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
$LN9@GetResolut@2:

; 624  : 
; 625  :         for(UINT i=0; i<outputList.Num(); i++)

	mov	esi, DWORD PTR _this$[ebp]
	cmp	ebx, DWORD PTR [esi+12]
	jae	SHORT $LN4@GetResolut@2
	mov	DWORD PTR tv289[ebp], ebx

; 626  :         {
; 627  :             MediaOutputInfo &outputInfo = outputList[i];

$LN16@GetResolut@2:
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, DWORD PTR tv289[ebp]

; 628  : 
; 629  :             if( UINT(resolution.cx) >= outputInfo.minCX && UINT(resolution.cx) <= outputInfo.maxCX &&
; 630  :                 UINT(resolution.cy) >= outputInfo.minCY && UINT(resolution.cy) <= outputInfo.maxCY )

	mov	edi, DWORD PTR _resolution$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN5@GetResolut@2
	cmp	eax, DWORD PTR [ecx+32]
	ja	SHORT $LN5@GetResolut@2
	mov	edi, DWORD PTR [edi+4]
	mov	esi, DWORD PTR [ecx+28]
	cmp	edi, esi
	jb	SHORT $LN26@GetResolut@2
	cmp	edi, DWORD PTR [ecx+36]
	ja	SHORT $LN26@GetResolut@2

; 631  :             {
; 632  :                 if((resolution.cx-outputInfo.minCX) % outputInfo.xGranularity || (resolution.cy-outputInfo.minCY) % outputInfo.yGranularity)

	sub	eax, edx
	xor	edx, edx
	div	DWORD PTR [ecx+40]
	test	edx, edx
	jne	SHORT $LN24@GetResolut@2
	mov	eax, edi
	sub	eax, esi
	div	DWORD PTR [ecx+44]
	test	edx, edx
	jne	SHORT $LN24@GetResolut@2

; 633  :                     return false;
; 634  : 
; 635  :                 fpsInfo.supportedIntervals << FPSInterval(outputInfo.minFrameInterval, outputInfo.maxFrameInterval);

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR _fpsInfo$[ebp]
	mov	DWORD PTR $T103428[ebp], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T103428[ebp+4], eax
	mov	eax, DWORD PTR [ecx+20]
	lea	edi, DWORD PTR $T103428[ebp]
	mov	DWORD PTR $T103428[ebp+8], edx
	mov	DWORD PTR $T103428[ebp+12], eax
	call	??6?$List@UFPSInterval@@@@QAEAAV0@ABUFPSInterval@@@Z ; List<FPSInterval>::operator<<
$LN26@GetResolut@2:
	mov	esi, DWORD PTR _this$[ebp]
$LN5@GetResolut@2:

; 624  : 
; 625  :         for(UINT i=0; i<outputList.Num(); i++)

	add	DWORD PTR tv289[ebp], 56		; 00000038H
	inc	ebx
	cmp	ebx, DWORD PTR [esi+12]
	jb	SHORT $LN16@GetResolut@2

; 631  :             {
; 632  :                 if((resolution.cx-outputInfo.minCX) % outputInfo.xGranularity || (resolution.cy-outputInfo.minCY) % outputInfo.yGranularity)

	mov	edi, DWORD PTR _fpsInfo$[ebp]
$LN4@GetResolut@2:

; 636  :             }
; 637  :         }
; 638  : 
; 639  :         return fpsInfo.supportedIntervals.Num() != 0;

	xor	eax, eax
	cmp	DWORD PTR [edi+4], eax
	setne	al

; 640  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN24@GetResolut@2:
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z ENDP ; ConfigDialogData::GetResolutionFPSInfo
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetResolutions@ConfigDialogData@@QAEXAAV?$List@UtagSIZE@@@@@Z
_TEXT	SEGMENT
_size$89251 = -16					; size = 8
tv375 = -12						; size = 4
tv499 = -8						; size = 4
_i$89254 = -8						; size = 4
_rez$89258 = 8						; size = 4
_this$ = 8						; size = 4
?GetResolutions@ConfigDialogData@@QAEXAAV?$List@UtagSIZE@@@@@Z PROC ; ConfigDialogData::GetResolutions, COMDAT
; _resolutions$ = eax

; 584  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, eax

; 585  :         resolutions.Clear();

	mov	eax, DWORD PTR [edi]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN15@GetResolut@3
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
$LN15@GetResolut@3:

; 586  : 
; 587  :         for(UINT i=0; i<outputList.Num(); i++)

	mov	esi, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [esi+12], ebx
	jbe	$LN10@GetResolut@3
	mov	DWORD PTR tv499[ebp], ebx
	jmp	SHORT $LN12@GetResolut@3
	npad	7
$LL71@GetResolut@3:
	mov	esi, edx
$LN12@GetResolut@3:

; 588  :         {
; 589  :             MediaOutputInfo &outputInfo = outputList[i];

	cmp	ebx, DWORD PTR [esi+12]
	jb	SHORT $LN22@GetResolut@3
	push	ebx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMediaOutputInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	esi, DWORD PTR [esi+8]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN23@GetResolut@3
$LN22@GetResolut@3:
	mov	esi, DWORD PTR [esi+8]
	add	esi, DWORD PTR tv499[ebp]
$LN23@GetResolut@3:

; 590  :             SIZE size;
; 591  : 
; 592  :             size.cx = outputInfo.minCX;

	mov	ecx, DWORD PTR [esi+24]

; 593  :             size.cy = outputInfo.minCY;

	mov	edx, DWORD PTR [esi+28]

; 594  :             if(!ResolutionListHasValue(resolutions, size))

	lea	eax, DWORD PTR _size$89251[ebp]
	push	eax
	mov	DWORD PTR _size$89251[ebp], ecx
	mov	DWORD PTR _size$89251[ebp+4], edx
	call	?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z ; ResolutionListHasValue
	add	esp, 4
	test	al, al
	jne	SHORT $LN29@GetResolut@3

; 595  :                 resolutions << size;

	inc	DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	mov	eax, DWORD PTR [edi]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR _size$89251[ebp]
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR [eax+ecx*8-8]
	mov	ecx, DWORD PTR _size$89251[ebp+4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
$LN29@GetResolut@3:

; 596  : 
; 597  :             size.cx = outputInfo.maxCX;

	mov	edx, DWORD PTR [esi+32]

; 598  :             size.cy = outputInfo.maxCY;

	mov	eax, DWORD PTR [esi+36]

; 599  :             if(!ResolutionListHasValue(resolutions, size))

	lea	ecx, DWORD PTR _size$89251[ebp]
	push	ecx
	mov	DWORD PTR _size$89251[ebp], edx
	mov	DWORD PTR _size$89251[ebp+4], eax
	call	?ResolutionListHasValue@@YA_NABV?$List@UtagSIZE@@@@AAUtagSIZE@@@Z ; ResolutionListHasValue
	add	esp, 4
	test	al, al
	jne	SHORT $LN11@GetResolut@3

; 600  :                 resolutions << size;

	inc	DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	mov	eax, DWORD PTR [edi]
	push	eax
	call	edx
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR _size$89251[ebp]
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR [eax+ecx*8-8]
	mov	ecx, DWORD PTR _size$89251[ebp+4]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
$LN11@GetResolut@3:

; 586  : 
; 587  :         for(UINT i=0; i<outputList.Num(); i++)

	mov	edx, DWORD PTR _this$[ebp]
	add	DWORD PTR tv499[ebp], 56		; 00000038H
	inc	ebx
	cmp	ebx, DWORD PTR [edx+12]
	jb	$LL71@GetResolut@3
$LN10@GetResolut@3:

; 601  :         }
; 602  : 
; 603  :         //sort
; 604  :         for(UINT i=0; i<resolutions.Num(); i++)

	xor	ebx, ebx
	mov	DWORD PTR _i$89254[ebp], ebx
	cmp	ebx, DWORD PTR [edi+4]
	jae	SHORT $LN5@GetResolut@3

; 605  :         {
; 606  :             SIZE &rez = resolutions[i];

$LN39@GetResolut@3:

; 607  : 
; 608  :             for(UINT j=i+1; j<resolutions.Num(); j++)

	mov	ecx, DWORD PTR [edi]
	lea	esi, DWORD PTR [ebx+1]
	lea	edx, DWORD PTR [ecx+ebx*8]
	mov	DWORD PTR _rez$89258[ebp], edx
	mov	DWORD PTR tv375[ebp], esi
	cmp	esi, DWORD PTR [edi+4]
	jae	SHORT $LN6@GetResolut@3

; 609  :             {
; 610  :                 SIZE &testRez = resolutions[j];

$LN44@GetResolut@3:
	mov	eax, DWORD PTR [edi]

; 611  : 
; 612  :                 if(testRez.cy < rez.cy)

	mov	edx, DWORD PTR _rez$89258[ebp]
	lea	ecx, DWORD PTR [eax+esi*8]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx+4]
	jge	SHORT $LN3@GetResolut@3

; 613  :                 {
; 614  :                     resolutions.SwapValues(i, j);

	cmp	ebx, esi
	je	SHORT $LL52@GetResolut@3
	mov	ecx, DWORD PTR [edi+4]
	cmp	ebx, ecx
	jae	SHORT $LL52@GetResolut@3
	cmp	esi, ecx
	jae	SHORT $LL52@GetResolut@3
	lea	ecx, DWORD PTR [eax+esi*8]
	mov	edx, 2
	lea	eax, DWORD PTR [eax+ebx*8]
$LN54@GetResolut@3:
	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [ecx], esi
	add	eax, 4
	add	ecx, 4
	dec	edx
	jne	SHORT $LN54@GetResolut@3
	mov	ebx, DWORD PTR _i$89254[ebp]
	npad	5
$LL52@GetResolut@3:

; 615  :                     j = i;

	mov	esi, ebx
$LN3@GetResolut@3:

; 607  : 
; 608  :             for(UINT j=i+1; j<resolutions.Num(); j++)

	inc	esi
	cmp	esi, DWORD PTR [edi+4]
	jb	SHORT $LN44@GetResolut@3
	mov	esi, DWORD PTR tv375[ebp]
$LN6@GetResolut@3:

; 601  :         }
; 602  : 
; 603  :         //sort
; 604  :         for(UINT i=0; i<resolutions.Num(); i++)

	mov	ebx, esi
	mov	DWORD PTR _i$89254[ebp], esi
	cmp	ebx, DWORD PTR [edi+4]
	jb	SHORT $LN39@GetResolut@3
$LN5@GetResolut@3:

; 616  :                 }
; 617  :             }
; 618  :         }
; 619  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetResolutions@ConfigDialogData@@QAEXAAV?$List@UtagSIZE@@@@@Z ENDP ; ConfigDialogData::GetResolutions
_TEXT	ENDS
PUBLIC	?GetClosestResolution@@YA_NAAV?$List@UMediaOutputInfo@@@@AAUtagSIZE@@AA_K@Z ; GetClosestResolution
EXTRN	__aulldiv:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetClosestResolution@@YA_NAAV?$List@UMediaOutputInfo@@@@AAUtagSIZE@@AA_K@Z
_TEXT	SEGMENT
_bestSize$ = -48					; size = 8
_internalFrameInterval$ = -40				; size = 8
_bestFrameInterval$ = -32				; size = 8
_maxFrameInterval$ = -24				; size = 8
_height$ = -16						; size = 4
_width$ = -12						; size = 4
tv313 = -8						; size = 4
_i$89173 = -4						; size = 4
_outputList$ = 8					; size = 4
_resolution$ = 12					; size = 4
_frameInterval$ = 16					; size = 4
?GetClosestResolution@@YA_NAAV?$List@UMediaOutputInfo@@@@AAUtagSIZE@@AA_K@Z PROC ; GetClosestResolution, COMDAT

; 487  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 488  :     LONG width, height;
; 489  :     UINT64 internalFrameInterval = 10000000/UINT64(API->GetMaxFPS());

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	push	ebx
	push	esi
	push	edi
	call	eax
	xor	ebx, ebx
	push	ebx
	push	eax
	push	ebx
	push	10000000				; 00989680H
	call	__aulldiv

; 490  :     API->GetBaseSize((UINT&)width, (UINT&)height);

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _internalFrameInterval$[ebp], eax
	lea	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _internalFrameInterval$[ebp+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+60]
	push	eax
	lea	eax, DWORD PTR _width$[ebp]
	push	eax
	call	edx

; 491  : 
; 492  :     LONG bestDistance = 0x7FFFFFFF;
; 493  :     SIZE bestSize;
; 494  :     UINT64 maxFrameInterval = 0;
; 495  :     UINT64 bestFrameInterval = 0xFFFFFFFFFFFFFFFFLL;
; 496  : 
; 497  :     for(UINT i=0; i<outputList.Num(); i++)

	mov	esi, DWORD PTR _outputList$[ebp]
	or	eax, -1
	mov	DWORD PTR _bestFrameInterval$[ebp], eax
	mov	DWORD PTR _bestFrameInterval$[ebp+4], eax
	mov	eax, DWORD PTR [esi+4]
	xor	ecx, ecx
	mov	edi, 2147483647				; 7fffffffH
	mov	DWORD PTR _maxFrameInterval$[ebp], ebx
	mov	DWORD PTR _maxFrameInterval$[ebp+4], ebx
	mov	DWORD PTR _i$89173[ebp], ecx
	cmp	eax, ebx
	jbe	$LN5@GetClosest

; 488  :     LONG width, height;
; 489  :     UINT64 internalFrameInterval = 10000000/UINT64(API->GetMaxFPS());

	mov	DWORD PTR tv313[ebp], ebx
	jmp	SHORT $LN19@GetClosest
	npad	1
$LL37@GetClosest:
	mov	esi, DWORD PTR _outputList$[ebp]
	mov	ecx, DWORD PTR _i$89173[ebp]
$LN19@GetClosest:

; 498  :     {
; 499  :         MediaOutputInfo &outputInfo = outputList[i];

	cmp	ecx, eax
	jb	SHORT $LN24@GetClosest
	push	ecx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMediaOutputInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN25@GetClosest
$LN24@GetClosest:
	mov	eax, DWORD PTR [esi]
	add	eax, DWORD PTR tv313[ebp]
$LN25@GetClosest:

; 500  : 
; 501  :         LONG outputWidth  = outputInfo.minCX;

	mov	esi, DWORD PTR [eax+24]
$LL16@GetClosest:

; 502  :         do
; 503  :         {
; 504  :             LONG distWidth = width-outputWidth;

	mov	ebx, DWORD PTR _width$[ebp]
	sub	ebx, esi

; 505  :             if(distWidth < 0)

	js	SHORT $LN14@GetClosest

; 506  :                 break;
; 507  : 
; 508  :             if(distWidth > bestDistance)

	cmp	ebx, edi

; 509  :             {
; 510  :                 outputWidth  += outputInfo.xGranularity;
; 511  :                 continue;

	jg	SHORT $LN9@GetClosest

; 512  :             }
; 513  : 
; 514  :             LONG outputHeight = outputInfo.minCY;

	mov	ecx, DWORD PTR [eax+28]
$LN11@GetClosest:

; 515  :             do
; 516  :             {
; 517  :                 LONG distHeight = height-outputHeight;

	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, ecx

; 518  :                 if(distHeight < 0)

	js	SHORT $LN9@GetClosest

; 519  :                     break;
; 520  : 
; 521  :                 LONG totalDist = distHeight+distWidth;

	add	edx, ebx

; 522  :                 if((totalDist <= bestDistance) || (totalDist == bestDistance && outputInfo.minFrameInterval < bestFrameInterval))

	cmp	edx, edi
	jg	SHORT $LN7@GetClosest

; 523  :                 {
; 524  :                     bestDistance = totalDist;

	mov	edi, edx

; 525  :                     bestSize.cx = outputWidth;
; 526  :                     bestSize.cy = outputHeight;
; 527  :                     maxFrameInterval = outputInfo.maxFrameInterval;

	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _maxFrameInterval$[ebp], edx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _maxFrameInterval$[ebp+4], edx

; 528  :                     bestFrameInterval = outputInfo.minFrameInterval;

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _bestFrameInterval$[ebp], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _bestSize$[ebp], esi
	mov	DWORD PTR _bestSize$[ebp+4], ecx
	mov	DWORD PTR _bestFrameInterval$[ebp+4], edx
$LN7@GetClosest:

; 529  :                 }
; 530  : 
; 531  :                 outputHeight += outputInfo.yGranularity;

	add	ecx, DWORD PTR [eax+44]

; 532  :             }while((UINT)outputHeight <= outputInfo.maxCY);

	cmp	ecx, DWORD PTR [eax+36]
	jbe	SHORT $LN11@GetClosest
$LN9@GetClosest:

; 533  : 
; 534  :             outputWidth  += outputInfo.xGranularity;

	add	esi, DWORD PTR [eax+40]

; 535  :         }while((UINT)outputWidth <= outputInfo.maxCX);

	cmp	esi, DWORD PTR [eax+32]
	jbe	SHORT $LL16@GetClosest
$LN14@GetClosest:

; 491  : 
; 492  :     LONG bestDistance = 0x7FFFFFFF;
; 493  :     SIZE bestSize;
; 494  :     UINT64 maxFrameInterval = 0;
; 495  :     UINT64 bestFrameInterval = 0xFFFFFFFFFFFFFFFFLL;
; 496  : 
; 497  :     for(UINT i=0; i<outputList.Num(); i++)

	mov	ecx, DWORD PTR _i$89173[ebp]
	mov	eax, DWORD PTR _outputList$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	DWORD PTR tv313[ebp], 56		; 00000038H
	inc	ecx
	mov	DWORD PTR _i$89173[ebp], ecx
	cmp	ecx, eax
	jb	$LL37@GetClosest

; 536  :     }
; 537  : 
; 538  :     if(bestDistance != 0x7FFFFFFF)

	cmp	edi, 2147483647				; 7fffffffH
	je	SHORT $LN5@GetClosest

; 539  :     {
; 540  :         resolution.cx = bestSize.cx;

	mov	eax, DWORD PTR _resolution$[ebp]

; 541  :         resolution.cy = bestSize.cy;

	mov	edx, DWORD PTR _bestSize$[ebp+4]

; 542  : 
; 543  :         if(internalFrameInterval > maxFrameInterval)

	mov	esi, DWORD PTR _maxFrameInterval$[ebp+4]
	mov	ecx, DWORD PTR _bestSize$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _internalFrameInterval$[ebp+4]
	mov	DWORD PTR [eax], ecx
	cmp	edx, esi
	jb	SHORT $LN39@GetClosest
	ja	SHORT $LN33@GetClosest
	mov	ecx, DWORD PTR _internalFrameInterval$[ebp]
	cmp	ecx, DWORD PTR _maxFrameInterval$[ebp]
	jbe	SHORT $LN4@GetClosest
$LN33@GetClosest:

; 544  :             frameInterval = maxFrameInterval;

	mov	eax, DWORD PTR _frameInterval$[ebp]
	mov	ecx, DWORD PTR _maxFrameInterval$[ebp]
	mov	DWORD PTR [eax+4], esi

; 547  :         else
; 548  :             frameInterval = internalFrameInterval;

	mov	DWORD PTR [eax], ecx

; 549  :         return true;

	mov	al, 1

; 550  :     }
; 551  : 
; 552  :     return false;
; 553  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN39@GetClosest:

; 544  :             frameInterval = maxFrameInterval;

	mov	ecx, DWORD PTR _internalFrameInterval$[ebp]
$LN4@GetClosest:

; 545  :         else if(internalFrameInterval < bestFrameInterval)

	mov	esi, DWORD PTR _bestFrameInterval$[ebp+4]
	cmp	edx, esi
	ja	SHORT $LN2@GetClosest
	jb	SHORT $LN34@GetClosest
	cmp	ecx, DWORD PTR _bestFrameInterval$[ebp]
	jae	SHORT $LN2@GetClosest
$LN34@GetClosest:

; 546  :             frameInterval = bestFrameInterval;

	mov	eax, DWORD PTR _frameInterval$[ebp]
	mov	edx, DWORD PTR _bestFrameInterval$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], esi

; 549  :         return true;

	mov	al, 1

; 550  :     }
; 551  : 
; 552  :     return false;
; 553  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@GetClosest:

; 547  :         else
; 548  :             frameInterval = internalFrameInterval;

	mov	eax, DWORD PTR _frameInterval$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], ecx

; 549  :         return true;

	mov	al, 1

; 550  :     }
; 551  : 
; 552  :     return false;
; 553  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@GetClosest:
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClosestResolution@@YA_NAAV?$List@UMediaOutputInfo@@@@AAUtagSIZE@@AA_K@Z ENDP ; GetClosestResolution
_TEXT	ENDS
PUBLIC	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\inline.h
xdata$x	SEGMENT
__unwindtable$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$1
__ehfuncinfo$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
_TEXT	SEGMENT
_valueThingy2$88660 = -92				; size = 16
_valueThingy$88659 = -76				; size = 16
_strVal2$88683 = -60					; size = 8
_strVal1$88667 = -52					; size = 8
_count$ = -44						; size = 4
_filter$88670 = -40					; size = 4
_propertyData$88655 = -36				; size = 4
_deviceEnum$ = -32					; size = 4
_bestFilter$ = -28					; size = 4
_videoDeviceEnum$ = -24					; size = 4
_deviceInfo$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_enumType$ = 8						; size = 4
_lpType$ = 12						; size = 4
_lpName$ = 16						; size = 4
_lpType2$ = 20						; size = 4
_lpName2$ = 24						; size = 4
?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z PROC ; GetDeviceByValue, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 153  :     //---------------------------------
; 154  :     // exception devices
; 155  :     if(scmpi(lpType2, L"DevicePath") == 0 && lpName2 && *lpName2 == '{')

	mov	eax, DWORD PTR _lpType2$[ebp]
	push	OFFSET $SG-8152
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	xor	ebx, ebx
	test	eax, eax
	jne	SHORT $LN27@GetDeviceB
	mov	eax, DWORD PTR _lpName2$[ebp]
	cmp	eax, ebx
	je	SHORT $LN27@GetDeviceB
	cmp	WORD PTR [eax], 123			; 0000007bH
	jne	SHORT $LN27@GetDeviceB

; 156  :         return GetExceptionDevice(lpName2);

	push	eax
	call	?GetExceptionDevice@@YAPAUIBaseFilter@@PB_W@Z ; GetExceptionDevice
	add	esp, 4

; 267  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@GetDeviceB:

; 157  : 
; 158  :     //---------------------------------
; 159  : 
; 160  :     ICreateDevEnum *deviceEnum;
; 161  :     IEnumMoniker *videoDeviceEnum;
; 162  : 
; 163  :     HRESULT err;
; 164  :     err = CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC, IID_ICreateDevEnum, (void**)&deviceEnum);

	lea	ecx, DWORD PTR _deviceEnum$[ebp]
	push	ecx
	push	OFFSET _IID_ICreateDevEnum
	push	3
	push	ebx
	push	OFFSET _CLSID_SystemDeviceEnum
	call	DWORD PTR __imp__CoCreateInstance@20

; 165  :     if(FAILED(err))

	cmp	eax, ebx
	jge	SHORT $LN26@GetDeviceB

; 166  :     {
; 167  :         AppWarning(TEXT("GetDeviceByName: CoCreateInstance for the device enum failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8153
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN41@GetDeviceB:

; 168  :         return NULL;

	xor	eax, eax

; 267  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@GetDeviceB:

; 169  :     }
; 170  : 
; 171  :     err = deviceEnum->CreateClassEnumerator(enumType, &videoDeviceEnum, 0);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	push	ebx
	lea	ecx, DWORD PTR _videoDeviceEnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _enumType$[ebp]
	push	ecx
	push	eax
	call	edx
	mov	esi, eax

; 172  :     if(FAILED(err))

	cmp	esi, ebx
	jge	SHORT $LN25@GetDeviceB

; 173  :     {
; 174  :         AppWarning(TEXT("GetDeviceByName: deviceEnum->CreateClassEnumerator failed, result = %08lX"), err);

	push	esi
	push	OFFSET $SG-8154
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ

; 175  :         deviceEnum->Release();

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	add	esp, 8
	push	eax
	call	edx

; 176  :         return NULL;

	xor	eax, eax

; 267  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@GetDeviceB:

; 177  :     }
; 178  : 
; 179  :     SafeRelease(deviceEnum);

	mov	eax, DWORD PTR _deviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN24@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceEnum$[ebp], ebx
$LN24@GetDeviceB:

; 180  : 
; 181  :     if(err == S_FALSE) //no devices, so NO ENUM FO U

	cmp	esi, 1

; 182  :         return NULL;

	je	SHORT $LN41@GetDeviceB

; 183  : 
; 184  :     //---------------------------------
; 185  : 
; 186  :     IBaseFilter *bestFilter = NULL;
; 187  : 
; 188  :     IMoniker *deviceInfo;
; 189  :     DWORD count;
; 190  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _bestFilter$[ebp], ebx
	call	eax
	test	eax, eax
	jne	$LN21@GetDeviceB
	mov	edi, DWORD PTR __imp_??1String@@QAE@XZ
$LL22@GetDeviceB:

; 191  :     {
; 192  :         IPropertyBag *propertyData;
; 193  :         err = deviceInfo->BindToStorage(0, 0, IID_IPropertyBag, (void**)&propertyData);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertyData$88655[ebp]
	push	edx
	push	OFFSET _IID_IPropertyBag
	push	ebx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax

; 194  :         if(SUCCEEDED(err))

	cmp	eax, ebx
	jl	$LN19@GetDeviceB

; 195  :         {
; 196  :             VARIANT valueThingy;
; 197  :             VARIANT valueThingy2;
; 198  :             VariantInit(&valueThingy);

	mov	esi, DWORD PTR __imp__VariantInit@4
	lea	ecx, DWORD PTR _valueThingy$88659[ebp]
	push	ecx
	call	esi

; 199  :             VariantInit(&valueThingy2);

	lea	edx, DWORD PTR _valueThingy2$88660[ebp]
	push	edx
	call	esi

; 200  :             /*valueThingy.vt  = VT_BSTR;
; 201  :             valueThingy.pbstrVal = NULL;
; 202  : 
; 203  :             valueThingy2.vt = VT_BSTR;
; 204  :             valueThingy2.bstrVal = NULL;*/
; 205  : 
; 206  :             if(SUCCEEDED(propertyData->Read(lpType, &valueThingy, NULL)))

	mov	eax, DWORD PTR _propertyData$88655[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _valueThingy$88659[ebp]
	push	edx
	mov	edx, DWORD PTR _lpType$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	js	$LN19@GetDeviceB

; 207  :             {
; 208  :                 if(lpType2 && lpName2)

	mov	esi, DWORD PTR _lpType2$[ebp]
	cmp	esi, ebx
	je	SHORT $LN32@GetDeviceB
	cmp	DWORD PTR _lpName2$[ebp], ebx
	je	SHORT $LN32@GetDeviceB

; 209  :                 {
; 210  :                     if(FAILED(propertyData->Read(lpType2, &valueThingy2, NULL)))

	mov	eax, DWORD PTR _propertyData$88655[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _valueThingy2$88660[ebp]
	push	edx
	push	esi
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax

; 211  :                         nop();

$LN32@GetDeviceB:

; 212  :                 }
; 213  : 
; 214  :                 SafeRelease(propertyData);

	mov	eax, DWORD PTR _propertyData$88655[ebp]
	cmp	eax, ebx
	je	SHORT $LN16@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertyData$88655[ebp], ebx
$LN16@GetDeviceB:

; 215  : 
; 216  :                 String strVal1 = (CWSTR)valueThingy.bstrVal;

	mov	eax, DWORD PTR _valueThingy$88659[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[ebp+8], ebx

; 217  : 
; 218  :                 if(strVal1 == lpName)

	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	$LN3@GetDeviceB

; 219  :                 {
; 220  :                     IBaseFilter *filter;
; 221  :                     err = deviceInfo->BindToObject(NULL, 0, IID_IBaseFilter, (void**)&filter);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR _filter$88670[ebp]
	push	ecx
	push	OFFSET _IID_IBaseFilter
	push	ebx
	push	ebx
	push	eax
	call	edx

; 222  :                     if(FAILED(err))

	cmp	eax, ebx
	jge	SHORT $LN14@GetDeviceB

; 223  :                     {
; 224  :                         AppWarning(TEXT("GetDeviceByName: deviceInfo->BindToObject failed, result = %08lX"), err);

	push	eax
	push	OFFSET $SG-8155
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 225  :                         continue;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	edi
	jmp	$LN2@GetDeviceB
$LN14@GetDeviceB:

; 226  :                     }
; 227  : 
; 228  :                     if(!bestFilter)

	cmp	DWORD PTR _bestFilter$[ebp], ebx
	jne	SHORT $LN13@GetDeviceB

; 229  :                     {
; 230  :                         bestFilter = filter;

	mov	eax, DWORD PTR _filter$88670[ebp]
	mov	DWORD PTR _bestFilter$[ebp], eax

; 231  : 
; 232  :                         if(!lpType2 || !lpName2)

	cmp	esi, ebx
	je	SHORT $LN36@GetDeviceB
	cmp	DWORD PTR _lpName2$[ebp], ebx
	jne	SHORT $LN3@GetDeviceB
$LN36@GetDeviceB:

; 233  :                         {
; 234  :                             SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, ebx
	je	SHORT $LN10@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN10@GetDeviceB:

; 235  :                             SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN9@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _videoDeviceEnum$[ebp], ebx
$LN9@GetDeviceB:

; 236  : 
; 237  :                             return bestFilter;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	edi
	jmp	$LN1@GetDeviceB
$LN13@GetDeviceB:

; 238  :                         }
; 239  :                     }
; 240  :                     else if(lpType2 && lpName2)

	cmp	esi, ebx
	je	SHORT $LN7@GetDeviceB
	mov	esi, DWORD PTR _lpName2$[ebp]
	cmp	esi, ebx
	je	SHORT $LN7@GetDeviceB

; 241  :                     {
; 242  :                         String strVal2 = (CWSTR)valueThingy2.bstrVal;

	mov	ecx, DWORD PTR _valueThingy2$88660[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _strVal2$88683[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 243  :                         if(strVal2 == lpName2)

	push	esi
	lea	ecx, DWORD PTR _strVal2$88683[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN37@GetDeviceB

; 253  :                         }
; 254  :                     }

	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strVal2$88683[ebp]
	call	edi

; 255  :                     else

	jmp	SHORT $LN3@GetDeviceB
$LN7@GetDeviceB:

; 256  :                         filter->Release();

	mov	eax, DWORD PTR _filter$88670[ebp]
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@GetDeviceB:

; 257  :                 }
; 258  :             }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	edi
$LN19@GetDeviceB:

; 259  :         }
; 260  : 
; 261  :         SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	cmp	eax, ebx
	je	SHORT $LN2@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN2@GetDeviceB:

; 183  : 
; 184  :     //---------------------------------
; 185  : 
; 186  :     IBaseFilter *bestFilter = NULL;
; 187  : 
; 188  :     IMoniker *deviceInfo;
; 189  :     DWORD count;
; 190  :     while(videoDeviceEnum->Next(1, &deviceInfo, &count) == S_OK)

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	lea	edx, DWORD PTR _deviceInfo$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL22@GetDeviceB
$LN21@GetDeviceB:

; 262  :     }
; 263  : 
; 264  :     SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN1@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@GetDeviceB:

; 265  : 
; 266  :     return bestFilter;

	mov	eax, DWORD PTR _bestFilter$[ebp]

; 267  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@GetDeviceB:

; 244  :                         {
; 245  :                             bestFilter->Release();

	mov	eax, DWORD PTR _bestFilter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 246  : 
; 247  :                             bestFilter = filter;
; 248  : 
; 249  :                             SafeRelease(deviceInfo);

	mov	eax, DWORD PTR _deviceInfo$[ebp]
	mov	esi, DWORD PTR _filter$88670[ebp]
	cmp	eax, ebx
	je	SHORT $LN5@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _deviceInfo$[ebp], ebx
$LN5@GetDeviceB:

; 250  :                             SafeRelease(videoDeviceEnum);

	mov	eax, DWORD PTR _videoDeviceEnum$[ebp]
	cmp	eax, ebx
	je	SHORT $LN4@GetDeviceB
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _videoDeviceEnum$[ebp], ebx
$LN4@GetDeviceB:

; 251  : 
; 252  :                             return bestFilter;

	mov	BYTE PTR __$EHRec$[ebp+8], bl
	lea	ecx, DWORD PTR _strVal2$88683[ebp]
	call	edi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	call	edi
	mov	eax, esi

; 267  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$0:
	lea	ecx, DWORD PTR _strVal1$88667[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z$1:
	lea	ecx, DWORD PTR _strVal2$88683[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ENDP ; GetDeviceByValue
PUBLIC	?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z		; CurrentDeviceExists
; Function compile flags: /Ogtp
;	COMDAT ?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z
_TEXT	SEGMENT
_numScenes$88567 = -4					; size = 4
_lpDevice$ = 8						; size = 4
_bGlobal$ = 12						; size = 1
?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z PROC		; CurrentDeviceExists, COMDAT
; _isGlobal$ = eax

; 57   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, eax

; 58   :     isGlobal = false;
; 59   : 
; 60   :     XElement *globalSources = API->GetGlobalSourceListElement();

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	BYTE PTR [esi], 0
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 61   :     if(globalSources)

	test	eax, eax
	je	SHORT $LN20@CurrentDev

; 62   :     {
; 63   :         if(SourceListHasDevice(lpDevice, globalSources))

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	eax
	push	ecx
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	je	SHORT $LN20@CurrentDev

; 64   :         {
; 65   :             isGlobal = true;

	mov	BYTE PTR [esi], 1

; 66   :             return true;

	mov	al, 1
	pop	esi

; 106  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@CurrentDev:

; 67   :         }
; 68   :     }
; 69   : 
; 70   :     if(bGlobal)

	cmp	BYTE PTR _bGlobal$[ebp], 0
	push	ebx
	push	edi
	je	SHORT $LN12@CurrentDev

; 71   :     {
; 72   :         XElement *sceneListElement = API->GetSceneListElement();

	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	mov	edi, eax

; 73   :         if(sceneListElement)

	test	edi, edi
	je	SHORT $LN1@CurrentDev

; 74   :         {
; 75   :             UINT numScenes = sceneListElement->NumElements();

	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_?NumElements@XElement@@QAEKPB_W@Z

; 76   :             for(UINT i=0; i<numScenes; i++)

	xor	esi, esi
	mov	DWORD PTR _numScenes$88567[ebp], eax
	test	eax, eax
	je	SHORT $LN1@CurrentDev
	mov	ebx, DWORD PTR __imp_?GetElementByID@XElement@@QBEPAV1@K@Z
	npad	3
$LL10@CurrentDev:

; 77   :             {
; 78   :                 XElement *sceneElement = sceneListElement->GetElementByID(i);

	push	esi
	mov	ecx, edi
	call	ebx

; 79   :                 if(sceneElement)

	test	eax, eax
	je	SHORT $LN9@CurrentDev

; 80   :                 {
; 81   :                     XElement *sourceListElement = sceneElement->GetElement(TEXT("sources"));

	push	OFFSET $SG-8150
	mov	ecx, eax
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 82   :                     if(sourceListElement)

	test	eax, eax
	je	SHORT $LN9@CurrentDev

; 83   :                     {
; 84   :                         if(SourceListHasDevice(lpDevice, sourceListElement))

	push	eax
	mov	eax, DWORD PTR _lpDevice$[ebp]
	push	eax
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	jne	SHORT $LN18@CurrentDev
$LN9@CurrentDev:

; 76   :             for(UINT i=0; i<numScenes; i++)

	inc	esi
	cmp	esi, DWORD PTR _numScenes$88567[ebp]
	jb	SHORT $LL10@CurrentDev
$LN1@CurrentDev:
	pop	edi
	pop	ebx

; 101  :             }
; 102  :         }
; 103  :     }
; 104  : 
; 105  :     return false;

	xor	al, al
	pop	esi

; 106  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@CurrentDev:

; 85   :                             return true;
; 86   :                     }
; 87   :                 }
; 88   :             }
; 89   :         }
; 90   :     }
; 91   :     else
; 92   :     {
; 93   :         XElement *sceneElement = API->GetSceneElement();

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 94   :         if(sceneElement)

	test	eax, eax
	je	SHORT $LN1@CurrentDev

; 95   :         {
; 96   :             XElement *sourceListElement = sceneElement->GetElement(TEXT("sources"));

	push	OFFSET $SG-8151
	mov	ecx, eax
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z

; 97   :             if(sourceListElement)

	test	eax, eax
	je	SHORT $LN1@CurrentDev

; 98   :             {
; 99   :                 if(SourceListHasDevice(lpDevice, sourceListElement))

	mov	ecx, DWORD PTR _lpDevice$[ebp]
	push	eax
	push	ecx
	call	?SourceListHasDevice@@YA_NPB_WPAVXElement@@@Z ; SourceListHasDevice
	add	esp, 8
	test	al, al
	je	SHORT $LN1@CurrentDev
$LN18@CurrentDev:
	pop	edi
	pop	ebx

; 100  :                     return true;

	mov	al, 1
	pop	esi

; 106  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z ENDP		; CurrentDeviceExists
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winbase.inl
_TEXT	ENDS
;	COMDAT _WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
_TEXT	SEGMENT
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 PROC ; COMDAT
; _pszProcName$ = ebx

; 651  :     static HMODULE s_module;
; 652  :     /* Use GetModuleHandle instead of LoadLibrary on kernel32.dll because */
; 653  :     /* we already necessarily have a reference on kernel32.dll. */
; 654  :     const static IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB
; 655  :         c = { IsolationAwarePrivatezltRgzbQhYRuNaQYRJ, L"Kernel32.dll"
; 656  : #ifdef _M_IX86
; 657  :              , IsolationAwarePrivatezltRgzbQhYRuNaQYRn, "Kernel32.dll"
; 658  : #endif
; 659  :     };
; 660  :     static IsolationAwarePrivatezHGnoyr_zBqHyr_vAsB m;
; 661  : 
; 662  :     return IsolationAwarePrivatezltRgCebPnQQeRff(&c, &m, pszProcName);

	jmp	_IsolationAwarePrivatezltRgCebPnQQeRff@12
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareQueryActCtxW@28
_TEXT	SEGMENT
_pvBuffer$ = 8						; size = 4
_IsolationAwareQueryActCtxW@28 PROC			; COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp

; 326  : #ifdef _WIN64
; 327  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 328  : #else
; 329  :     BOOL fResult = FALSE;
; 330  :     typedef BOOL (WINAPI* PFN)(__in DWORD dwFlags,__in HANDLE hActCtx,__in_opt PVOID pvSubInstance,__in ULONG ulInfoClass,__out_bcount_part_opt(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,__in SIZE_T cbBuffer,__out_opt SIZE_T*pcbWrittenOrRequired);
; 331  :     static PFN s_pfn;
; 332  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn

; 333  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@2

; 334  :     {
; 335  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("QueryActCtxW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 336  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@2

; 341  :     return fResult;
; 342  : #endif
; 343  : }

	pop	ebp
	ret	4
$LN1@IsolationA@2:

; 337  :             return fResult;
; 338  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA, eax ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
$LN2@IsolationA@2:

; 339  :     }
; 340  :     fResult = __IsolationAware_pfn(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	mov	ecx, DWORD PTR _pvBuffer$[ebp]
	push	0
	push	8
	push	ecx
	push	1
	push	0
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	-2147483632				; 80000010H
	call	eax

; 341  :     return fResult;
; 342  : #endif
; 343  : }

	pop	ebp
	ret	4
_IsolationAwareQueryActCtxW@28 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareFindActCtxSectionStringW@20
_TEXT	SEGMENT
_ReturnedData$ = 8					; size = 4
_IsolationAwareFindActCtxSectionStringW@20 PROC		; COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp

; 305  : #ifdef _WIN64
; 306  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 307  : #else
; 308  :     BOOL fResult = FALSE;
; 309  :     typedef BOOL (WINAPI* PFN)(__in DWORD dwFlags,__reserved const GUID*lpExtensionGuid,__in ULONG ulSectionId,__in LPCWSTR lpStringToFind,__out PACTCTX_SECTION_KEYED_DATA ReturnedData);
; 310  :     static PFN s_pfn;
; 311  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn

; 312  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@3

; 313  :     {
; 314  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("FindActCtxSectionStringW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 315  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@3

; 320  :     return fResult;
; 321  : #endif
; 322  : }

	pop	ebp
	ret	4
$LN1@IsolationA@3:

; 316  :             return fResult;
; 317  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA, eax ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
$LN2@IsolationA@3:

; 318  :     }
; 319  :     fResult = __IsolationAware_pfn(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	mov	ecx, DWORD PTR _ReturnedData$[ebp]
	push	ecx
	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	push	2
	push	0
	push	0
	call	eax

; 320  :     return fResult;
; 321  : #endif
; 322  : }

	pop	ebp
	ret	4
_IsolationAwareFindActCtxSectionStringW@20 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareDeactivateActCtx@8
_TEXT	SEGMENT
_ulCookie$ = 8						; size = 4
_IsolationAwareDeactivateActCtx@8 PROC			; COMDAT

; 283  : {

	push	ebp
	mov	ebp, esp

; 284  : #ifdef _WIN64
; 285  :     return DeactivateActCtx(dwFlags,ulCookie);
; 286  : #else
; 287  :     BOOL fResult = FALSE;
; 288  :     typedef BOOL (WINAPI* PFN)(__in DWORD dwFlags,__in ULONG_PTR ulCookie);
; 289  :     static PFN s_pfn;
; 290  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn

; 291  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@4

; 292  :     {
; 293  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("DeactivateActCtx");

	push	ebx
	mov	ebx, OFFSET ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 294  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@4

; 299  :     return fResult;
; 300  : #endif
; 301  : }

	pop	ebp
	ret	4
$LN1@IsolationA@4:

; 295  :             return fResult;
; 296  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA, eax ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
$LN2@IsolationA@4:

; 297  :     }
; 298  :     fResult = __IsolationAware_pfn(dwFlags,ulCookie);

	mov	ecx, DWORD PTR _ulCookie$[ebp]
	push	ecx
	push	0
	call	eax

; 299  :     return fResult;
; 300  : #endif
; 301  : }

	pop	ebp
	ret	4
_IsolationAwareDeactivateActCtx@8 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareActivateActCtx@8
_TEXT	SEGMENT
_hActCtx$ = 8						; size = 4
_lpCookie$ = 12						; size = 4
_IsolationAwareActivateActCtx@8 PROC			; COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp

; 263  : #ifdef _WIN64
; 264  :     return ActivateActCtx(hActCtx,lpCookie);
; 265  : #else
; 266  :     BOOL fResult = FALSE;
; 267  :     typedef BOOL (WINAPI* PFN)(__inout_opt HANDLE hActCtx,__out ULONG_PTR*lpCookie);
; 268  :     static PFN s_pfn;
; 269  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn

; 270  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@5

; 271  :     {
; 272  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("ActivateActCtx");

	push	ebx
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 273  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@5

; 278  :     return fResult;
; 279  : #endif
; 280  : }

	pop	ebp
	ret	8
$LN1@IsolationA@5:

; 274  :             return fResult;
; 275  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax ; `IsolationAwareActivateActCtx'::`2'::s_pfn
$LN2@IsolationA@5:

; 278  :     return fResult;
; 279  : #endif
; 280  : }

	pop	ebp

; 276  :     }
; 277  :     fResult = __IsolationAware_pfn(hActCtx,lpCookie);

	jmp	eax
_IsolationAwareActivateActCtx@8 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _IsolationAwareCreateActCtxW@4
_TEXT	SEGMENT
_pActCtx$ = 8						; size = 4
_IsolationAwareCreateActCtxW@4 PROC			; COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp

; 222  : #ifdef _WIN64
; 223  :     return CreateActCtxW(pActCtx);
; 224  : #else
; 225  :     __out HANDLE result = INVALID_HANDLE_VALUE;
; 226  :     typedef __out HANDLE (WINAPI* PFN)(__in PCACTCTXW pActCtx);
; 227  :     static PFN s_pfn;
; 228  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn

; 229  :     if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN2@IsolationA@6

; 230  :     {
; 231  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("CreateActCtxW");

	push	ebx
	mov	ebx, OFFSET ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx

; 232  :         if (__IsolationAware_pfn == NULL)

	test	eax, eax
	jne	SHORT $LN1@IsolationA@6

; 233  :             return result;

	or	eax, -1

; 237  :     return result;
; 238  : #endif
; 239  : }

	pop	ebp
	ret	4
$LN1@IsolationA@6:

; 234  :         s_pfn = __IsolationAware_pfn;

	mov	DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA, eax ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
$LN2@IsolationA@6:

; 237  :     return result;
; 238  : #endif
; 239  : }

	pop	ebp

; 235  :     }
; 236  :     result = __IsolationAware_pfn(pActCtx);

	jmp	eax
_IsolationAwareCreateActCtxW@4 ENDP
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\obsapi\utility\template.h
;	COMDAT ?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z
_TEXT	SEGMENT
tv169 = -4						; size = 4
?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z PROC	; List<MediaOutputInfo>::SetSize, COMDAT
; _this$ = ecx
; _n$ = eax

; 200  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi

; 201  :         if(num == n)

	mov	edi, DWORD PTR [esi+4]
	cmp	edi, eax
	jne	SHORT $LN4@SetSize@2

; 202  :             return FALSE;

	pop	edi
	xor	eax, eax
	pop	esi

; 219  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@SetSize@2:

; 203  :         else if(!n)

	test	eax, eax
	jne	SHORT $LN2@SetSize@2

; 204  :         {
; 205  :             Clear();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN7@SetSize@2
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0

; 217  : 
; 218  :         return TRUE;

	mov	eax, 1
	pop	esi

; 219  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@SetSize@2:

; 206  :             return TRUE;
; 207  :         }
; 208  : 
; 209  :         BOOL bClear=(n>num);
; 210  :         UINT oldNum=num;
; 211  : 
; 212  :         num = n;
; 213  :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	DWORD PTR [esi+4], eax
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR tv169[ebp], ecx
	push	ebx
	cmp	edi, eax
	sbb	ebx, ebx
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	mov	ecx, DWORD PTR tv169[ebp]
	push	eax
	call	edx
	neg	ebx
	mov	DWORD PTR [esi], eax

; 214  : 
; 215  :         if(bClear)

	je	SHORT $LN13@SetSize@2

; 216  :             zero(&array[oldNum], sizeof(T)*(num-oldNum));

	mov	edx, DWORD PTR [esi+4]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx*8]
	sub	ecx, edx
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	edx, ecx
	shr	ecx, 2
	mov	esi, ecx
	lea	ecx, DWORD PTR [edi*8]
	sub	ecx, edi
	and	edx, 3
	lea	ebx, DWORD PTR [eax+ecx*8]
	test	esi, esi
	je	SHORT $LN15@SetSize@2
	mov	edi, ebx
	mov	ecx, esi
	xor	eax, eax
	rep stosd
	lea	ebx, DWORD PTR [ebx+esi*4]
$LN15@SetSize@2:
	test	edx, edx
	je	SHORT $LN13@SetSize@2
	push	edx
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN13@SetSize@2:
	pop	ebx

; 204  :         {
; 205  :             Clear();

$LN7@SetSize@2:

; 217  : 
; 218  :         return TRUE;

	pop	edi
	mov	eax, 1
	pop	esi

; 219  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z ENDP	; List<MediaOutputInfo>::SetSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?CreateNew@?$List@UMediaOutputInfo@@@@QAEPAUMediaOutputInfo@@XZ
_TEXT	SEGMENT
?CreateNew@?$List@UMediaOutputInfo@@@@QAEPAUMediaOutputInfo@@XZ PROC ; List<MediaOutputInfo>::CreateNew, COMDAT
; _this$ = esi

; 342  :         SetSize(num+1);

	mov	eax, DWORD PTR [esi+4]
	inc	eax
	mov	ecx, esi
	call	?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z ; List<MediaOutputInfo>::SetSize

; 343  : 
; 344  :         T *value = &array[num-1];

	mov	eax, DWORD PTR [esi+4]

; 345  : 
; 346  :         return value;

	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*8-56]

; 347  :     }

	ret	0
?CreateNew@?$List@UMediaOutputInfo@@@@QAEPAUMediaOutputInfo@@XZ ENDP ; List<MediaOutputInfo>::CreateNew
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GLocaleStringLookup@@QAEPAXI@Z
_TEXT	SEGMENT
??_GLocaleStringLookup@@QAEPAXI@Z PROC			; LocaleStringLookup::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
	mov	eax, esi
	ret	0
??_GLocaleStringLookup@@QAEPAXI@Z ENDP			; LocaleStringLookup::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_UnloadPlugin
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
;	COMDAT _UnloadPlugin
_TEXT	SEGMENT
_UnloadPlugin PROC					; COMDAT

; 1905 :     delete pluginLocale;

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	esi
	mov	esi, ecx
	test	ecx, ecx
	je	SHORT $LN10@UnloadPlug
	call	DWORD PTR __imp_??1LocaleStringLookup@@QAE@XZ
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
$LN10@UnloadPlug:
	pop	esi

; 1906 : }

	ret	0
_UnloadPlugin ENDP
_TEXT	ENDS
PUBLIC	?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateDShowSource
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xmath.h
xdata$x	SEGMENT
__ehfuncinfo$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$7
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
$T104512 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateDShowSource, COMDAT

; 1867 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1868 :     DeviceSource *source = new DeviceSource;

	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	256					; 00000100H
	call	eax
	mov	esi, eax
	mov	ecx, 64					; 00000040H
	xor	eax, eax
	mov	edi, esi
	rep stosd
	mov	DWORD PTR $T104512[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	cmp	esi, ebx
	je	SHORT $LN4@CreateDSho
	mov	ecx, DWORD PTR __imp_??_7ImageSource@@6B@
	mov	DWORD PTR [esi], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edi, DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [esi], OFFSET ??_7DeviceSource@@6B@
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+76]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+84]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+92]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+100]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+108]
	call	edi
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	jmp	SHORT $LN5@CreateDSho
$LN4@CreateDSho:
	xor	esi, esi
$LN5@CreateDSho:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1869 :     if(!source->Init(data))

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	ebx, esi
	call	?Init@DeviceSource@@QAE_NPAVXElement@@@Z ; DeviceSource::Init
	test	al, al
	jne	SHORT $LN1@CreateDSho

; 1870 :     {
; 1871 :         delete source;

	test	esi, esi
	je	SHORT $LN6@CreateDSho
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, esi
	call	edx
$LN6@CreateDSho:

; 1872 :         return NULL;

	xor	eax, eax

; 1876 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN1@CreateDSho:

; 1873 :     }
; 1874 : 
; 1875 :     return source;

	mov	eax, esi

; 1876 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$0:
	mov	eax, DWORD PTR $T104512[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$1:
	mov	ecx, DWORD PTR $T104512[ebp]
	jmp	DWORD PTR __imp_??1ImageSource@@UAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$2:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 68					; 00000044H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$3:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 76					; 0000004cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$4:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 84					; 00000054H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$5:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 92					; 0000005cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$6:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 100				; 00000064H
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z$7:
	mov	ecx, DWORD PTR $T104512[ebp]
	add	ecx, 108				; 0000006cH
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateDShowSource
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ConfigDialogData@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0ConfigDialogData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0ConfigDialogData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0ConfigDialogData@@QAE@XZ$7
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0ConfigDialogData@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0ConfigDialogData@@QAE@XZ PROC			; ConfigDialogData::ConfigDialogData, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0ConfigDialogData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+24]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+32]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+56]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+64]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 8
	jmp	??1?$List@UMediaOutputInfo@@@@QAE@XZ	; List<MediaOutputInfo>::~List<MediaOutputInfo>
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$1:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	jmp	??1?$List@UtagSIZE@@@@QAE@XZ		; List<tagSIZE>::~List<tagSIZE>
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??0ConfigDialogData@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__ehhandler$??0ConfigDialogData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0ConfigDialogData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0ConfigDialogData@@QAE@XZ ENDP			; ConfigDialogData::ConfigDialogData
PUBLIC	_matchGUID$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ; OpenPropertyPages
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$1
__ehfuncinfo$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
_TEXT	SEGMENT
_cauuid$89427 = -48					; size = 8
_propPages$89426 = -40					; size = 4
_filter$ = -36						; size = 4
_matchGUID$GSCopy$ = -32				; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_devicename$ = 8					; size = 8
_deviceid$ = 16						; size = 8
_matchGUID$ = 24					; size = 16
?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z PROC ; OpenPropertyPages, COMDAT
; _hwnd$ = ecx

; 865  : void OpenPropertyPages(HWND hwnd, String devicename, String deviceid, GUID matchGUID) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _matchGUID$[ebp]
	mov	edx, DWORD PTR _matchGUID$[ebp+8]
	mov	esi, ecx
	mov	ecx, DWORD PTR _matchGUID$[ebp+4]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp], eax
	mov	eax, DWORD PTR _matchGUID$[ebp+12]
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+4], ecx
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+8], edx
	mov	DWORD PTR _matchGUID$GSCopy$[ebp+12], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 866  :     IBaseFilter *filter = GetDeviceByValue(matchGUID,
; 867  :                                             L"FriendlyName", devicename,
; 868  :                                             L"DevicePath", deviceid);

	mov	ecx, DWORD PTR _deviceid$[ebp]
	mov	edx, DWORD PTR _devicename$[ebp]
	push	ecx
	push	OFFSET $SG-8164
	push	edx
	lea	eax, DWORD PTR _matchGUID$GSCopy$[ebp]
	push	OFFSET $SG-8165
	push	eax
	call	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter$[ebp], eax

; 869  :     if(filter)

	test	eax, eax
	je	SHORT $LN4@OpenProper

; 870  :     {
; 871  :         ISpecifyPropertyPages *propPages;
; 872  :         CAUUID cauuid;
; 873  : 
; 874  :         if(SUCCEEDED(filter->QueryInterface(IID_ISpecifyPropertyPages, (void**)&propPages)))

	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propPages$89426[ebp]
	push	edx
	push	OFFSET _IID_ISpecifyPropertyPages
	push	eax
	mov	eax, DWORD PTR [ecx]
	call	eax
	test	eax, eax
	js	SHORT $LN3@OpenProper

; 875  :         {
; 876  :             if(SUCCEEDED(propPages->GetPages(&cauuid)))

	mov	eax, DWORD PTR _propPages$89426[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _cauuid$89427[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	js	SHORT $LN1@OpenProper

; 877  :             {
; 878  :                 if(cauuid.cElems)

	mov	eax, DWORD PTR _cauuid$89427[ebp]
	test	eax, eax
	je	SHORT $LN1@OpenProper

; 879  :                 {
; 880  :                     OleCreatePropertyFrame(hwnd, 0, 0, NULL, 1, (LPUNKNOWN*)&filter, cauuid.cElems, cauuid.pElems, 0, 0, NULL);

	mov	ecx, DWORD PTR _cauuid$89427[ebp+4]
	push	0
	push	0
	push	0
	push	ecx
	push	eax
	lea	edx, DWORD PTR _filter$[ebp]
	push	edx
	push	1
	push	0
	push	0
	push	0
	push	esi
	call	DWORD PTR __imp__OleCreatePropertyFrame@44

; 881  :                     CoTaskMemFree(cauuid.pElems);

	mov	eax, DWORD PTR _cauuid$89427[ebp+4]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
$LN1@OpenProper:

; 882  :                 }
; 883  :             }
; 884  :             propPages->Release();

	mov	eax, DWORD PTR _propPages$89426[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@OpenProper:

; 885  :         }
; 886  : 
; 887  :         filter->Release();

	mov	eax, DWORD PTR _filter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN4@OpenProper:

; 888  :     }
; 889  : 
; 890  :     return;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _devicename$[ebp]
	call	esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _deviceid$[ebp]
	call	esi

; 891  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$0:
	lea	ecx, DWORD PTR _deviceid$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z$1:
	lea	ecx, DWORD PTR _devicename$[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ENDP ; OpenPropertyPages
; Function compile flags: /Ogtp
;	COMDAT ?ClearOutputList@ConfigDialogData@@QAEXXZ
_TEXT	SEGMENT
tv260 = -8						; size = 4
_i$89240 = -4						; size = 4
?ClearOutputList@ConfigDialogData@@QAEXXZ PROC		; ConfigDialogData::ClearOutputList, COMDAT
; _this$ = ebx

; 577  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 578  :         for(UINT i=0; i<outputList.Num(); i++)

	xor	esi, esi
	xor	eax, eax
	mov	DWORD PTR _i$89240[ebp], eax
	cmp	DWORD PTR [ebx+12], esi
	jbe	$LN1@ClearOutpu
	push	edi
	mov	DWORD PTR tv260[ebp], esi
	jmp	SHORT $LN3@ClearOutpu
	npad	3
$LL24@ClearOutpu:
	mov	eax, DWORD PTR _i$89240[ebp]
$LN3@ClearOutpu:

; 579  :             outputList[i].FreeData();

	cmp	eax, DWORD PTR [ebx+12]
	jb	SHORT $LN8@ClearOutpu
	push	eax
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMediaOutputInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
	mov	esi, DWORD PTR [ebx+8]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN9@ClearOutpu
$LN8@ClearOutpu:
	mov	esi, DWORD PTR [ebx+8]
	add	esi, DWORD PTR tv260[ebp]
$LN9@ClearOutpu:
	mov	edi, DWORD PTR [esi+4]
	cmp	DWORD PTR [edi+64], 0
	je	SHORT $LN14@ClearOutpu
	mov	eax, DWORD PTR [edi+68]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	xor	eax, eax
	mov	DWORD PTR [edi+64], eax
	mov	DWORD PTR [edi+68], eax
$LN14@ClearOutpu:
	mov	eax, DWORD PTR [edi+60]
	test	eax, eax
	je	SHORT $LN13@ClearOutpu
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR [edi+60], 0
$LN13@ClearOutpu:
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	mov	eax, DWORD PTR _i$89240[ebp]
	add	DWORD PTR tv260[ebp], 56		; 00000038H
	inc	eax
	mov	DWORD PTR _i$89240[ebp], eax
	cmp	eax, DWORD PTR [ebx+12]
	jb	SHORT $LL24@ClearOutpu

; 578  :         for(UINT i=0; i<outputList.Num(); i++)

	xor	esi, esi
	pop	edi
$LN1@ClearOutpu:

; 580  :         outputList.Clear();

	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, esi
	je	SHORT $LN17@ClearOutpu
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebx+12], esi
$LN17@ClearOutpu:
	pop	esi

; 581  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearOutputList@ConfigDialogData@@QAEXXZ ENDP		; ConfigDialogData::ClearOutputList
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\alloc.h
xdata$x	SEGMENT
__ehfuncinfo$??1ConfigDialogData@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1ConfigDialogData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??1ConfigDialogData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1ConfigDialogData@@QAE@XZ$7
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ??1ConfigDialogData@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1ConfigDialogData@@QAE@XZ PROC			; ConfigDialogData::~ConfigDialogData, COMDAT

; 572  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1ConfigDialogData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR _this$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 7

; 573  :         ClearOutputList();

	mov	ebx, esi
	call	?ClearOutputList@ConfigDialogData@@QAEXXZ ; ConfigDialogData::ClearOutputList

; 574  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR [esi+64]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR [esi+56]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR [esi+32]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR [esi+24]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	xor	ebx, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	je	SHORT $LN13@ConfigDial
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi+16], ebx
	mov	DWORD PTR [esi+20], ebx
$LN13@ConfigDial:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	je	SHORT $LN20@ConfigDial
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
$LN20@ConfigDial:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$0:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 8
	jmp	??1?$List@UMediaOutputInfo@@@@QAE@XZ	; List<MediaOutputInfo>::~List<MediaOutputInfo>
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$1:
	mov	esi, DWORD PTR _this$[ebp]
	add	esi, 16					; 00000010H
	jmp	??1?$List@UtagSIZE@@@@QAE@XZ		; List<tagSIZE>::~List<tagSIZE>
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$??1ConfigDialogData@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__ehhandler$??1ConfigDialogData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1ConfigDialogData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1ConfigDialogData@@QAE@XZ ENDP			; ConfigDialogData::~ConfigDialogData
PUBLIC	_majorType$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
; Function compile flags: /Ogtp
;	COMDAT ?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z
_TEXT	SEGMENT
_retSize$88730 = -336					; size = 4
_curVal$88713 = -332					; size = 4
_majorType$GSCopy$ = -328				; size = 4
_pinDir$88721 = -324					; size = 4
_bDesiredMediaType$88718 = -320				; size = 4
_num$ = -316						; size = 4
_pinMediaType$88708 = -312				; size = 4
_mediaTypesEnum$88709 = -308				; size = 4
_pins$ = -304						; size = 4
_propertySet$88725 = -300				; size = 4
_curPin$ = -296						; size = 4
_chi$88731 = -292					; size = 264
_pinCategory$88729 = -24				; size = 16
__$ArrayPad$ = -8					; size = 4
_filter$ = 8						; size = 4
?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z PROC ; GetOutputPin, COMDAT
; _majorType$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _filter$[ebp]
	push	ebx
	push	esi
	push	edi

; 272  :     IPin *foundPin = NULL;
; 273  :     IEnumPins *pins;
; 274  : 
; 275  :     if(!filter) return NULL;

	xor	edi, edi
	mov	ebx, ecx

; 305  :             DeleteMediaType(pinMediaType);

	mov	DWORD PTR _majorType$GSCopy$[ebp], ebx
	cmp	eax, edi
	je	SHORT $LN1@GetOutputP

; 276  :     if(FAILED(filter->EnumPins(&pins))) return NULL;

	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _pins$[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	test	eax, eax
	js	SHORT $LN1@GetOutputP

; 277  : 
; 278  :     IPin *curPin;
; 279  :     ULONG num;
; 280  :     while(pins->Next(1, &curPin, &num) == S_OK)

	mov	eax, DWORD PTR _pins$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	lea	edx, DWORD PTR _curPin$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	SHORT $LN20@GetOutputP
$LN19@GetOutputP:

; 350  :     }
; 351  : 
; 352  :     SafeRelease(pins);

	mov	eax, DWORD PTR _pins$[ebp]
	cmp	eax, edi
	je	SHORT $LN1@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@GetOutputP:

; 353  : 
; 354  :     return foundPin;

	xor	eax, eax

; 355  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LL43@GetOutputP:

; 277  : 
; 278  :     IPin *curPin;
; 279  :     ULONG num;
; 280  :     while(pins->Next(1, &curPin, &num) == S_OK)

	mov	ebx, DWORD PTR _majorType$GSCopy$[ebp]
$LN20@GetOutputP:

; 281  :     {
; 282  :         if(majorType)

	cmp	ebx, edi
	je	$LN13@GetOutputP

; 283  :         {
; 284  :             AM_MEDIA_TYPE *pinMediaType;
; 285  : 
; 286  :             IEnumMediaTypes *mediaTypesEnum;
; 287  :             if(FAILED(curPin->EnumMediaTypes(&mediaTypesEnum)))

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _mediaTypesEnum$88709[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+48]
	call	eax
	test	eax, eax

; 288  :             {
; 289  :                 SafeRelease(curPin);
; 290  :                 continue;

	js	$LN3@GetOutputP

; 291  :             }
; 292  : 
; 293  :             ULONG curVal = 0;
; 294  :             HRESULT hRes = mediaTypesEnum->Next(1, &pinMediaType, &curVal);

	mov	eax, DWORD PTR _mediaTypesEnum$88709[ebp]
	lea	edx, DWORD PTR _curVal$88713[ebp]
	push	edx
	lea	edx, DWORD PTR _pinMediaType$88708[ebp]
	push	edx
	mov	DWORD PTR _curVal$88713[ebp], edi
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	mov	esi, eax

; 295  : 
; 296  :             mediaTypesEnum->Release();

	mov	eax, DWORD PTR _mediaTypesEnum$88709[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 297  : 
; 298  :             if(hRes != S_OK)

	cmp	esi, edi

; 299  :             {
; 300  :                 SafeRelease(curPin);
; 301  :                 continue;

	jne	$LN3@GetOutputP

; 302  :             }
; 303  : 
; 304  :             BOOL bDesiredMediaType = (pinMediaType->majortype == *majorType);

	mov	esi, DWORD PTR _pinMediaType$88708[ebp]
	mov	ecx, ebx
	mov	edx, esi
	call	_IsEqualGUID
	mov	DWORD PTR _bDesiredMediaType$88718[ebp], eax

; 305  :             DeleteMediaType(pinMediaType);

	mov	ebx, esi
	cmp	esi, edi
	je	SHORT $LN27@GetOutputP
	cmp	DWORD PTR [esi+64], 0
	je	SHORT $LN31@GetOutputP
	mov	eax, DWORD PTR [esi+68]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	mov	DWORD PTR [esi+64], 0
	mov	DWORD PTR [esi+68], 0
$LN31@GetOutputP:
	mov	eax, DWORD PTR [ebx+60]
	test	eax, eax
	je	SHORT $LN30@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR [ebx+60], 0
$LN30@GetOutputP:
	push	ebx
	call	DWORD PTR __imp__CoTaskMemFree@4
	xor	edi, edi
$LN27@GetOutputP:

; 306  : 
; 307  :             if(!bDesiredMediaType)

	cmp	DWORD PTR _bDesiredMediaType$88718[ebp], edi

; 308  :             {
; 309  :                 SafeRelease(curPin);
; 310  :                 continue;

	je	$LN3@GetOutputP
$LN13@GetOutputP:

; 311  :             }
; 312  :         }
; 313  : 
; 314  :         //------------------------------
; 315  : 
; 316  :         PIN_DIRECTION pinDir;
; 317  :         if(SUCCEEDED(curPin->QueryDirection(&pinDir)))

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _pinDir$88721[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	test	eax, eax
	js	$LN3@GetOutputP

; 318  :         {
; 319  :             if(pinDir == PINDIR_OUTPUT)

	cmp	DWORD PTR _pinDir$88721[ebp], 1
	jne	$LN3@GetOutputP

; 320  :             {
; 321  :                 IKsPropertySet *propertySet;
; 322  :                 if(SUCCEEDED(curPin->QueryInterface(IID_IKsPropertySet, (void**)&propertySet)))

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _propertySet$88725[ebp]
	push	edx
	push	OFFSET _IID_IKsPropertySet
	push	eax
	mov	eax, DWORD PTR [ecx]
	call	eax
	test	eax, eax
	js	SHORT $LN3@GetOutputP

; 323  :                 {
; 324  :                     GUID pinCategory;
; 325  :                     DWORD retSize;
; 326  : 
; 327  :                     PIN_INFO chi;
; 328  :                     curPin->QueryPinInfo(&chi);

	mov	eax, DWORD PTR _curPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _chi$88731[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+32]
	call	eax

; 329  : 
; 330  :                     if(chi.pFilter)

	mov	eax, DWORD PTR _chi$88731[ebp]
	cmp	eax, edi
	je	SHORT $LN8@GetOutputP

; 331  :                         chi.pFilter->Release();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN8@GetOutputP:

; 332  : 
; 333  :                     if(SUCCEEDED(propertySet->Get(AMPROPSETID_Pin, AMPROPERTY_PIN_CATEGORY, NULL, 0, &pinCategory, sizeof(GUID), &retSize)))

	mov	eax, DWORD PTR _propertySet$88725[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _retSize$88730[ebp]
	push	edx
	push	16					; 00000010H
	lea	edx, DWORD PTR _pinCategory$88729[ebp]
	push	edx
	push	edi
	push	edi
	push	edi
	push	OFFSET _AMPROPSETID_Pin
	push	eax
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	test	eax, eax
	js	SHORT $LN6@GetOutputP

; 334  :                     {
; 335  :                         if(pinCategory == PIN_CATEGORY_CAPTURE)

	mov	ecx, OFFSET _PIN_CATEGORY_CAPTURE
	lea	edx, DWORD PTR _pinCategory$88729[ebp]
	call	_IsEqualGUID
	test	eax, eax
	jne	SHORT $LN40@GetOutputP
$LN6@GetOutputP:

; 339  : 
; 340  :                             return curPin;
; 341  :                         }
; 342  :                     }
; 343  : 
; 344  :                     SafeRelease(propertySet);

	mov	eax, DWORD PTR _propertySet$88725[ebp]
	cmp	eax, edi
	je	SHORT $LN3@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertySet$88725[ebp], edi
$LN3@GetOutputP:

; 345  :                 }
; 346  :             }
; 347  :         }
; 348  : 
; 349  :         SafeRelease(curPin);

	mov	eax, DWORD PTR _curPin$[ebp]
	cmp	eax, edi
	je	SHORT $LN2@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _curPin$[ebp], edi
$LN2@GetOutputP:

; 277  : 
; 278  :     IPin *curPin;
; 279  :     ULONG num;
; 280  :     while(pins->Next(1, &curPin, &num) == S_OK)

	mov	eax, DWORD PTR _pins$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	lea	edx, DWORD PTR _curPin$[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	je	$LL43@GetOutputP

; 334  :                     {
; 335  :                         if(pinCategory == PIN_CATEGORY_CAPTURE)

	jmp	$LN19@GetOutputP
$LN40@GetOutputP:

; 336  :                         {
; 337  :                             SafeRelease(propertySet);

	mov	eax, DWORD PTR _propertySet$88725[ebp]
	cmp	eax, edi
	je	SHORT $LN5@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR _propertySet$88725[ebp], edi
$LN5@GetOutputP:

; 338  :                             SafeRelease(pins);

	mov	eax, DWORD PTR _pins$[ebp]
	cmp	eax, edi
	je	SHORT $LN4@GetOutputP
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN4@GetOutputP:

; 355  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, DWORD PTR _curPin$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ENDP ; GetOutputPin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winbase.inl
xdata$x	SEGMENT
__sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 DD 0ffffffe4H
	DD	00H
	DD	0fffffd78H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN25@WinbaseIso
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT _WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
_TEXT	SEGMENT
_actCtxSectionKeyedData$15638 = -632			; size = 64
_actCtx$15612 = -600					; size = 32
_actCtxBasicInfo$ = -568				; size = 8
_hmodSelf$15615 = -560					; size = 4
_ulpCookie$ = -556					; size = 4
_rgchFullModulePath$15613 = -552			; size = 524
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 PROC		; COMDAT

; 425  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 616				; 00000268H
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 426  :     BOOL fResult = FALSE;

	xor	edi, edi
	xor	esi, esi

; 427  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 428  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], edi

; 429  : 
; 430  : #ifdef _M_IX86
; 431  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi

; 432  :     {
; 433  :         fResult = TRUE;
; 434  :         goto Exit;

	jne	$LN28@WinbaseIso

; 435  :     }
; 436  : #endif
; 437  : 
; 438  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, -1

; 439  :     {
; 440  :         fResult = TRUE;
; 441  :         goto Exit;

	jne	$LN28@WinbaseIso

; 442  :     }
; 443  : 
; 444  :     if (!IsolationAwareQueryActCtxW(
; 445  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 446  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 447  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 448  :         NULL,
; 449  :         ActivationContextBasicInformation,
; 450  :         &actCtxBasicInfo,
; 451  :         sizeof(actCtxBasicInfo),
; 452  :         NULL))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA
	cmp	eax, edi
	jne	SHORT $LN30@WinbaseIso
	mov	ebx, OFFSET ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	$Exit$15603
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA, eax
$LN30@WinbaseIso:
	push	edi
	push	8
	lea	ecx, DWORD PTR _actCtxBasicInfo$[ebp]
	push	ecx
	push	1
	push	edi
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	-2147483632				; 80000010H
	call	eax
	cmp	eax, edi
	je	$Exit$15603

; 453  :         goto Exit;
; 454  : 
; 455  :     /*
; 456  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 457  :     */
; 458  :     if (actCtxBasicInfo.hActCtx == NULL)

	mov	eax, DWORD PTR _actCtxBasicInfo$[ebp]
	cmp	eax, edi
	jne	$LN15@WinbaseIso

; 459  :     {
; 460  :         ACTCTXW actCtx;
; 461  :         WCHAR rgchFullModulePath[MAX_PATH + 2];
; 462  :         DWORD dw;
; 463  :         HMODULE hmodSelf;
; 464  : #ifdef _M_IX86
; 465  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");

	mov	ebx, OFFSET ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12

; 466  :         if (pfnGetModuleHandleExW == NULL)

	cmp	eax, edi
	je	$Exit$15603

; 467  :             goto Exit;
; 468  : #endif
; 469  :         if (!
; 470  : #ifdef _M_IX86
; 471  :             (*pfnGetModuleHandleExW)
; 472  : #else
; 473  :             GetModuleHandleExW
; 474  : #endif
; 475  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 476  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 477  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 478  :                 &hmodSelf))

	lea	edx, DWORD PTR _hmodSelf$15615[ebp]
	push	edx
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	6
	call	eax
	test	eax, eax
	je	$Exit$15603

; 479  :             goto Exit;
; 480  : 
; 481  :         rgchFullModulePath[WINBASE_NUMBER_OF(rgchFullModulePath) - 1] = 0;

	xor	eax, eax
	mov	DWORD PTR _rgchFullModulePath$15613[ebp+520], eax

; 482  :         rgchFullModulePath[WINBASE_NUMBER_OF(rgchFullModulePath) - 2] = 0;
; 483  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath) - 1);

	push	261					; 00000105H
	lea	edx, DWORD PTR _rgchFullModulePath$15613[ebp]
	push	edx
	mov	eax, DWORD PTR _hmodSelf$15615[ebp]
	push	eax
	call	DWORD PTR __imp__GetModuleFileNameW@12

; 484  :         if (dw == 0)

	cmp	eax, edi
	je	$Exit$15603

; 485  :             goto Exit;
; 486  :         if (rgchFullModulePath[WINBASE_NUMBER_OF(rgchFullModulePath) - 2] != 0)

	cmp	WORD PTR _rgchFullModulePath$15613[ebp+520], di
	je	SHORT $LN8@WinbaseIso

; 487  :         {
; 488  :             SetLastError(ERROR_BUFFER_OVERFLOW);

	push	111					; 0000006fH
	call	DWORD PTR __imp__SetLastError@4

; 489  :             goto Exit;

	jmp	$Exit$15603
$LN8@WinbaseIso:

; 490  :         }
; 491  : 
; 492  :         actCtx.cbSize = sizeof(actCtx);

	mov	DWORD PTR _actCtx$15612[ebp], 32	; 00000020H

; 493  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;

	mov	DWORD PTR _actCtx$15612[ebp+4], 136	; 00000088H

; 494  :         actCtx.lpSource = rgchFullModulePath;

	lea	ecx, DWORD PTR _rgchFullModulePath$15613[ebp]
	mov	DWORD PTR _actCtx$15612[ebp+8], ecx

; 495  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;

	mov	DWORD PTR _actCtx$15612[ebp+20], 3

; 496  :         actCtx.hModule = hmodSelf;

	mov	edx, DWORD PTR _hmodSelf$15615[ebp]
	mov	DWORD PTR _actCtx$15612[ebp+28], edx

; 497  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA
	cmp	eax, edi
	jne	SHORT $LN38@WinbaseIso
	mov	ebx, OFFSET ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	jne	SHORT $LN37@WinbaseIso
	or	eax, -1
	jmp	SHORT $LN39@WinbaseIso
$LN37@WinbaseIso:
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA, eax
$LN38@WinbaseIso:
	lea	ecx, DWORD PTR _actCtx$15612[ebp]
	push	ecx
	call	eax
$LN39@WinbaseIso:
	mov	DWORD PTR _actCtxBasicInfo$[ebp], eax

; 498  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)

	cmp	eax, -1
	jne	SHORT $LN6@WinbaseIso

; 499  :         {
; 500  :             const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0

; 501  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 502  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 503  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 504  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND))

	cmp	eax, 1812				; 00000714H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1813				; 00000715H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1815				; 00000717H
	je	SHORT $LN5@WinbaseIso
	cmp	eax, 1814				; 00000716H
	jne	$Exit$15603
$LN5@WinbaseIso:

; 505  :                 goto Exit;
; 506  : 
; 507  :             actCtxBasicInfo.hActCtx = NULL;

	xor	eax, eax
	mov	DWORD PTR _actCtxBasicInfo$[ebp], eax
$LN6@WinbaseIso:

; 508  :         }
; 509  : 
; 510  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;

	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk, 1
$LN15@WinbaseIso:

; 511  :     }
; 512  : 
; 513  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;

	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, eax

; 514  : 
; 515  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 516  : 
; 517  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))

	mov	esi, eax
	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
	cmp	eax, edi
	jne	SHORT $LN44@WinbaseIso
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	SHORT $LN28@WinbaseIso
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax
$LN44@WinbaseIso:
	lea	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	push	esi
	call	eax
	cmp	eax, edi
	je	SHORT $LN28@WinbaseIso

; 518  :     {
; 519  :         __try

	mov	DWORD PTR __$SEHRec$[ebp+20], edi

; 520  :         {
; 521  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 522  : 
; 523  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);

	mov	DWORD PTR _actCtxSectionKeyedData$15638[ebp], 64 ; 00000040H

; 524  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA
	cmp	eax, edi
	jne	SHORT $LN50@WinbaseIso
	mov	ebx, OFFSET ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	cmp	eax, edi
	je	SHORT $LN1@WinbaseIso
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA, eax
$LN50@WinbaseIso:
	lea	ecx, DWORD PTR _actCtxSectionKeyedData$15638[ebp]
	push	ecx
	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	push	2
	push	edi
	push	edi
	call	eax
	cmp	eax, edi
	je	SHORT $LN1@WinbaseIso

; 525  :             {
; 526  :                 /* get button, edit, etc. registered */
; 527  :                 LoadLibraryW(L"Comctl32.dll");

	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	DWORD PTR __imp__LoadLibraryW@4
$LN1@WinbaseIso:

; 528  :             }
; 529  :         }
; 530  :         __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN27@WinbaseIso
$LN28@WinbaseIso:

; 533  :         }
; 534  :     }
; 535  : 
; 536  :     fResult = TRUE;

	mov	esi, 1
$Exit$15603:

; 537  : Exit:
; 538  :     return fResult;

	mov	eax, esi

; 539  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@WinbaseIso:
$LN56@WinbaseIso:
$LN27@WinbaseIso:

; 531  :         {
; 532  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	call	_IsolationAwareDeactivateActCtx@8
$LN26@WinbaseIso:
$LN55@WinbaseIso:
	ret	0
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 ENDP
; Function compile flags: /Ogtp
;	COMDAT ??_GConfigDialogData@@QAEPAXI@Z
_TEXT	SEGMENT
??_GConfigDialogData@@QAEPAXI@Z PROC			; ConfigDialogData::`scalar deleting destructor', COMDAT
; _this$ = esi
	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
	mov	eax, esi
	ret	0
??_GConfigDialogData@@QAEPAXI@Z ENDP			; ConfigDialogData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z ; AddOutput
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
;	COMDAT ?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z
_TEXT	SEGMENT
_type$ = -12						; size = 4
tv262 = -8						; size = 4
_bUsingFourCC$88757 = -1				; size = 1
_bAllowV2$ = 8						; size = 1
_outputInfoList$ = 12					; size = 4
?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z PROC ; AddOutput, COMDAT
; _pMT$ = ebx
; _capsData$ = eax

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, eax
	push	edi

; 359  :     VideoOutputType type = GetVideoOutputType(*pMT);

	mov	eax, ebx
	call	?GetVideoOutputType@@YA?AW4VideoOutputType@@ABU_AMMediaType@@@Z ; GetVideoOutputType

; 360  : 
; 361  :     if(pMT->formattype == FORMAT_VideoInfo || (bAllowV2 && pMT->formattype == FORMAT_VideoInfo2))

	mov	ecx, OFFSET _FORMAT_VideoInfo
	lea	edx, DWORD PTR [ebx+44]
	mov	DWORD PTR _type$[ebp], eax
	call	_IsEqualGUID
	test	eax, eax
	jne	SHORT $LN7@AddOutput
	cmp	BYTE PTR _bAllowV2$[ebp], al
	je	$LN35@AddOutput
	mov	ecx, OFFSET _FORMAT_VideoInfo2
	lea	edx, DWORD PTR [ebx+44]
	call	_IsEqualGUID
	test	eax, eax
	je	$LN35@AddOutput
$LN7@AddOutput:

; 362  :     {
; 363  :         VIDEO_STREAM_CONFIG_CAPS *pVSCC = reinterpret_cast<VIDEO_STREAM_CONFIG_CAPS*>(capsData);
; 364  :         VIDEOINFOHEADER *pVih = reinterpret_cast<VIDEOINFOHEADER*>(pMT->pbFormat);

	mov	eax, DWORD PTR [ebx+68]

; 365  :         BITMAPINFOHEADER *bmiHeader = GetVideoBMIHeader(pMT);

	mov	ecx, OFFSET _FORMAT_VideoInfo
	lea	edx, DWORD PTR [ebx+44]
	mov	DWORD PTR tv262[ebp], eax
	call	_IsEqualGUID
	mov	edi, DWORD PTR tv262[ebp]
	test	eax, eax
	je	SHORT $LN21@AddOutput
	add	edi, 48					; 00000030H
	jmp	SHORT $LN22@AddOutput
$LN21@AddOutput:
	add	edi, 72					; 00000048H
$LN22@AddOutput:

; 366  : 
; 367  :         bool bUsingFourCC = false;
; 368  :         if(type == VideoOutputType_None)

	cmp	DWORD PTR _type$[ebp], 0
	mov	BYTE PTR _bUsingFourCC$88757[ebp], 0
	jne	SHORT $LN34@AddOutput

; 369  :         {
; 370  :             type = GetVideoOutputTypeFromFourCC(bmiHeader->biCompression);

	mov	ecx, DWORD PTR [edi+16]
	call	?GetVideoOutputTypeFromFourCC@@YA?AW4VideoOutputType@@K@Z ; GetVideoOutputTypeFromFourCC
	mov	DWORD PTR _type$[ebp], eax

; 371  :             bUsingFourCC = true;

	mov	BYTE PTR _bUsingFourCC$88757[ebp], 1

; 372  :         }
; 373  : 
; 374  :         if(type != VideoOutputType_None)

	test	eax, eax
	je	$LN35@AddOutput
$LN34@AddOutput:

; 375  :         {
; 376  :             MediaOutputInfo *outputInfo = outputInfoList.CreateNew();

	mov	ecx, DWORD PTR _outputInfoList$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	inc	eax
	call	?SetSize@?$List@UMediaOutputInfo@@@@QAEHI@Z ; List<MediaOutputInfo>::SetSize
	mov	ecx, DWORD PTR _outputInfoList$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*8-56]

; 377  : 
; 378  :             if(pVSCC)

	xor	edx, edx
	cmp	esi, edx
	je	SHORT $LN4@AddOutput

; 379  :             {
; 380  :                 outputInfo->minFrameInterval = pVSCC->MinFrameInterval;

	mov	ecx, DWORD PTR [esi+104]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+108]
	mov	DWORD PTR [eax+12], edx

; 381  :                 outputInfo->maxFrameInterval = pVSCC->MaxFrameInterval;

	mov	ecx, DWORD PTR [esi+112]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+116]
	mov	DWORD PTR [eax+20], edx

; 382  :                 outputInfo->minCX = pVSCC->MinOutputSize.cx;

	mov	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [eax+24], ecx

; 383  :                 outputInfo->maxCX = pVSCC->MaxOutputSize.cx;

	mov	edx, DWORD PTR [esi+68]
	mov	DWORD PTR [eax+32], edx

; 384  :                 outputInfo->minCY = pVSCC->MinOutputSize.cy;

	mov	ecx, DWORD PTR [esi+64]
	mov	DWORD PTR [eax+28], ecx

; 385  :                 outputInfo->maxCY = pVSCC->MaxOutputSize.cy;

	mov	edx, DWORD PTR [esi+72]
	mov	DWORD PTR [eax+36], edx

; 386  : 
; 387  :                 //actually due to the other code in GetResolutionFPSInfo, we can have this granularity
; 388  :                 // back to the way it was.  now, even if it's corrupted, it will always work
; 389  :                 outputInfo->xGranularity = max(pVSCC->OutputGranularityX, 1);

	mov	ecx, DWORD PTR [esi+76]
	cmp	ecx, 1
	jg	SHORT $LN12@AddOutput
	mov	ecx, 1
$LN12@AddOutput:
	mov	DWORD PTR [eax+40], ecx

; 390  :                 outputInfo->yGranularity = max(pVSCC->OutputGranularityY, 1);

	mov	esi, DWORD PTR [esi+80]
	cmp	esi, 1
	jg	SHORT $LN14@AddOutput
	mov	esi, 1
$LN14@AddOutput:

; 402  :             }
; 403  : 
; 404  :             outputInfo->mediaType = pMT;
; 405  :             outputInfo->videoType = type;

	mov	ecx, DWORD PTR _type$[ebp]

; 406  :             outputInfo->bUsingFourCC = bUsingFourCC;

	mov	dl, BYTE PTR _bUsingFourCC$88757[ebp]
	pop	edi
	mov	DWORD PTR [eax+44], esi
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+48], dl
	pop	esi

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@AddOutput:

; 391  :             }
; 392  :             else
; 393  :             {
; 394  :                 outputInfo->minCX = outputInfo->maxCX = bmiHeader->biWidth;

	mov	ecx, DWORD PTR [edi+4]

; 395  :                 outputInfo->minCY = outputInfo->maxCY = bmiHeader->biHeight;
; 396  :                 if(pVih->AvgTimePerFrame != 0)

	mov	esi, DWORD PTR tv262[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	ecx, DWORD PTR [esi+40]
	mov	esi, DWORD PTR [esi+44]
	mov	edi, ecx
	or	edi, esi
	je	SHORT $LN2@AddOutput

; 397  :                     outputInfo->minFrameInterval = outputInfo->maxFrameInterval = pVih->AvgTimePerFrame;

	mov	DWORD PTR [eax+20], esi
	mov	edx, esi

; 398  :                 else

	jmp	SHORT $LN36@AddOutput
$LN2@AddOutput:

; 399  :                     outputInfo->minFrameInterval = outputInfo->maxFrameInterval = 10000000/30; //elgato hack

	mov	ecx, 333333				; 00051615H
	mov	DWORD PTR [eax+20], edx
$LN36@AddOutput:
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+16], ecx

; 400  : 
; 401  :                 outputInfo->xGranularity = outputInfo->yGranularity = 1;

	mov	ecx, 1
	mov	DWORD PTR [eax+12], edx

; 406  :             outputInfo->bUsingFourCC = bUsingFourCC;

	mov	dl, BYTE PTR _bUsingFourCC$88757[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	ecx, DWORD PTR _type$[ebp]
	pop	edi
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+48], dl
	pop	esi

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@AddOutput:

; 407  : 
; 408  :             return;
; 409  :         }
; 410  :     }
; 411  : 
; 412  :     DeleteMediaType(pMT);

	test	ebx, ebx
	je	SHORT $LN27@AddOutput
	cmp	DWORD PTR [ebx+64], 0
	mov	esi, DWORD PTR __imp__CoTaskMemFree@4
	je	SHORT $LN31@AddOutput
	mov	eax, DWORD PTR [ebx+68]
	push	eax
	call	esi
	xor	eax, eax
	mov	DWORD PTR [ebx+64], eax
	mov	DWORD PTR [ebx+68], eax
$LN31@AddOutput:
	mov	eax, DWORD PTR [ebx+60]
	test	eax, eax
	je	SHORT $LN30@AddOutput
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR [ebx+60], 0
$LN30@AddOutput:
	push	ebx
	call	esi
$LN27@AddOutput:
	pop	edi
	pop	esi

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z ENDP ; AddOutput
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winbase.inl
_TEXT	ENDS
;	COMDAT _IsolationAwarePrivatenPgViNgRzlnPgpgk@4
_TEXT	SEGMENT
_pulpCookie$ = 8					; size = 4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 PROC		; COMDAT

; 601  : {

	push	ebp
	mov	ebp, esp
	push	edi

; 602  :     BOOL fResult = FALSE;

	xor	edi, edi

; 603  : 
; 604  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, edi
	je	SHORT $LN11@IsolationA@7

; 605  :     {
; 606  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 607  :         OutputDebugStringA(debugString);

	push	OFFSET ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN11@IsolationA@7:

; 608  :     }
; 609  : 
; 610  : #ifdef _M_IX86
; 611  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi
	je	SHORT $LN10@IsolationA@7

; 612  :     {
; 613  :         fResult = TRUE;

	mov	eax, 1
	pop	edi

; 644  : }

	pop	ebp
	ret	4
$LN10@IsolationA@7:
	push	esi

; 614  :         goto Exit;
; 615  :     }
; 616  : #endif
; 617  : 
; 618  :     /* Do not call Init if Cleanup has been called. */
; 619  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, edi
	jne	SHORT $LN7@IsolationA@7

; 620  :     {
; 621  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	test	eax, eax
	je	SHORT $LN20@IsolationA@7
$LN7@IsolationA@7:

; 622  :             goto Exit;
; 623  :     }
; 624  :     /* If Cleanup has been called and id3 was in use, this will activate NULL. */
; 625  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
	mov	esi, DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk
	test	eax, eax
	jne	SHORT $LN15@IsolationA@7
	push	ebx
	mov	ebx, OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	pop	ebx
	test	eax, eax
	je	SHORT $LN20@IsolationA@7
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, eax
$LN15@IsolationA@7:
	mov	ecx, DWORD PTR _pulpCookie$[ebp]
	push	ecx
	push	esi
	call	eax
	test	eax, eax
	je	SHORT $LN20@IsolationA@7

; 626  :         goto Exit;
; 627  : 
; 628  :     fResult = TRUE;

	pop	esi
	mov	eax, 1
	pop	edi

; 644  : }

	pop	ebp
	ret	4
$LN20@IsolationA@7:

; 629  : Exit:
; 630  : #ifdef _M_IX86
; 631  :     if (!fResult)
; 632  :     {
; 633  :         const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0

; 634  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 635  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 636  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED)

	cmp	eax, 127				; 0000007fH
	je	SHORT $LN1@IsolationA@7
	cmp	eax, 126				; 0000007eH
	je	SHORT $LN1@IsolationA@7
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN21@IsolationA@7
$LN1@IsolationA@7:

; 637  :         {
; 638  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	eax, 1
	pop	esi
	mov	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, eax
	pop	edi

; 644  : }

	pop	ebp
	ret	4
$LN21@IsolationA@7:
	pop	esi

; 639  :             fResult = TRUE;
; 640  :         }
; 641  :     }
; 642  : #endif
; 643  :     return fResult;

	mov	eax, edi
	pop	edi

; 644  : }

	pop	ebp
	ret	4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 ENDP
PUBLIC	?GetOutputList@@YAXPAUIPin@@AAV?$List@UMediaOutputInfo@@@@@Z ; GetOutputList
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
;	COMDAT ?GetOutputList@@YAXPAUIPin@@AAV?$List@UMediaOutputInfo@@@@@Z
_TEXT	SEGMENT
_i$88901 = -24						; size = 4
_pMT$88902 = -20					; size = 4
_size$88882 = -16					; size = 4
_mediaTypes$88898 = -12					; size = 4
_pMT$88892 = -12					; size = 4
_count$88881 = -8					; size = 4
_config$ = -4						; size = 4
_outputInfoList$ = 8					; size = 4
?GetOutputList@@YAXPAUIPin@@AAV?$List@UMediaOutputInfo@@@@@Z PROC ; GetOutputList, COMDAT
; _curPin$ = eax

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 417  :     HRESULT hRes;
; 418  : 
; 419  :     IAMStreamConfig *config;
; 420  :     if(SUCCEEDED(curPin->QueryInterface(IID_IAMStreamConfig, (void**)&config)))

	lea	ecx, DWORD PTR _config$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	OFFSET _IID_IAMStreamConfig
	push	esi
	call	edx
	test	eax, eax
	js	$LN1@GetOutputL

; 421  :     {
; 422  :         int count, size;
; 423  :         if(SUCCEEDED(hRes = config->GetNumberOfCapabilities(&count, &size)))

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _size$88882[ebp]
	push	edx
	lea	edx, DWORD PTR _count$88881[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	test	eax, eax
	js	SHORT $LN10@GetOutputL

; 424  :         {
; 425  :             BYTE *capsData = (BYTE*)Allocate(size);

	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _size$88882[ebp]
	mov	edx, DWORD PTR [edx+4]
	push	edi
	push	eax
	call	edx

; 426  : 
; 427  :             int priority = -1;
; 428  :             for(int i=0; i<count; i++)

	xor	edi, edi
	mov	esi, eax
	cmp	DWORD PTR _count$88881[ebp], edi
	jle	SHORT $LN7@GetOutputL
$LL18@GetOutputL:

; 429  :             {
; 430  :                 AM_MEDIA_TYPE *pMT;
; 431  :                 if(SUCCEEDED(config->GetStreamCaps(i, &pMT, capsData)))

	mov	eax, DWORD PTR _config$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	esi
	lea	edx, DWORD PTR _pMT$88892[ebp]
	push	edx
	push	edi
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	call	eax
	test	eax, eax
	js	SHORT $LN8@GetOutputL

; 432  :                     AddOutput(pMT, capsData, false, outputInfoList);

	mov	ecx, DWORD PTR _outputInfoList$[ebp]
	mov	ebx, DWORD PTR _pMT$88892[ebp]
	push	ecx
	push	0
	mov	eax, esi
	call	?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z ; AddOutput
	add	esp, 8
$LN8@GetOutputL:

; 426  : 
; 427  :             int priority = -1;
; 428  :             for(int i=0; i<count; i++)

	inc	edi
	cmp	edi, DWORD PTR _count$88881[ebp]
	jl	SHORT $LL18@GetOutputL
$LN7@GetOutputL:

; 433  :             }
; 434  : 
; 435  :             Free(capsData);

	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+12]
	push	esi
	call	edx
	pop	edi
	jmp	SHORT $LN3@GetOutputL
$LN10@GetOutputL:

; 436  :         }
; 437  :         else if(hRes == E_NOTIMPL) //...usually elgato.

	cmp	eax, -2147467263			; 80004001H
	jne	SHORT $LN3@GetOutputL

; 438  :         {
; 439  :             IEnumMediaTypes *mediaTypes;
; 440  :             if(SUCCEEDED(curPin->EnumMediaTypes(&mediaTypes)))

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+48]
	lea	ecx, DWORD PTR _mediaTypes$88898[ebp]
	push	ecx
	push	esi
	call	edx
	test	eax, eax
	js	SHORT $LN3@GetOutputL

; 441  :             {
; 442  :                 ULONG i;
; 443  : 
; 444  :                 AM_MEDIA_TYPE *pMT;
; 445  :                 if(mediaTypes->Next(1, &pMT, &i) == S_OK)

	mov	eax, DWORD PTR _mediaTypes$88898[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _i$88901[ebp]
	push	edx
	lea	edx, DWORD PTR _pMT$88902[ebp]
	push	edx
	push	1
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	test	eax, eax
	jne	SHORT $LN2@GetOutputL

; 446  :                     AddOutput(pMT, NULL, true, outputInfoList);

	mov	ecx, DWORD PTR _outputInfoList$[ebp]
	mov	ebx, DWORD PTR _pMT$88902[ebp]
	push	ecx
	push	1
	call	?AddOutput@@YAXPAU_AMMediaType@@PAE_NAAV?$List@UMediaOutputInfo@@@@@Z ; AddOutput
	add	esp, 8
$LN2@GetOutputL:

; 447  : 
; 448  :                 mediaTypes->Release();

	mov	eax, DWORD PTR _mediaTypes$88898[ebp]
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@GetOutputL:

; 449  :             }
; 450  :         }
; 451  : 
; 452  :         SafeRelease(config);

	mov	eax, DWORD PTR _config$[ebp]
	pop	ebx
	test	eax, eax
	je	SHORT $LN1@GetOutputL
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@GetOutputL:
	pop	esi

; 453  :     }
; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutputList@@YAXPAUIPin@@AAV?$List@UMediaOutputInfo@@@@@Z ENDP ; GetOutputList
_TEXT	ENDS
PUBLIC	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z	; ConfigureDialogProc
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winbase.inl
xdata$x	SEGMENT
__sehtable$_IsolationAwareDialogBoxParamW@20 DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN12@IsolationA@8
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winuser.inl
xdata$x	ENDS
;	COMDAT _IsolationAwareDialogBoxParamW@20
_TEXT	SEGMENT
_ulpCookie$ = -32					; size = 4
_nResult$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_hWndParent$ = 8					; size = 4
_dwLastError$25083 = 12					; size = 4
_dwInitParam$ = 12					; size = 4
_IsolationAwareDialogBoxParamW@20 PROC			; COMDAT

; 628  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_IsolationAwareDialogBoxParamW@20
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain

; 629  :     INT_PTR nResult = -1;

	mov	DWORD PTR _nResult$[ebp], -1

; 630  :     ULONG_PTR ulpCookie = 0;

	xor	edi, edi
	mov	DWORD PTR _ulpCookie$[ebp], edi

; 631  :     const BOOL fActivateActCtxSuccess =
; 632  : #ifdef _M_IX86
; 633  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 634  : #endif
; 635  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, edi
	jne	SHORT $LN4@IsolationA@8
	lea	eax, DWORD PTR _ulpCookie$[ebp]
	push	eax
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	test	eax, eax

; 636  :     if (!fActivateActCtxSuccess)

	jne	SHORT $LN4@IsolationA@8

; 637  :         return nResult;

	or	eax, -1

; 656  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@IsolationA@8:

; 638  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], edi

; 639  :     {
; 640  :         nResult = DialogBoxParamW(hInstance,lpTemplateName,hWndParent,lpDialogFunc,dwInitParam);

	mov	ecx, DWORD PTR _dwInitParam$[ebp]
	push	ecx
	push	OFFSET ?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc
	mov	edx, DWORD PTR _hWndParent$[ebp]
	push	edx
	push	101					; 00000065H
	push	esi
	call	DWORD PTR __imp__DialogBoxParamW@20
	mov	DWORD PTR _nResult$[ebp], eax

; 641  :     }
; 642  :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN14@IsolationA@8
$LN15@IsolationA@8:

; 653  :         }
; 654  :     }
; 655  :     return nResult;

	mov	eax, DWORD PTR _nResult$[ebp]

; 656  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN12@IsolationA@8:
$LN25@IsolationA@8:
$LN14@IsolationA@8:

; 643  :     {
; 644  : #ifdef _M_IX86
; 645  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN13@IsolationA@8

; 646  : #endif
; 647  :         {
; 648  :             const BOOL fPreserveLastError = (nResult == -1);

	xor	eax, eax
	cmp	DWORD PTR _nResult$[ebp], -1
	sete	al
	mov	edi, eax

; 649  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	test	edi, edi
	je	SHORT $LN9@IsolationA@8
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _dwLastError$25083[ebp], eax
	jmp	SHORT $LN10@IsolationA@8
$LN9@IsolationA@8:
	mov	DWORD PTR _dwLastError$25083[ebp], 0
$LN10@IsolationA@8:

; 650  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	esi, DWORD PTR _ulpCookie$[ebp]
	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA
	test	eax, eax
	jne	SHORT $LN17@IsolationA@8
	mov	ebx, OFFSET ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	test	eax, eax
	je	SHORT $LN18@IsolationA@8
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA, eax
$LN17@IsolationA@8:
	push	esi
	push	0
	call	eax
$LN18@IsolationA@8:

; 651  :             if (fPreserveLastError)

	test	edi, edi
	je	SHORT $LN13@IsolationA@8

; 652  :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR _dwLastError$25083[ebp]
	push	ecx
	call	DWORD PTR __imp__SetLastError@4
$LN13@IsolationA@8:
$LN24@IsolationA@8:
	ret	0
_IsolationAwareDialogBoxParamW@20 ENDP
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@0000000000000000
PUBLIC	__real@00000000
PUBLIC	__real@416312d000000000
PUBLIC	__real@42f00000
EXTRN	__ftol2:PROC
;	COMDAT ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
_BSS	SEGMENT
?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; `ConfigureDialogProc'::`2'::$S1
_BSS	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@416312d000000000
CONST	SEGMENT
__real@416312d000000000 DQ 0416312d000000000r	; 1e+007
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z DD 019930522H
	DD	024H
	DD	FLAT:__unwindtable$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$34
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$14
	DD	0fH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$15
	DD	010H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$17
	DD	012H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$18
	DD	0fH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$35
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$20
	DD	016H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$21
	DD	017H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$22
	DD	017H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$24
	DD	01aH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$25
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$26
	DD	01cH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$27
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$28
	DD	01eH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$29
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$30
	DD	020H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$31
	DD	021H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$32
	DD	022H
	DD	FLAT:__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$33
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_bForceCustomAudioDevice$90253 = -265			; size = 1
_bFoundGlobal$90209 = -265				; size = 1
_bHasAudio$89931 = -265					; size = 1
_bHasAudio$89881 = -265					; size = 1
_bFlipVertical$89469 = -265				; size = 1
tv3130 = -264						; size = 4
tv3125 = -264						; size = 4
tv3117 = -264						; size = 4
tv3106 = -264						; size = 4
tv2869 = -264						; size = 4
tv2619 = -264						; size = 4
tv2580 = -264						; size = 4
tv2531 = -264						; size = 4
tv2507 = -264						; size = 4
tv2495 = -264						; size = 4
tv2453 = -264						; size = 4
_bUseChromaKey$90261 = -264				; size = 4
_fVol$90259 = -264					; size = 4
_bCustomResolution$90220 = -264				; size = 4
_tokens$90198 = -264					; size = 8
_configData$89993 = -264				; size = 4
_minFPS$89962 = -264					; size = 8
_configData$89923 = -264				; size = 4
_hwndDeviceList$89815 = -264				; size = 4
_bUseChromaKey$89589 = -264				; size = 4
_soundOutputType$89574 = -264				; size = 4
_audioDeviceID$89498 = -264				; size = 4
_hwndFlipHorizontal$89468 = -264			; size = 4
tv3552 = -256						; size = 4
_strFPS$90195 = -256					; size = 8
$T106092 = -256						; size = 4
$T106090 = -256						; size = 4
$T106088 = -256						; size = 4
_fpsInfo$89999 = -256					; size = 8
_fpsInfo$89951 = -256					; size = 8
_keyColor$89591 = -256					; size = 4
_pos$89587 = -256					; size = 4
_fVol$89585 = -256					; size = 4
_hwndPreferredList$89570 = -256				; size = 4
_hwndFPS$89466 = -256					; size = 4
tv3301 = -248						; size = 8
tv2860 = -248						; size = 4
_strDevice$90191 = -248					; size = 8
$T106093 = -248						; size = 4
$T106091 = -248						; size = 4
$T106089 = -248						; size = 4
_types$90134 = -248					; size = 8
_bestDist$90012 = -248					; size = 8
_bestFPS$89956 = -248					; size = 8
_similarity$89593 = -248				; size = 4
_bUsePreferredOutput$89571 = -248			; size = 4
_bCustomResolution$89486 = -248				; size = 4
tv3289 = -240						; size = 4
_keySimilarity$90263 = -240				; size = 4
_soundOutputType$90249 = -240				; size = 4
_preferredType$90241 = -240				; size = 4
_audioDeviceID$90180 = -240				; size = 4
_id$90143 = -240					; size = 4
_resolution$89997 = -240				; size = 8
_hwndFPS$89949 = -240					; size = 4
_outputPin$89869 = -240					; size = 4
_id$89855 = -240					; size = 4
_configData$89818 = -240				; size = 4
_hwndTemp$89573 = -240					; size = 4
_deviceID$89497 = -240					; size = 4
_hwndCrossbarlist$89464 = -240				; size = 4
tv3399 = -232						; size = 4
_keySpillReduction$90271 = -232				; size = 4
_fpsVal$90201 = -232					; size = 4
_hwndResolutions$89852 = -232				; size = 4
_hwndDeviceList$89462 = -232				; size = 4
_bUDMError$90235 = -228					; size = 4
_i$90013 = -228						; size = 4
_configData$89861 = -228				; size = 4
_cy$89482 = -228					; size = 4
tv3298 = -224						; size = 8
_strAudioDevice$90193 = -224				; size = 8
_interval$90010 = -224					; size = 8
_tokens$90005 = -224					; size = 8
_strFPS$89964 = -224					; size = 8
_strResolution$89890 = -224				; size = 8
_strResolution$89876 = -224				; size = 8
_frameInterval$89484 = -224				; size = 8
tv3576 = -212						; size = 4
tv3570 = -212						; size = 4
tv3564 = -212						; size = 4
tv3544 = -212						; size = 4
tv3263 = -212						; size = 4
tv3173 = -212						; size = 4
$T106208 = -212						; size = 4
$T106183 = -212						; size = 4
tv2874 = -212						; size = 4
_preferredType$90024 = -212				; size = 4
_fps$90009 = -212					; size = 4
tv1893 = -212						; size = 4
tv1890 = -212						; size = 4
_filter$89927 = -212					; size = 4
_fVol$89675 = -212					; size = 4
_blend$89595 = -212					; size = 4
_strResolution$89526 = -212				; size = 8
_opacity$89474 = -212					; size = 4
_hwndFlip$89467 = -212					; size = 4
_bForceCustomAudioDevice$89583 = -201			; size = 1
_bFlipHorizontal$89471 = -201				; size = 1
tv3592 = -200						; size = 8
_color$90262 = -200					; size = 4
_bFlip$90218 = -200					; size = 4
_strFPSVal$90001 = -200					; size = 8
_bForceCustomAudioDevice$89860 = -200			; size = 4
_hwndAudioDeviceList$89816 = -200			; size = 4
_gamma$89597 = -200					; size = 4
_hwndResolutionList$89465 = -200			; size = 4
tv3787 = -192						; size = 8
tv3784 = -192						; size = 8
tv3610 = -192						; size = 8
_resolution$90188 = -192				; size = 8
_maxDist$90017 = -192					; size = 8
_resolution$89950 = -192				; size = 8
_size$89887 = -192					; size = 8
_strDevice$89476 = -192					; size = 8
_keyBlend$90267 = -184					; size = 4
_deviceID$90177 = -184					; size = 4
_preferredID$90136 = -184				; size = 4
_maxFPS$89963 = -184					; size = 8
_filter$89865 = -184					; size = 4
_hwndAudioList$89463 = -184				; size = 4
tv3607 = -176						; size = 8
_frameInterval$90203 = -176				; size = 8
_minDist$90019 = -176					; size = 8
_frameInterval$89888 = -176				; size = 8
_strAudioDevice$89478 = -176				; size = 8
tv3589 = -168						; size = 8
_bFlipHorizontal$90219 = -168				; size = 4
_bestInterval$90011 = -168				; size = 8
_hwndCrossbarList$89817 = -168				; size = 4
_cx$89480 = -168					; size = 4
$T106084 = -160						; size = 8
$T106085 = -152						; size = 8
$T106080 = -144						; size = 8
$T106086 = -136						; size = 8
$T106082 = -128						; size = 8
$T106087 = -120						; size = 8
$T106079 = -112						; size = 8
$T106075 = -104						; size = 8
$T106083 = -96						; size = 8
$T106076 = -88						; size = 8
$T106081 = -80						; size = 8
$T106077 = -72						; size = 8
__$EHRec$ = -12						; size = 12
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z PROC		; ConfigureDialogProc, COMDAT

; 894  : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	push	-1
	push	__ehhandler$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+324]
	mov	DWORD PTR fs:0, eax

; 895  :     static bool bSelectingColor = false;
; 896  :     static bool bMouseDown = false;
; 897  :     static ColorSelectionData colorData;

	test	BYTE PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, 1
	jne	SHORT $LN174@ConfigureD
	or	DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, 1
	xor	eax, eax
	mov	DWORD PTR __$EHRec$[esp+332], eax
	push	OFFSET ??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData''
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, eax
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, eax
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, eax
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, al
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[esp+332], -1
$LN174@ConfigureD:

; 898  : 
; 899  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	cmp	eax, 512				; 00000200H
	ja	$LN180@ConfigureD
	je	$LN154@ConfigureD
	sub	eax, 2
	je	$LN158@ConfigureD
	sub	eax, 270				; 0000010eH
	je	$LN171@ConfigureD
	dec	eax
	jne	$LN155@ConfigureD

; 1127 : 
; 1128 :         case WM_COMMAND:
; 1129 :             switch(LOWORD(wParam))

	mov	ebx, DWORD PTR _wParam$[ebp]
	movzx	esi, bx
	mov	eax, esi
	mov	DWORD PTR tv3173[esp+324], esi
	cmp	eax, 1001				; 000003e9H
	jg	$LN179@ConfigureD
	je	$LN93@ConfigureD
	dec	eax
	mov	edi, DWORD PTR _hwnd$[ebp]
	je	SHORT $LN29@ConfigureD
	dec	eax
	je	$LN3@ConfigureD
	jmp	$LN155@ConfigureD
$LN29@ConfigureD:

; 1655 :                     }
; 1656 : 
; 1657 :                 case IDOK:
; 1658 :                     {
; 1659 :                         UINT deviceID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_DEVICELIST), CB_GETCURSEL, 0, 0);

	mov	ebx, DWORD PTR __imp__GetDlgItem@8
	push	0
	push	0
	push	327					; 00000147H
	push	1001					; 000003e9H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _deviceID$90177[esp+324], eax

; 1660 :                         if(deviceID == CB_ERR)

	cmp	eax, -1
	je	$LN155@ConfigureD

; 1661 :                             break;
; 1662 :                         UINT audioDeviceID;
; 1663 : 
; 1664 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	esi, eax

; 1665 : 
; 1666 :                         if(!configData->bDShowHasAudio) { audioDeviceID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_GETCURSEL, 0, 0);

	cmp	BYTE PTR [esi+74], 0
	jne	SHORT $LN26@ConfigureD
	push	0
	push	0
	push	327					; 00000147H
	push	1003					; 000003ebH
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _audioDeviceID$90180[esp+324], eax

; 1667 :                             if(audioDeviceID == CB_ERR)

	cmp	eax, -1
	je	$LN155@ConfigureD
$LN26@ConfigureD:

; 1668 :                                 break;
; 1669 :                         }
; 1670 : 
; 1671 :                         SIZE resolution;
; 1672 :                         if(!GetResolution(GetDlgItem(hwnd, IDC_RESOLUTION), resolution, FALSE))

	push	0
	lea	eax, DWORD PTR _resolution$90188[esp+328]
	push	eax
	push	1008					; 000003f0H
	push	edi
	call	ebx
	mov	ecx, eax
	call	?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z ; GetResolution
	add	esp, 8
	test	al, al
	jne	SHORT $LN25@ConfigureD

; 1673 :                         {
; 1674 :                             MessageBox(hwnd, PluginStr("DeviceSelection.InvalidResolution"), NULL, 0);

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	0
	push	0
	push	OFFSET $SG-8212
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	edi
	call	DWORD PTR __imp__MessageBoxW@16

; 1675 :                             break;

	jmp	$LN155@ConfigureD
$LN25@ConfigureD:

; 1676 :                         }
; 1677 : 
; 1678 :                         String strDevice = GetCBText(GetDlgItem(hwnd, IDC_DEVICELIST), deviceID);

	mov	ecx, DWORD PTR _deviceID$90177[esp+324]
	push	ecx
	push	1001					; 000003e9H
	push	edi
	call	ebx
	push	eax
	lea	edx, DWORD PTR _strDevice$90191[esp+332]
	push	edx
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[esp+332], 32	; 00000020H

; 1679 :                         String strAudioDevice = GetCBText(GetDlgItem(hwnd, IDC_AUDIOLIST), audioDeviceID);

	mov	eax, DWORD PTR _audioDeviceID$90180[esp+324]
	push	eax
	push	1003					; 000003ebH
	push	edi
	call	ebx
	push	eax
	lea	ecx, DWORD PTR _strAudioDevice$90193[esp+332]
	push	ecx
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 33		; 00000021H

; 1680 :                         String strFPS = GetEditText(GetDlgItem(hwnd, IDC_FPS));

	push	1010					; 000003f2H
	push	edi
	call	ebx
	push	eax
	lea	edx, DWORD PTR _strFPS$90195[esp+328]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[esp+332], 34		; 00000022H

; 1681 :                         if(schr(strFPS, '-'))

	mov	eax, DWORD PTR _strFPS$90195[esp+324]
	push	45					; 0000002dH
	push	eax
	call	DWORD PTR __imp_?schr@@YGPA_WPB_W_W@Z
	test	eax, eax
	je	SHORT $LN24@ConfigureD

; 1682 :                         {
; 1683 :                             StringList tokens;

	lea	ecx, DWORD PTR _tokens$90198[esp+324]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+332], 35		; 00000023H

; 1684 :                             strFPS.GetTokenList(tokens, '-', FALSE);

	push	0
	push	45					; 0000002dH
	lea	ecx, DWORD PTR _tokens$90198[esp+332]
	push	ecx
	lea	ecx, DWORD PTR _strFPS$90195[esp+336]
	call	DWORD PTR __imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z

; 1685 :                             if(tokens.Num())

	mov	eax, DWORD PTR _tokens$90198[esp+328]
	test	eax, eax
	je	$LN23@ConfigureD

; 1686 :                                 strFPS = tokens.Last();

	mov	edx, DWORD PTR _tokens$90198[esp+324]
	lea	eax, DWORD PTR [edx+eax*8-8]
	push	eax
	lea	ecx, DWORD PTR _strFPS$90195[esp+328]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z

; 1689 :                         }

	mov	BYTE PTR __$EHRec$[esp+332], 34		; 00000022H
	lea	ecx, DWORD PTR _tokens$90198[esp+324]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
$LN24@ConfigureD:

; 1690 : 
; 1691 :                         float fpsVal = 120.0f;
; 1692 :                         if(ValidFloatString(strFPS))

	mov	ecx, DWORD PTR _strFPS$90195[esp+324]
	fld	DWORD PTR __real@42f00000
	push	ecx
	fstp	DWORD PTR _fpsVal$90201[esp+328]
	call	DWORD PTR __imp_?ValidFloatString@@YGHPB_W@Z
	test	eax, eax
	je	SHORT $LN21@ConfigureD

; 1693 :                             fpsVal = strFPS.ToFloat();

	lea	ecx, DWORD PTR _strFPS$90195[esp+324]
	call	DWORD PTR __imp_?ToFloat@String@@QBEMXZ
	fstp	DWORD PTR _fpsVal$90201[esp+324]
$LN21@ConfigureD:

; 1694 : 
; 1695 :                         UINT64 frameInterval = UINT64(10000000.0/double(fpsVal));

	fld	DWORD PTR _fpsVal$90201[esp+324]
	fdivr	QWORD PTR __real@416312d000000000
	call	__ftol2

; 1696 : 
; 1697 :                         if(strFPS == TEXT("0") || fpsVal == 0.0)

	push	OFFSET $SG-8213
	lea	ecx, DWORD PTR _strFPS$90195[esp+328]
	mov	DWORD PTR _frameInterval$90203[esp+328], eax
	mov	DWORD PTR _frameInterval$90203[esp+332], edx
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	jne	$LN19@ConfigureD
	fld	DWORD PTR _fpsVal$90201[esp+324]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN19@ConfigureD

; 1701 :                         }
; 1702 : 
; 1703 :                         if(configData->bCreating)

	cmp	BYTE PTR [esi+73], 0
	je	$LN17@ConfigureD

; 1704 :                         {
; 1705 :                             bool bFoundGlobal;
; 1706 :                             if(CurrentDeviceExists(strDevice, configData->bGlobalSource, bFoundGlobal))

	movzx	edx, BYTE PTR [esi+72]
	mov	eax, DWORD PTR _strDevice$90191[esp+324]
	push	edx
	push	eax
	lea	eax, DWORD PTR _bFoundGlobal$90209[esp+332]
	call	?CurrentDeviceExists@@YA_NPB_W_NAA_N@Z	; CurrentDeviceExists
	add	esp, 8
	test	al, al
	je	$LN17@ConfigureD

; 1707 :                             {
; 1708 :                                 if(bFoundGlobal)

	cmp	BYTE PTR _bFoundGlobal$90209[esp+324], 0

; 1709 :                                     MessageBox(hwnd, PluginStr("DeviceSelection.GlobalExists"), NULL, 0);

	push	0
	push	0
	je	SHORT $LN16@ConfigureD
	push	OFFSET $SG-8215

; 1710 :                                 else

	jmp	SHORT $LN366@ConfigureD
$LN23@ConfigureD:

; 1687 :                             else
; 1688 :                                 break;

	mov	BYTE PTR __$EHRec$[esp+332], 34		; 00000022H
	lea	ecx, DWORD PTR _tokens$90198[esp+324]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
$LN378@ConfigureD:
	mov	BYTE PTR __$EHRec$[esp+332], 33		; 00000021H
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFPS$90195[esp+324]
	call	esi
	mov	BYTE PTR __$EHRec$[esp+332], 32		; 00000020H
	lea	ecx, DWORD PTR _strAudioDevice$90193[esp+324]
	call	esi
	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _strDevice$90191[esp+324]
	call	esi
	jmp	$LN155@ConfigureD
$LN16@ConfigureD:

; 1711 :                                 {
; 1712 :                                     if(configData->bGlobalSource)

	cmp	BYTE PTR [esi+72], 0
	je	SHORT $LN14@ConfigureD

; 1713 :                                         MessageBox(hwnd, PluginStr("DeviceSelection.ExistsSomewhere"), NULL, 0);

	push	OFFSET $SG-8216

; 1714 :                                     else

	jmp	SHORT $LN366@ConfigureD
$LN14@ConfigureD:

; 1715 :                                         MessageBox(hwnd, PluginStr("DeviceSelection.ExistsInScene"), NULL, 0);

	push	OFFSET $SG-8217
$LN366@ConfigureD:
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	edi
	call	DWORD PTR __imp__MessageBoxW@16

; 1716 :                                 }
; 1717 : 
; 1718 :                                 break;

	jmp	SHORT $LN378@ConfigureD
$LN17@ConfigureD:

; 1719 :                             }
; 1720 :                         }
; 1721 : 
; 1722 :                         //------------------------------------------
; 1723 : 
; 1724 :                         BOOL bFlip = SendMessage(GetDlgItem(hwnd, IDC_FLIPIMAGE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1014					; 000003f6H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1725 :                         BOOL bFlipHorizontal = SendMessage(GetDlgItem(hwnd, IDC_FLIPIMAGEH), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	dec	eax
	push	0
	neg	eax
	push	240					; 000000f0H
	sbb	eax, eax
	push	1025					; 00000401H
	inc	eax
	push	edi
	mov	DWORD PTR _bFlip$90218[esp+344], eax
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1726 :                         BOOL bCustomResolution = SendMessage(GetDlgItem(hwnd, IDC_CUSTOMRESOLUTION), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	dec	eax
	push	0
	neg	eax
	push	240					; 000000f0H
	sbb	eax, eax
	push	1016					; 000003f8H
	inc	eax
	push	edi
	mov	DWORD PTR _bFlipHorizontal$90219[esp+344], eax
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1727 : 
; 1728 :                         configData->data->SetString(TEXT("device"), strDevice);

	mov	ecx, DWORD PTR _strDevice$90191[esp+324]
	dec	eax
	neg	eax
	sbb	eax, eax
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	push	OFFSET $SG-8218
	mov	DWORD PTR _bCustomResolution$90220[esp+332], eax
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1729 :                         configData->data->SetString(TEXT("deviceName"), configData->deviceNameList[deviceID]);

	mov	edx, DWORD PTR _deviceID$90177[esp+324]
	push	edx
	lea	ecx, DWORD PTR [esi+24]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8219
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1730 :                         configData->data->SetString(TEXT("deviceID"), configData->deviceIDList[deviceID]);

	mov	eax, DWORD PTR _deviceID$90177[esp+324]
	push	eax
	lea	ecx, DWORD PTR [esi+32]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8220
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1731 : 
; 1732 :                         if(!configData->bDShowHasAudio) {

	cmp	BYTE PTR [esi+74], 0
	jne	SHORT $LN12@ConfigureD

; 1733 :                             configData->data->SetString(TEXT("audioDevice"), strAudioDevice);

	mov	ecx, DWORD PTR _strAudioDevice$90193[esp+324]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8221
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1734 :                             configData->data->SetString(TEXT("audioDeviceName"), configData->audioNameList[audioDeviceID]);

	mov	edx, DWORD PTR _audioDeviceID$90180[esp+324]
	push	edx
	lea	ecx, DWORD PTR [esi+40]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8222
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1735 :                             configData->data->SetString(TEXT("audioDeviceID"), configData->audioIDList[audioDeviceID]);

	mov	eax, DWORD PTR _audioDeviceID$90180[esp+324]
	push	eax
	lea	ecx, DWORD PTR [esi+48]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8223
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z
$LN12@ConfigureD:

; 1736 :                         }
; 1737 : 
; 1738 :                         configData->data->SetInt(TEXT("dshowHasAudio"), configData->bDShowHasAudio);

	movzx	ecx, BYTE PTR [esi+74]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8224
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1739 :                         configData->data->SetInt(TEXT("customResolution"), bCustomResolution);

	mov	edx, DWORD PTR _bCustomResolution$90220[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	push	OFFSET $SG-8225
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1740 :                         configData->data->SetInt(TEXT("resolutionWidth"), resolution.cx);

	mov	eax, DWORD PTR _resolution$90188[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8226
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1741 :                         configData->data->SetInt(TEXT("resolutionHeight"), resolution.cy);

	mov	ecx, DWORD PTR _resolution$90188[esp+328]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8227
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1742 :                         configData->data->SetInt(TEXT("frameInterval"), UINT(frameInterval));

	mov	edx, DWORD PTR _frameInterval$90203[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	push	OFFSET $SG-8228
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1743 :                         configData->data->SetInt(TEXT("flipImage"), bFlip);

	mov	eax, DWORD PTR _bFlip$90218[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8229
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1744 :                         configData->data->SetInt(TEXT("flipImageHorizontal"), bFlipHorizontal);

	mov	ecx, DWORD PTR _bFlipHorizontal$90219[esp+324]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8230
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1745 : 
; 1746 :                         //------------------------------------------
; 1747 : 
; 1748 :                         BOOL bUDMError;
; 1749 :                         UINT opacity = (UINT)SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_GETPOS32, 0, (LPARAM)&bUDMError);

	lea	edx, DWORD PTR _bUDMError$90235[esp+324]
	push	edx
	push	0
	push	1138					; 00000472H
	push	1028					; 00000404H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1750 :                         if(bUDMError) opacity = 100;

	cmp	DWORD PTR _bUDMError$90235[esp+324], 0
	je	SHORT $LN11@ConfigureD
	mov	eax, 100				; 00000064H
$LN11@ConfigureD:

; 1751 : 
; 1752 :                         configData->data->SetInt(TEXT("opacity"), opacity);

	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8231
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1753 : 
; 1754 :                         //------------------------------------------
; 1755 : 
; 1756 :                         UINT preferredType = -1;
; 1757 :                         int id = (int)SendMessage(GetDlgItem(hwnd, IDC_PREFERREDOUTPUT), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1026					; 00000402H
	push	edi
	mov	DWORD PTR _preferredType$90241[esp+344], -1
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1758 :                         if(id != -1)

	cmp	eax, -1
	je	SHORT $LN177@ConfigureD

; 1759 :                             preferredType = (UINT)SendMessage(GetDlgItem(hwnd, IDC_PREFERREDOUTPUT), CB_GETITEMDATA, id, 0);

	push	0
	push	eax
	push	336					; 00000150H
	push	1026					; 00000402H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _preferredType$90241[esp+324], eax

; 1760 : 
; 1761 :                         BOOL bUsePreferredType = preferredType != -1 && SendMessage(GetDlgItem(hwnd, IDC_USEPREFERREDOUTPUT), BM_GETCHECK, 0, 0) == BST_CHECKED;

	cmp	eax, -1
	je	SHORT $LN177@ConfigureD
	push	0
	push	0
	push	240					; 000000f0H
	push	1012					; 000003f4H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN177@ConfigureD
	jmp	SHORT $LN178@ConfigureD
$LN177@ConfigureD:
	xor	eax, eax
$LN178@ConfigureD:

; 1762 :                         configData->data->SetInt(TEXT("usePreferredType"), bUsePreferredType);

	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8232
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1763 :                         configData->data->SetInt(TEXT("preferredType"), preferredType);

	mov	eax, DWORD PTR _preferredType$90241[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8233
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1764 : 
; 1765 :                         //------------------------------------------
; 1766 : 
; 1767 :                         int soundOutputType = 0;
; 1768 :                         if(SendMessage(GetDlgItem(hwnd, IDC_OUTPUTSOUND), BM_GETCHECK, 0, 0) == BST_CHECKED)

	push	0
	push	0
	push	240					; 000000f0H
	push	1029					; 00000405H
	push	edi
	mov	DWORD PTR _soundOutputType$90249[esp+344], 0
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN9@ConfigureD

; 1769 :                             soundOutputType = 1;

	mov	DWORD PTR _soundOutputType$90249[esp+324], eax
	jmp	SHORT $LN7@ConfigureD
$LN9@ConfigureD:

; 1770 :                         else if(SendMessage(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), BM_GETCHECK, 0, 0) == BST_CHECKED)

	push	0
	push	0
	push	240					; 000000f0H
	push	1030					; 00000406H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN7@ConfigureD

; 1771 :                             soundOutputType = 2;

	mov	DWORD PTR _soundOutputType$90249[esp+324], 2
$LN7@ConfigureD:

; 1772 :                         bool bForceCustomAudioDevice = SendMessage(GetDlgItem(hwnd, IDC_FORCECUSTOMAUDIO), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1034					; 0000040aH
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1773 : 
; 1774 :                         configData->data->SetInt(TEXT("soundOutputType"), soundOutputType);

	mov	ecx, DWORD PTR _soundOutputType$90249[esp+324]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	cmp	eax, 1
	push	OFFSET $SG-8234
	sete	BYTE PTR _bForceCustomAudioDevice$90253[esp+332]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1775 :                         configData->data->SetInt(TEXT("forceCustomAudioDevice"), bForceCustomAudioDevice);

	movzx	edx, BYTE PTR _bForceCustomAudioDevice$90253[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	push	OFFSET $SG-8235
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1776 : 
; 1777 :                         int soundTimeOffset = (int)SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1033					; 00000409H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1778 :                         configData->data->SetInt(TEXT("soundTimeOffset"), soundTimeOffset);

	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8236
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1779 : 
; 1780 :                         float fVol = GetVolumeControlValue(GetDlgItem(hwnd, IDC_VOLUME));

	push	1035					; 0000040bH
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z
	fstp	DWORD PTR _fVol$90259[esp+328]

; 1781 :                         configData->data->SetFloat(TEXT("volume"), fVol);

	fld	DWORD PTR _fVol$90259[esp+328]
	mov	ecx, DWORD PTR [esi+4]
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8237
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1782 : 
; 1783 :                         //------------------------------------------
; 1784 : 
; 1785 :                         BOOL bUseChromaKey = SendMessage(GetDlgItem(hwnd, IDC_USECHROMAKEY), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1017					; 000003f9H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	dec	eax
	neg	eax
	sbb	eax, eax

; 1786 :                         DWORD color = CCGetColor(GetDlgItem(hwnd, IDC_COLOR));

	push	1018					; 000003faH
	inc	eax
	push	edi
	mov	DWORD PTR _bUseChromaKey$90261[esp+332], eax
	call	ebx
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _color$90262[esp+324], eax

; 1787 : 
; 1788 :                         UINT keySimilarity = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_GETPOS32, 0, (LPARAM)&bUDMError);

	lea	eax, DWORD PTR _bUDMError$90235[esp+324]
	push	eax
	push	0
	push	1138					; 00000472H
	push	1019					; 000003fbH
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1789 :                         if(bUDMError) keySimilarity = 0;

	cmp	DWORD PTR _bUDMError$90235[esp+324], 0
	mov	DWORD PTR _keySimilarity$90263[esp+324], eax
	je	SHORT $LN6@ConfigureD
	mov	DWORD PTR _keySimilarity$90263[esp+324], 0
$LN6@ConfigureD:

; 1790 : 
; 1791 :                         UINT keyBlend = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_GETPOS32, 0, (LPARAM)&bUDMError);

	lea	ecx, DWORD PTR _bUDMError$90235[esp+324]
	push	ecx
	push	0
	push	1138					; 00000472H
	push	1022					; 000003feH
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1792 :                         if(bUDMError) keyBlend = 10;

	cmp	DWORD PTR _bUDMError$90235[esp+324], 0
	mov	DWORD PTR _keyBlend$90267[esp+324], eax
	je	SHORT $LN5@ConfigureD
	mov	DWORD PTR _keyBlend$90267[esp+324], 10	; 0000000aH
$LN5@ConfigureD:

; 1793 : 
; 1794 :                         int keySpillReduction = (int)SendMessage(GetDlgItem(hwnd, IDC_SPILLREDUCTION), UDM_GETPOS32, 0, (LPARAM)&bUDMError);

	lea	edx, DWORD PTR _bUDMError$90235[esp+324]
	push	edx
	push	0
	push	1138					; 00000472H
	push	1024					; 00000400H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1795 :                         if(bUDMError) keySpillReduction = 0;

	cmp	DWORD PTR _bUDMError$90235[esp+324], 0
	mov	DWORD PTR _keySpillReduction$90271[esp+324], eax
	je	SHORT $LN4@ConfigureD
	mov	DWORD PTR _keySpillReduction$90271[esp+324], 0
$LN4@ConfigureD:

; 1796 : 
; 1797 :                         configData->data->SetInt(TEXT("useChromaKey"), bUseChromaKey);

	mov	eax, DWORD PTR _bUseChromaKey$90261[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z
	push	eax
	push	OFFSET $SG-8238
	call	ebx

; 1798 :                         configData->data->SetInt(TEXT("keyColor"), color);

	mov	ecx, DWORD PTR _color$90262[esp+324]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8239
	call	ebx

; 1799 :                         configData->data->SetInt(TEXT("keySimilarity"), keySimilarity);

	mov	edx, DWORD PTR _keySimilarity$90263[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	push	OFFSET $SG-8240
	call	ebx

; 1800 :                         configData->data->SetInt(TEXT("keyBlend"), keyBlend);

	mov	eax, DWORD PTR _keyBlend$90267[esp+324]
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	OFFSET $SG-8241
	call	ebx

; 1801 :                         configData->data->SetInt(TEXT("keySpillReduction"), keySpillReduction);

	mov	ecx, DWORD PTR _keySpillReduction$90271[esp+324]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	OFFSET $SG-8242
	call	ebx

; 1802 :                     }

	mov	BYTE PTR __$EHRec$[esp+332], 33		; 00000021H
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFPS$90195[esp+324]
	call	esi
	mov	BYTE PTR __$EHRec$[esp+332], 32		; 00000020H
	lea	ecx, DWORD PTR _strAudioDevice$90193[esp+324]
	call	esi
	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _strDevice$90191[esp+324]
	call	esi
	mov	ebx, DWORD PTR _wParam$[ebp]
$LN3@ConfigureD:

; 1803 : 
; 1804 :                 case IDCANCEL:
; 1805 :                     if(LOWORD(wParam) == IDCANCEL)

	cmp	bx, 2
	jne	$LN1@ConfigureD

; 1806 :                     {
; 1807 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	ebx, eax

; 1808 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	esi, eax

; 1809 : 
; 1810 :                         if(source)

	test	esi, esi
	je	$LN1@ConfigureD

; 1811 :                         {
; 1812 :                             source->SetInt(TEXT("timeOffset"),          configData->data->GetInt(TEXT("soundTimeOffset"), 0));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8243
	mov	DWORD PTR tv3130[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv3130[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8244
	mov	ecx, esi
	call	eax

; 1813 :                             source->SetFloat(TEXT("volume"),            configData->data->GetFloat(TEXT("volume"), 1.0f));

	fld1
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	ecx, DWORD PTR [ebx+4]
	fstp	DWORD PTR [esp]
	add	eax, 32					; 00000020H
	push	OFFSET $SG-8245
	mov	DWORD PTR tv2453[esp+332], eax
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	edx, DWORD PTR tv2453[esp+324]
	mov	eax, DWORD PTR [edx]
	push	ecx
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8246
	mov	ecx, esi
	call	eax

; 1814 : 
; 1815 :                             source->SetInt(TEXT("flipImage"),           configData->data->GetInt(TEXT("flipImage"), 0));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8247
	mov	DWORD PTR tv3125[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv3125[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8248
	mov	ecx, esi
	call	eax

; 1816 :                             source->SetInt(TEXT("flipImageHorizontal"), configData->data->GetInt(TEXT("flipImageHorizontal"), 0));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8249
	mov	DWORD PTR tv2495[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv2495[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8250
	mov	ecx, esi
	call	eax

; 1817 :                             source->SetInt(TEXT("opacity"),             configData->data->GetInt(TEXT("opacity"), 100));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	100					; 00000064H
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8251
	mov	DWORD PTR tv2507[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv2507[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8252
	mov	ecx, esi
	call	eax

; 1818 : 
; 1819 :                             source->SetInt(TEXT("useChromaKey"),        configData->data->GetInt(TEXT("useChromaKey"), 0));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8253
	mov	DWORD PTR tv3117[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv3117[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8254
	mov	ecx, esi
	call	eax

; 1820 :                             source->SetInt(TEXT("keyColor"),            configData->data->GetInt(TEXT("keyColor"), 0xFFFFFFFF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	-1
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8255
	mov	DWORD PTR tv2531[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv2531[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8256
	mov	ecx, esi
	call	eax

; 1821 :                             source->SetInt(TEXT("keySimilarity"),       configData->data->GetInt(TEXT("keySimilarity"), 0));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8257
	mov	DWORD PTR tv2580[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv2580[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8258
	mov	ecx, esi
	call	eax

; 1822 :                             source->SetInt(TEXT("keyBlend"),            configData->data->GetInt(TEXT("keyBlend"), 80));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	80					; 00000050H
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8259
	mov	DWORD PTR tv2619[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv2619[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8260
	mov	ecx, esi
	call	eax

; 1823 :                             source->SetInt(TEXT("keySpillReduction"),   configData->data->GetInt(TEXT("keySpillReduction"), 50));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx+4]
	push	50					; 00000032H
	add	eax, 36					; 00000024H
	push	OFFSET $SG-8261
	mov	DWORD PTR tv3106[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR tv3106[esp+324]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET $SG-8262
	mov	ecx, esi
	call	eax
$LN1@ConfigureD:

; 1824 :                         }
; 1825 :                     }
; 1826 : 
; 1827 :                     EndDialog(hwnd, LOWORD(wParam));

	mov	ecx, DWORD PTR tv3173[esp+324]
	push	ecx
	push	edi
	call	DWORD PTR __imp__EndDialog@8
	jmp	$LN155@ConfigureD
$LN19@ConfigureD:

; 1698 :                         {
; 1699 :                             MessageBox(hwnd, PluginStr("DeviceSelection.UnsupportedResolution"), NULL, 0);

	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	0
	push	0
	push	OFFSET $SG-8214
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	edi
	call	DWORD PTR __imp__MessageBoxW@16

; 1700 :                             break;

	jmp	$LN378@ConfigureD
$LN93@ConfigureD:

; 1331 :                     }
; 1332 : 
; 1333 :                 case IDC_DEVICELIST:
; 1334 :                     if(HIWORD(wParam) == CBN_SELCHANGE)

	shr	ebx, 16					; 00000010H
	cmp	ebx, 1
	jne	$LN155@ConfigureD

; 1335 :                     {
; 1336 :                         HWND hwndResolutions = GetDlgItem(hwnd, IDC_RESOLUTION);

	mov	edi, DWORD PTR _hwnd$[ebp]
	mov	esi, DWORD PTR __imp__GetDlgItem@8
	push	1008					; 000003f0H
	push	edi
	call	esi

; 1337 :                         SendMessage(hwndResolutions, CB_RESETCONTENT, 0, 0);

	mov	ebx, DWORD PTR __imp__SendMessageW@16
	push	0
	push	0
	push	331					; 0000014bH
	push	eax
	mov	DWORD PTR _hwndResolutions$89852[esp+340], eax
	call	ebx

; 1338 : 
; 1339 :                         HWND hwndDevices = (HWND)lParam;
; 1340 :                         UINT id = (UINT)SendMessage(hwndDevices, CB_GETCURSEL, 0, 0);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	0
	push	0
	push	327					; 00000147H
	push	edx
	call	ebx
	mov	DWORD PTR _id$89855[esp+324], eax

; 1341 :                         if(id == CB_ERR)
; 1342 :                         {
; 1343 :                             EnableWindow(GetDlgItem(hwnd, IDC_RESOLUTION), FALSE);

	push	0
	cmp	eax, -1
	jne	SHORT $LN91@ConfigureD
	push	1008					; 000003f0H
	push	edi
	call	esi
	mov	ebx, DWORD PTR __imp__EnableWindow@8
	push	eax
	call	ebx

; 1344 :                             EnableWindow(GetDlgItem(hwnd, IDC_FPS), FALSE);

	push	0
	push	1010					; 000003f2H
	push	edi
	call	esi
	push	eax
	call	ebx

; 1345 :                             EnableWindow(GetDlgItem(hwnd, IDC_CONFIG), FALSE);

	push	0
	push	1002					; 000003eaH
	push	edi
	call	esi
	push	eax
	call	ebx

; 1346 :                             EnableWindow(GetDlgItem(hwnd, IDOK), FALSE);

	push	0
	push	1
	push	edi
	call	esi
	push	eax
	call	ebx

; 1347 :                         }
; 1348 :                         else

	jmp	$LN155@ConfigureD
$LN91@ConfigureD:

; 1349 :                         {
; 1350 :                             BOOL bCustomResolution = SendMessage(GetDlgItem(hwnd, IDC_CUSTOMRESOLUTION) , BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	240					; 000000f0H
	push	1016					; 000003f8H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1351 :                             BOOL bForceCustomAudioDevice = SendMessage(GetDlgItem(hwnd, IDC_FORCECUSTOMAUDIO) , BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	lea	ebx, DWORD PTR [eax-1]
	push	240					; 000000f0H
	neg	ebx
	push	1034					; 0000040aH
	sbb	ebx, ebx
	push	edi
	inc	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	dec	eax
	neg	eax

; 1352 : 
; 1353 :                             EnableWindow(GetDlgItem(hwnd, IDC_RESOLUTION), bCustomResolution);

	push	ebx
	sbb	eax, eax
	push	1008					; 000003f0H
	inc	eax
	push	edi
	mov	DWORD PTR _bForceCustomAudioDevice$89860[esp+336], eax
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1354 :                             EnableWindow(GetDlgItem(hwnd, IDC_FPS), bCustomResolution);

	push	ebx
	push	1010					; 000003f2H
	push	edi
	call	esi
	mov	ebx, DWORD PTR __imp__EnableWindow@8
	push	eax
	call	ebx

; 1355 :                             EnableWindow(GetDlgItem(hwnd, IDC_CONFIG), TRUE);

	push	1
	push	1002					; 000003eaH
	push	edi
	call	esi
	push	eax
	call	ebx

; 1356 :                             EnableWindow(GetDlgItem(hwnd, IDOK), TRUE);

	push	1
	push	1
	push	edi
	call	esi
	push	eax
	call	ebx

; 1357 : 
; 1358 :                             ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	ebx, eax

; 1359 :                             IBaseFilter *filter = GetDeviceByValue(CLSID_VideoInputDeviceCategory,
; 1360 :                                                                    L"FriendlyName", configData->deviceNameList[id],
; 1361 :                                                                    L"DevicePath", configData->deviceIDList[id]);

	mov	eax, DWORD PTR _id$89855[esp+324]
	push	eax
	lea	ecx, DWORD PTR [ebx+32]
	mov	DWORD PTR _configData$89861[esp+328], ebx
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _id$89855[esp+324]
	mov	DWORD PTR $T106183[esp+324], ecx
	push	edx
	lea	ecx, DWORD PTR [ebx+24]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, DWORD PTR $T106183[esp+324]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG-8201
	push	eax
	push	OFFSET $SG-8202
	push	OFFSET _CLSID_VideoInputDeviceCategory
	call	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue

; 1362 :                             if(filter)

	mov	ebx, DWORD PTR __imp_??1String@@QAE@XZ
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter$89865[esp+324], eax
	test	eax, eax
	je	$LN89@ConfigureD

; 1363 :                             {
; 1364 :                                 //--------------------------------
; 1365 :                                 // get video info
; 1366 : 
; 1367 :                                 IPin *outputPin = GetOutputPin(filter, &MEDIATYPE_Video);

	mov	edx, eax
	push	edx
	mov	ecx, OFFSET _MEDIATYPE_Video
	call	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
	add	esp, 4
	mov	DWORD PTR _outputPin$89869[esp+324], eax

; 1368 :                                 if(outputPin)

	test	eax, eax
	je	$LN88@ConfigureD

; 1369 :                                 {
; 1370 :                                     configData->ClearOutputList();

	mov	esi, DWORD PTR _configData$89861[esp+324]
	mov	ebx, esi
	call	?ClearOutputList@ConfigDialogData@@QAEXXZ ; ConfigDialogData::ClearOutputList

; 1371 :                                     GetOutputList(outputPin, configData->outputList);

	lea	eax, DWORD PTR [esi+8]
	push	eax
	mov	eax, DWORD PTR _outputPin$89869[esp+328]
	call	?GetOutputList@@YAXPAUIPin@@AAV?$List@UMediaOutputInfo@@@@@Z ; GetOutputList
	add	esp, 4

; 1372 : 
; 1373 :                                     configData->GetResolutions(configData->resolutions);

	lea	eax, DWORD PTR [esi+16]
	push	esi
	mov	DWORD PTR tv3263[esp+328], eax
	call	?GetResolutions@ConfigDialogData@@QAEXAAV?$List@UtagSIZE@@@@@Z ; ConfigDialogData::GetResolutions

; 1374 :                                     for(UINT i=0; i<configData->resolutions.Num(); i++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+20], ebx
	jbe	$LN85@ConfigureD
$LL87@ConfigureD:

; 1375 :                                     {
; 1376 :                                         SIZE &resolution = configData->resolutions[i];

	mov	esi, DWORD PTR tv3263[esp+324]
	mov	eax, ebx
	call	??A?$List@UtagSIZE@@@@QAEAAUtagSIZE@@I@Z ; List<tagSIZE>::operator[]

; 1377 : 
; 1378 :                                         String strResolution;

	lea	ecx, DWORD PTR _strResolution$89876[esp+324]
	mov	esi, eax
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	DWORD PTR __$EHRec$[esp+332], 7

; 1379 :                                         strResolution << IntString(resolution.cx) << TEXT("x") << IntString(resolution.cy);

	mov	ecx, DWORD PTR [esi+4]
	push	10					; 0000000aH
	push	ecx
	lea	edx, DWORD PTR $T106080[esp+332]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv2869[esp+324], eax
	mov	BYTE PTR __$EHRec$[esp+332], 8
	mov	eax, DWORD PTR [esi]
	push	10					; 0000000aH
	push	eax
	lea	ecx, DWORD PTR $T106079[esp+332]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 9
	mov	edx, DWORD PTR tv2869[esp+324]
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	push	edx
	push	OFFSET $SG-8203
	push	eax
	lea	ecx, DWORD PTR _strResolution$89876[esp+336]
	call	esi
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	esi
	mov	BYTE PTR __$EHRec$[esp+332], 8
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T106079[esp+324]
	call	esi
	mov	BYTE PTR __$EHRec$[esp+332], 7
	lea	ecx, DWORD PTR $T106080[esp+324]
	call	esi

; 1380 :                                         SendMessage(hwndResolutions, CB_ADDSTRING, 0, (LPARAM)strResolution.Array());

	mov	eax, DWORD PTR _strResolution$89876[esp+324]
	mov	ecx, DWORD PTR _hwndResolutions$89852[esp+324]
	push	eax
	push	0
	push	323					; 00000143H
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1381 :                                     }

	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _strResolution$89876[esp+324]
	call	esi
	mov	edx, DWORD PTR _configData$89861[esp+324]
	inc	ebx
	cmp	ebx, DWORD PTR [edx+20]
	jb	$LL87@ConfigureD
$LN85@ConfigureD:

; 1382 : 
; 1383 :                                     outputPin->Release();

	mov	eax, DWORD PTR _outputPin$89869[esp+324]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	ebx, DWORD PTR __imp_??1String@@QAE@XZ
	mov	esi, DWORD PTR __imp__GetDlgItem@8
$LN88@ConfigureD:

; 1384 :                                     outputPin = NULL;
; 1385 :                                 }
; 1386 : 
; 1387 :                                 //--------------------------------
; 1388 :                                 // get audio info
; 1389 : 
; 1390 :                                 bool bHasAudio = false;
; 1391 : 
; 1392 :                                 outputPin = GetOutputPin(filter, &MEDIATYPE_Audio);

	mov	eax, DWORD PTR _filter$89865[esp+324]
	push	eax
	mov	ecx, OFFSET _MEDIATYPE_Audio
	mov	BYTE PTR _bHasAudio$89881[esp+328], 0
	call	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
	add	esp, 4

; 1393 :                                 if(outputPin)

	test	eax, eax
	je	SHORT $LN84@ConfigureD

; 1394 :                                 {
; 1395 :                                     bHasAudio = true;
; 1396 :                                     outputPin->Release();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	mov	BYTE PTR _bHasAudio$89881[esp+328], 1
	call	edx
$LN84@ConfigureD:

; 1397 :                                 }
; 1398 : 
; 1399 :                                 configData->bDShowHasAudio = bHasAudio;

	mov	ecx, DWORD PTR _configData$89861[esp+324]
	mov	al, BYTE PTR _bHasAudio$89881[esp+324]
	mov	BYTE PTR [ecx+74], al

; 1400 : 
; 1401 :                                 EnableWindow(GetDlgItem(hwnd, IDC_NOSOUND),          bHasAudio);

	movzx	eax, al
	push	eax
	push	1031					; 00000407H
	push	edi
	mov	DWORD PTR tv3289[esp+336], eax
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1402 :                                 EnableWindow(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), bHasAudio);

	mov	edx, DWORD PTR tv3289[esp+324]
	push	edx
	push	1030					; 00000406H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1403 :                                 EnableWindow(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      bHasAudio);

	mov	eax, DWORD PTR tv3289[esp+324]
	push	eax
	push	1029					; 00000405H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1404 :                                 EnableWindow(GetDlgItem(hwnd, IDC_VOLUME),           bHasAudio);

	mov	ecx, DWORD PTR tv3289[esp+324]
	push	ecx
	push	1035					; 0000040bH
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1405 :                                 if(!bForceCustomAudioDevice && bHasAudio) EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        false);

	cmp	DWORD PTR _bForceCustomAudioDevice$89860[esp+324], 0
	jne	SHORT $LN83@ConfigureD
	cmp	BYTE PTR _bHasAudio$89881[esp+324], 0
	je	SHORT $LN326@ConfigureD
	push	0
	jmp	SHORT $LN367@ConfigureD
$LN83@ConfigureD:

; 1406 :                                 else if(!bHasAudio) EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        true);

	cmp	BYTE PTR _bHasAudio$89881[esp+324], 0
	jne	$LN80@ConfigureD
$LN326@ConfigureD:
	push	1
$LN367@ConfigureD:
	push	1003					; 000003ebH
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1407 : 
; 1408 :                                 if(!bHasAudio)

	cmp	BYTE PTR _bHasAudio$89881[esp+324], 0
	jne	SHORT $LN80@ConfigureD

; 1409 :                                 {
; 1410 :                                     SendMessage(GetDlgItem(hwnd, IDC_NOSOUND),          BM_SETCHECK, BST_UNCHECKED,   0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1031					; 00000407H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1411 :                                     SendMessage(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1030					; 00000406H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1412 :                                     SendMessage(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1029					; 00000405H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1413 : 
; 1414 :                                     EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET),      FALSE);

	push	0
	push	1033					; 00000409H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1415 :                                     EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), FALSE);

	push	0
	push	1032					; 00000408H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN80@ConfigureD:

; 1416 :                                 }
; 1417 : 
; 1418 :                                 filter->Release();

	mov	eax, DWORD PTR _filter$89865[esp+324]
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN89@ConfigureD:

; 1419 :                             }
; 1420 : 
; 1421 :                             //-------------------------------------------------
; 1422 : 
; 1423 :                             SIZE size;
; 1424 :                             UINT64 frameInterval;
; 1425 :                             if(GetClosestResolution(configData->outputList, size, frameInterval))

	mov	eax, DWORD PTR _configData$89861[esp+324]
	lea	ecx, DWORD PTR _frameInterval$89888[esp+324]
	push	ecx
	lea	edx, DWORD PTR _size$89887[esp+328]
	push	edx
	add	eax, 8
	push	eax
	call	?GetClosestResolution@@YA_NAAV?$List@UMediaOutputInfo@@@@AAUtagSIZE@@AA_K@Z ; GetClosestResolution
	add	esp, 12					; 0000000cH
	test	al, al
	je	$LN79@ConfigureD

; 1426 :                             {
; 1427 :                                 String strResolution;

	lea	ecx, DWORD PTR _strResolution$89890[esp+324]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	DWORD PTR __$EHRec$[esp+332], 10	; 0000000aH

; 1428 :                                 strResolution << UIntString(size.cx) << TEXT("x") << UIntString(size.cy);

	mov	ecx, DWORD PTR _size$89887[esp+328]
	push	10					; 0000000aH
	push	ecx
	lea	edx, DWORD PTR $T106082[esp+332]
	push	edx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv2874[esp+324], eax
	mov	BYTE PTR __$EHRec$[esp+332], 11		; 0000000bH
	mov	eax, DWORD PTR _size$89887[esp+324]
	push	10					; 0000000aH
	push	eax
	lea	ecx, DWORD PTR $T106081[esp+332]
	push	ecx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 12		; 0000000cH
	mov	edx, DWORD PTR tv2874[esp+324]
	push	edx
	push	OFFSET $SG-8204
	push	eax
	lea	ecx, DWORD PTR _strResolution$89890[esp+336]
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+332], 11		; 0000000bH
	lea	ecx, DWORD PTR $T106081[esp+324]
	call	ebx
	mov	BYTE PTR __$EHRec$[esp+332], 10		; 0000000aH
	lea	ecx, DWORD PTR $T106082[esp+324]
	call	ebx

; 1429 : 
; 1430 :                                 SendMessage(hwndResolutions, WM_SETTEXT, 0, (LPARAM)strResolution.Array());

	mov	eax, DWORD PTR _strResolution$89890[esp+324]
	mov	ecx, DWORD PTR _hwndResolutions$89852[esp+324]
	push	eax
	push	0
	push	12					; 0000000cH
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1431 :                                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_RESOLUTION, CBN_EDITCHANGE), (LPARAM)hwndResolutions);

	mov	edx, DWORD PTR _hwndResolutions$89852[esp+324]
	push	edx
	push	328688					; 000503f0H
	push	273					; 00000111H
	push	edi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1432 : 
; 1433 :                                 HWND hwndFPS = GetDlgItem(hwnd, IDC_FPS);

	push	1010					; 000003f2H
	push	edi
	call	esi

; 1434 :                                 SetWindowText(hwndFPS, FloatString(10000000.0/double(frameInterval)));

	mov	ecx, DWORD PTR _frameInterval$89888[esp+324]
	mov	DWORD PTR tv3787[esp+324], ecx
	mov	esi, eax
	mov	eax, DWORD PTR _frameInterval$89888[esp+328]
	mov	ecx, eax
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR tv3787[esp+328], eax
	fild	QWORD PTR tv3787[esp+324]
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv3784[esp+328], ecx
	mov	DWORD PTR tv3784[esp+324], 0
	fild	QWORD PTR tv3784[esp+324]
	sub	esp, 8
	lea	edx, DWORD PTR $T106083[esp+332]
	fchs
	faddp	ST(1), ST(0)
	fdivr	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR [esp]
	push	edx
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 13		; 0000000dH
	mov	eax, DWORD PTR [eax]
	push	eax
	push	esi
	call	DWORD PTR __imp__SetWindowTextW@8
	mov	BYTE PTR __$EHRec$[esp+332], 10		; 0000000aH
	lea	ecx, DWORD PTR $T106083[esp+324]
	call	ebx

; 1435 :                             }

	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _strResolution$89890[esp+324]
	call	ebx

; 1436 :                             else

	jmp	$LN155@ConfigureD
$LN79@ConfigureD:

; 1437 :                             {
; 1438 :                                 SendMessage(hwndResolutions, CB_SETCURSEL, 0, 0);

	mov	esi, DWORD PTR _hwndResolutions$89852[esp+324]
	push	0
	push	0
	push	334					; 0000014eH
	push	esi
	call	DWORD PTR __imp__SendMessageW@16

; 1439 :                                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_RESOLUTION, CBN_SELCHANGE), (LPARAM)hwndResolutions);

	push	esi
	push	66544					; 000103f0H
	push	273					; 00000111H
	push	edi

; 1440 :                             }
; 1441 :                         }
; 1442 :                     }
; 1443 :                     break;

	jmp	$LN368@ConfigureD
$LN179@ConfigureD:

; 1127 : 
; 1128 :         case WM_COMMAND:
; 1129 :             switch(LOWORD(wParam))

	sub	eax, 1002				; 000003eaH
	cmp	eax, 33					; 00000021H
	ja	$LN155@ConfigureD
	movzx	eax, BYTE PTR $LN331@ConfigureD[eax]
	jmp	DWORD PTR $LN379@ConfigureD[eax*4]
$LN142@ConfigureD:

; 1130 :             {
; 1131 :                 case IDC_CUSTOMRESOLUTION:
; 1132 :                     {
; 1133 :                         HWND hwndUseCustomResolution = (HWND)lParam;
; 1134 :                         BOOL bCustomResolution = SendMessage(hwndUseCustomResolution, BM_GETCHECK, 0, 0) == BST_CHECKED;

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	0
	push	0
	push	240					; 000000f0H
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1135 : 
; 1136 :                         EnableWindow(GetDlgItem(hwnd, IDC_RESOLUTION), bCustomResolution);

	mov	edi, DWORD PTR _hwnd$[ebp]
	mov	ebx, DWORD PTR __imp__GetDlgItem@8
	lea	esi, DWORD PTR [eax-1]
	neg	esi
	sbb	esi, esi
	inc	esi
	push	esi
	push	1008					; 000003f0H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1137 :                         EnableWindow(GetDlgItem(hwnd, IDC_FPS), bCustomResolution);

	push	esi
	push	1010					; 000003f2H
	push	edi
	call	ebx
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1138 :                         break;

	jmp	$LN155@ConfigureD
$LN141@ConfigureD:

; 1139 :                     }
; 1140 : 
; 1141 :                 case IDC_NOSOUND:
; 1142 :                 case IDC_PLAYDESKTOPSOUND:
; 1143 :                 case IDC_OUTPUTSOUND:
; 1144 :                     if(HIWORD(wParam) == BN_CLICKED)

	mov	edx, ebx
	shr	edx, 16					; 00000010H
	test	edx, edx
	jne	$LN155@ConfigureD

; 1145 :                     {
; 1146 :                         EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET),      LOWORD(wParam) == IDC_OUTPUTSOUND);

	mov	edi, DWORD PTR _hwnd$[ebp]
	xor	ecx, ecx
	mov	eax, 1029				; 00000405H
	cmp	bx, ax
	sete	cl
	mov	esi, ecx
	push	esi
	push	1033					; 00000409H
	push	edi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1147 :                         EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), LOWORD(wParam) == IDC_OUTPUTSOUND);

	push	esi
	mov	esi, DWORD PTR __imp__GetDlgItem@8
	push	1032					; 00000408H
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1148 :                         EnableWindow(GetDlgItem(hwnd, IDC_VOLUME),          LOWORD(wParam) != IDC_NOSOUND);

	xor	eax, eax
	mov	edx, 1031				; 00000407H
	cmp	bx, dx
	setne	al
	push	eax
	push	1035					; 0000040bH
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1149 :                     }
; 1150 :                     break;

	jmp	$LN155@ConfigureD
$LN139@ConfigureD:

; 1151 : 
; 1152 :                 case IDC_VOLUME:
; 1153 :                     if(HIWORD(wParam) == VOLN_ADJUSTING || HIWORD(wParam) == VOLN_FINALVALUE)

	shr	ebx, 16					; 00000010H
	mov	ecx, 768				; 00000300H
	cmp	bx, cx
	je	SHORT $LN137@ConfigureD
	mov	edx, 769				; 00000301H
	cmp	bx, dx
	jne	$LN155@ConfigureD
$LN137@ConfigureD:

; 1154 :                     {
; 1155 :                         if(IsWindowEnabled((HWND)lParam))

	mov	esi, DWORD PTR _lParam$[ebp]
	push	esi
	call	DWORD PTR __imp__IsWindowEnabled@4
	test	eax, eax
	je	$LN155@ConfigureD

; 1156 :                         {
; 1157 :                             float fVol = GetVolumeControlValue((HWND)lParam);

	push	esi
	call	DWORD PTR __imp_?GetVolumeControlValue@@YAMPAUHWND__@@@Z
	fstp	DWORD PTR _fVol$89675[esp+328]

; 1158 : 
; 1159 :                             ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	eax, DWORD PTR _hwnd$[ebp]
	add	esp, 4
	push	8
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8

; 1160 :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1161 :                             if(source)

	test	eax, eax
	je	$LN155@ConfigureD

; 1162 :                                 source->SetFloat(TEXT("volume"), fVol);

	mov	edx, DWORD PTR [eax]
	fld	DWORD PTR _fVol$89675[esp+324]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+32]
	push	OFFSET $SG-8189
	call	eax

; 1163 :                         }
; 1164 :                     }
; 1165 :                     break;

	jmp	$LN155@ConfigureD
$LN134@ConfigureD:

; 1166 : 
; 1167 :                 case IDC_USECHROMAKEY:
; 1168 :                     {
; 1169 :                         HWND hwndUseColorKey = (HWND)lParam;
; 1170 :                         BOOL bUseChromaKey = SendMessage(hwndUseColorKey, BM_GETCHECK, 0, 0) == BST_CHECKED;

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	0
	push	0
	push	240					; 000000f0H
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1171 : 
; 1172 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ebx, DWORD PTR _hwnd$[ebp]
	lea	edi, DWORD PTR [eax-1]
	neg	edi
	push	8
	sbb	edi, edi
	push	ebx
	inc	edi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1173 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1174 :                         if(source)

	test	eax, eax
	je	SHORT $LN133@ConfigureD

; 1175 :                             source->SetInt(TEXT("useChromaKey"), bUseChromaKey);

	mov	edx, DWORD PTR [eax]
	push	edi
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8190
	call	eax
$LN133@ConfigureD:

; 1176 : 
; 1177 :                         EnableWindow(GetDlgItem(hwnd, IDC_COLOR), bUseChromaKey);

	mov	esi, DWORD PTR __imp__GetDlgItem@8
	push	edi
	push	1018					; 000003faH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1178 :                         EnableWindow(GetDlgItem(hwnd, IDC_SELECTCOLOR), bUseChromaKey);

	push	edi
	push	1015					; 000003f7H
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1179 :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), bUseChromaKey);

	push	edi
	push	1020					; 000003fcH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1180 :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), bUseChromaKey);

	push	edi
	push	1019					; 000003fbH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1181 :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), bUseChromaKey);

	push	edi
	push	1021					; 000003fdH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1182 :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND), bUseChromaKey);

	push	edi
	push	1022					; 000003feH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1183 :                         EnableWindow(GetDlgItem(hwnd, IDC_SPILLREDUCTION_EDIT), bUseChromaKey);

	push	edi
	push	1023					; 000003ffH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1184 :                         EnableWindow(GetDlgItem(hwnd, IDC_SPILLREDUCTION), bUseChromaKey);

	push	edi
	push	1024					; 00000400H
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1185 :                         break;

	jmp	$LN155@ConfigureD
$LN132@ConfigureD:

; 1186 :                     }
; 1187 : 
; 1188 :                 case IDC_SELECTCOLOR:
; 1189 :                     {
; 1190 :                         if(!bSelectingColor)

	cmp	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	jne	$LN155@ConfigureD

; 1191 :                         {
; 1192 :                             if(colorData.Init())

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Init@ColorSelectionData@@QAE_NXZ	; ColorSelectionData::Init
	test	al, al
	je	$LN130@ConfigureD

; 1193 :                             {
; 1194 :                                 bMouseDown = false;
; 1195 :                                 bSelectingColor = true;
; 1196 :                                 SetCapture(hwnd);

	mov	esi, DWORD PTR _hwnd$[ebp]
	push	esi
	mov	BYTE PTR ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	mov	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1
	call	DWORD PTR __imp__SetCapture@4

; 1197 :                                 HCURSOR hCursor = (HCURSOR)LoadImage(hinstMain, MAKEINTRESOURCE(IDC_COLORPICKER), IMAGE_CURSOR, 32, 32, 0);

	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	0
	push	32					; 00000020H
	push	32					; 00000020H
	push	2
	push	1015					; 000003f7H
	push	ecx
	call	DWORD PTR __imp__LoadImageW@24

; 1198 :                                 SetCursor(hCursor);

	push	eax
	call	DWORD PTR __imp__SetCursor@4

; 1199 : 
; 1200 :                                 ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	esi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1201 :                                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1202 :                                 if(source)

	test	eax, eax
	je	$LN155@ConfigureD

; 1203 :                                     source->SetInt(TEXT("useChromaKey"), false);

	mov	edx, DWORD PTR [eax]
	push	0
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8191
	call	eax

; 1204 :                             }
; 1205 :                             else

	jmp	$LN155@ConfigureD
$LN127@ConfigureD:

; 1206 :                                 colorData.Clear();
; 1207 :                         }
; 1208 :                         break;
; 1209 :                     }
; 1210 : 
; 1211 :                 case IDC_COLOR:
; 1212 :                     {
; 1213 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	8
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8

; 1214 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	esi, eax

; 1215 : 
; 1216 :                         if(source)

	test	esi, esi
	je	$LN155@ConfigureD

; 1217 :                         {
; 1218 :                             DWORD color = CCGetColor((HWND)lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z

; 1219 :                             source->SetInt(TEXT("keyColor"), color);

	mov	edx, DWORD PTR [esi]
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8192
	mov	ecx, esi
	call	eax

; 1220 :                         }
; 1221 :                         break;

	jmp	$LN155@ConfigureD
$LN125@ConfigureD:

; 1222 :                     }
; 1223 : 
; 1224 :                 case IDC_FORCECUSTOMAUDIO:
; 1225 :                     {
; 1226 :                         if(HIWORD(wParam) == BN_CLICKED)

	shr	ebx, 16					; 00000010H
	test	ebx, ebx
	jne	$LN155@ConfigureD

; 1227 :                         {
; 1228 :                             ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ebx, DWORD PTR _hwnd$[ebp]
	push	8
	push	ebx
	call	DWORD PTR __imp__GetWindowLongW@8

; 1229 :                             HWND hwndForceAudio = (HWND)lParam;
; 1230 :                             BOOL bForceCustomAudioChk = SendMessage(hwndForceAudio, BM_GETCHECK, 0, 0) == BST_CHECKED;

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	0
	push	0
	push	240					; 000000f0H
	push	ecx
	mov	esi, eax
	call	DWORD PTR __imp__SendMessageW@16

; 1231 : 
; 1232 :                             configData->data->SetInt(TEXT("forceCustomAudioDevice"), bForceCustomAudioChk);

	mov	ecx, DWORD PTR [esi+4]
	lea	edi, DWORD PTR [eax-1]
	neg	edi
	sbb	edi, edi
	inc	edi
	push	edi
	push	OFFSET $SG-8193
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1233 : 
; 1234 :                             if(configData->bDShowHasAudio) {

	cmp	BYTE PTR [esi+74], 0
	je	SHORT $LN123@ConfigureD

; 1235 :                                 EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        bForceCustomAudioChk);

	mov	esi, DWORD PTR __imp__GetDlgItem@8
	push	edi
	push	1003					; 000003ebH
	push	ebx
	call	esi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1236 :                                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_DEVICELIST, CBN_SELCHANGE), (LPARAM)GetDlgItem(hwnd, IDC_DEVICELIST));

	push	1001					; 000003e9H
	push	ebx
	call	esi
	push	eax
	push	66537					; 000103e9H
	push	273					; 00000111H
	push	ebx
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1237 :                                 if(bForceCustomAudioChk) ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_DEVICELIST, CBN_SELCHANGE), (LPARAM)GetDlgItem(hwnd, IDC_AUDIOLIST));

	test	edi, edi
	je	$LN155@ConfigureD
	push	1003					; 000003ebH
	push	ebx
	call	esi
	push	eax
	push	66537					; 000103e9H
	push	273					; 00000111H
	push	ebx

; 1238 :                             }
; 1239 :                             else {

	jmp	$LN368@ConfigureD
$LN123@ConfigureD:

; 1240 :                                 EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        true);

	push	1
	push	1003					; 000003ebH
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1241 :                             }
; 1242 :                         }
; 1243 :                     }
; 1244 :                     break;

	jmp	$LN155@ConfigureD
$LN120@ConfigureD:

; 1245 : 
; 1246 :                 case IDC_FLIPIMAGE:
; 1247 :                 case IDC_FLIPIMAGEH:
; 1248 :                     if(HIWORD(wParam) == BN_CLICKED)

	shr	ebx, 16					; 00000010H
	test	ebx, ebx
	jne	$LN155@ConfigureD

; 1249 :                     {
; 1250 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	edx, DWORD PTR _hwnd$[ebp]
	push	8
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8

; 1251 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	push	eax
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	edi, eax

; 1252 :                         if(source)

	test	edi, edi
	je	$LN155@ConfigureD

; 1253 :                         {
; 1254 :                             HWND hwndFlip = (HWND)lParam;
; 1255 :                             BOOL bFlipImage = SendMessage(hwndFlip, BM_GETCHECK, 0, 0) == BST_CHECKED;

	mov	edx, DWORD PTR _lParam$[ebp]
	push	ebx
	push	ebx
	push	240					; 000000f0H
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	dec	eax
	neg	eax
	sbb	eax, eax
	inc	eax

; 1256 : 
; 1257 :                             switch(LOWORD(wParam))

	sub	esi, 1014				; 000003f6H
	je	SHORT $LN115@ConfigureD
	sub	esi, 11					; 0000000bH
	jne	$LN155@ConfigureD

; 1260 :                                 case IDC_FLIPIMAGEH: source->SetInt(TEXT("flipImageHorizontal"), bFlipImage); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8195
	mov	ecx, edi
	call	eax
	jmp	$LN155@ConfigureD
$LN115@ConfigureD:

; 1258 :                             {
; 1259 :                                 case IDC_FLIPIMAGE:  source->SetInt(TEXT("flipImage"), bFlipImage); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8194
	mov	ecx, edi
	call	eax

; 1261 :                             }
; 1262 :                         }
; 1263 :                     }
; 1264 :                     break;

	jmp	$LN155@ConfigureD
$LN113@ConfigureD:

; 1265 : 
; 1266 :                 case IDC_TIMEOFFSET_EDIT:
; 1267 :                 case IDC_OPACITY_EDIT:
; 1268 :                 case IDC_BASETHRESHOLD_EDIT:
; 1269 :                 case IDC_BLEND_EDIT:
; 1270 :                 case IDC_SPILLREDUCTION_EDIT:
; 1271 :                     if(HIWORD(wParam) == EN_CHANGE)

	shr	ebx, 16					; 00000010H
	cmp	ebx, 768				; 00000300H
	jne	$LN155@ConfigureD

; 1272 :                     {
; 1273 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ebx, DWORD PTR _hwnd$[ebp]
	push	8
	push	ebx
	call	DWORD PTR __imp__GetWindowLongW@8

; 1274 :                         if(configData)

	test	eax, eax
	je	$LN155@ConfigureD

; 1275 :                         {
; 1276 :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	push	ecx
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	edi, eax

; 1277 : 
; 1278 :                             if(source)

	test	edi, edi
	je	$LN155@ConfigureD

; 1279 :                             {
; 1280 :                                 HWND hwndVal = NULL;
; 1281 :                                 switch(LOWORD(wParam))

	add	esi, -1020				; fffffc04H
	xor	eax, eax
	cmp	esi, 12					; 0000000cH
	ja	SHORT $LN108@ConfigureD
	movzx	ecx, BYTE PTR $LN332@ConfigureD[esi]
	jmp	DWORD PTR $LN380@ConfigureD[ecx*4]
$LN107@ConfigureD:

; 1282 :                                 {
; 1283 :                                     case IDC_TIMEOFFSET_EDIT:       hwndVal = GetDlgItem(hwnd, IDC_TIMEOFFSET); break;

	push	1033					; 00000409H
	jmp	SHORT $LN369@ConfigureD
$LN106@ConfigureD:

; 1284 :                                     case IDC_OPACITY_EDIT:          hwndVal = GetDlgItem(hwnd, IDC_OPACITY); break;

	push	1028					; 00000404H
	jmp	SHORT $LN369@ConfigureD
$LN105@ConfigureD:

; 1285 :                                     case IDC_BASETHRESHOLD_EDIT:    hwndVal = GetDlgItem(hwnd, IDC_BASETHRESHOLD); break;

	push	1019					; 000003fbH
	jmp	SHORT $LN369@ConfigureD
$LN104@ConfigureD:

; 1286 :                                     case IDC_BLEND_EDIT:            hwndVal = GetDlgItem(hwnd, IDC_BLEND); break;

	push	1022					; 000003feH
	jmp	SHORT $LN369@ConfigureD
$LN103@ConfigureD:

; 1287 :                                     case IDC_SPILLREDUCTION_EDIT:   hwndVal = GetDlgItem(hwnd, IDC_SPILLREDUCTION); break;

	push	1024					; 00000400H
$LN369@ConfigureD:
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8
$LN108@ConfigureD:

; 1288 :                                 }
; 1289 : 
; 1290 :                                 int val = (int)SendMessage(hwndVal, UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1291 :                                 switch(LOWORD(wParam))

	cmp	esi, 12					; 0000000cH
	ja	$LN155@ConfigureD
	movzx	edx, BYTE PTR $LN333@ConfigureD[esi]
	jmp	DWORD PTR $LN381@ConfigureD[edx*4]
$LN100@ConfigureD:

; 1292 :                                 {
; 1293 :                                     case IDC_TIMEOFFSET_EDIT:       source->SetInt(TEXT("timeOffset"), val); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8196
	mov	ecx, edi
	call	eax
	jmp	$LN155@ConfigureD
$LN99@ConfigureD:

; 1294 :                                     case IDC_OPACITY_EDIT:          source->SetInt(TEXT("opacity"), val); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8197
	mov	ecx, edi
	call	eax
	jmp	$LN155@ConfigureD
$LN98@ConfigureD:

; 1295 :                                     case IDC_BASETHRESHOLD_EDIT:    source->SetInt(TEXT("keySimilarity"), val); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8198
	mov	ecx, edi
	call	eax
	jmp	$LN155@ConfigureD
$LN97@ConfigureD:

; 1296 :                                     case IDC_BLEND_EDIT:            source->SetInt(TEXT("keyBlend"), val); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8199
	mov	ecx, edi
	call	eax
	jmp	$LN155@ConfigureD
$LN96@ConfigureD:

; 1297 :                                     case IDC_SPILLREDUCTION_EDIT:   source->SetInt(TEXT("keySpillReduction"), val); break;

	mov	edx, DWORD PTR [edi]
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8200
	mov	ecx, edi
	call	eax

; 1298 :                                 }
; 1299 :                             }
; 1300 :                         }
; 1301 :                     }
; 1302 :                     break;

	jmp	$LN155@ConfigureD
$LN95@ConfigureD:

; 1303 : 
; 1304 :                 case IDC_USEPREFERREDOUTPUT:
; 1305 :                     {
; 1306 :                         BOOL bUsePreferredOutput = SendMessage(GetDlgItem(hwnd, IDC_USEPREFERREDOUTPUT), BM_GETCHECK, 0, 0) == BST_CHECKED;

	mov	esi, DWORD PTR _hwnd$[ebp]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	0
	push	0
	push	240					; 000000f0H
	push	1012					; 000003f4H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	dec	eax
	neg	eax
	sbb	eax, eax
	inc	eax

; 1307 :                         EnableWindow(GetDlgItem(hwnd, IDC_PREFERREDOUTPUT), bUsePreferredOutput);

	push	eax
	push	1026					; 00000402H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1308 :                         break;

	jmp	$LN155@ConfigureD
$LN94@ConfigureD:

; 1309 :                     }
; 1310 : 
; 1311 :                 case IDC_REFRESH:
; 1312 :                     {
; 1313 :                         HWND hwndDeviceList = GetDlgItem(hwnd, IDC_DEVICELIST);

	mov	esi, DWORD PTR _hwnd$[ebp]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	1001					; 000003e9H
	push	esi
	call	edi

; 1314 :                         HWND hwndAudioDeviceList = GetDlgItem(hwnd, IDC_AUDIOLIST);

	push	1003					; 000003ebH
	push	esi
	mov	DWORD PTR _hwndDeviceList$89815[esp+332], eax
	call	edi

; 1315 :                         HWND hwndCrossbarList = GetDlgItem(hwnd, IDC_CROSSBARLIST);

	push	1006					; 000003eeH
	push	esi
	mov	DWORD PTR _hwndAudioDeviceList$89816[esp+332], eax
	call	edi

; 1316 : 
; 1317 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	esi
	mov	DWORD PTR _hwndCrossbarList$89817[esp+332], eax
	call	DWORD PTR __imp__GetWindowLongW@8

; 1318 : 
; 1319 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_DEVICELIST), CLSID_VideoInputDeviceCategory, &configData->deviceNameList, &configData->deviceIDList);

	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+4
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [ecx+12], edx
	push	1001					; 000003e9H
	lea	ecx, DWORD PTR [eax+32]
	push	esi
	mov	DWORD PTR _configData$89818[esp+348], eax
	lea	ebx, DWORD PTR [eax+24]
	mov	DWORD PTR tv1893[esp+348], ecx
	call	edi
	mov	ecx, DWORD PTR tv1893[esp+340]
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 1320 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioInputDeviceCategory, &configData->audioNameList, &configData->audioIDList);

	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+4
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _configData$89818[esp+340]
	push	1003					; 000003ebH
	push	esi
	lea	edi, DWORD PTR [eax+48]
	lea	ebx, DWORD PTR [eax+40]
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, edi
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 1321 :                         FillOutListOfDevices(GetDlgItem(hwnd, IDC_CROSSBARLIST), AM_KSCATEGORY_CROSSBAR, &configData->crossbarList, &configData->crossbarIDList);

	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+4
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _configData$89818[esp+340]
	push	1006					; 000003eeH
	push	esi
	lea	edi, DWORD PTR [eax+64]
	lea	ebx, DWORD PTR [eax+56]
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, edi
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 1322 : 
; 1323 :                         SendMessage(hwndDeviceList, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndDeviceList$89815[esp+340]
	mov	ebx, DWORD PTR __imp__SendMessageW@16
	add	esp, 16					; 00000010H
	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 1324 :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_DEVICELIST, CBN_SELCHANGE), (LPARAM)hwndDeviceList);

	push	edi
	push	66537					; 000103e9H
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1325 :                         SendMessage(hwndDeviceList, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 1326 :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioDeviceList);

	mov	eax, DWORD PTR _hwndAudioDeviceList$89816[esp+324]
	push	eax
	push	66539					; 000103ebH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1327 :                         SendMessage(hwndCrossbarList, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndCrossbarList$89817[esp+324]
	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 1328 :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_CROSSBARLIST, CBN_SELCHANGE), (LPARAM)hwndCrossbarList);

	push	edi
	push	66542					; 000103eeH

; 1329 : 
; 1330 :                         break;

	jmp	$LN370@ConfigureD
$LN77@ConfigureD:

; 1444 : 
; 1445 :                 case IDC_AUDIOLIST:
; 1446 :                     if(HIWORD(wParam) == CBN_SELCHANGE)

	shr	ebx, 16					; 00000010H
	cmp	ebx, 1
	jne	$LN155@ConfigureD

; 1447 :                     {
; 1448 :                         HWND hwndDevices = (HWND)lParam;
; 1449 :                         UINT id = (UINT)SendMessage(hwndDevices, CB_GETCURSEL, 0, 0);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	0
	push	0
	push	327					; 00000147H
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1450 : 
; 1451 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	esi, DWORD PTR _hwnd$[ebp]
	push	8
	push	esi
	mov	edi, eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	ebx, eax

; 1452 :                         IBaseFilter *filter = GetDeviceByValue(CLSID_AudioInputDeviceCategory,
; 1453 :                                                                 L"FriendlyName", configData->audioNameList[id],
; 1454 :                                                                 L"DevicePath", configData->audioIDList[id]);

	push	edi
	lea	ecx, DWORD PTR [ebx+48]
	mov	DWORD PTR _configData$89923[esp+328], ebx
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	edx, DWORD PTR [eax]
	push	edi
	lea	ecx, DWORD PTR [ebx+40]
	mov	DWORD PTR $T106208[esp+328], edx
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, DWORD PTR $T106208[esp+324]
	mov	eax, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG-8205
	push	eax
	push	OFFSET $SG-8206
	push	OFFSET _CLSID_AudioInputDeviceCategory
	call	?GetDeviceByValue@@YAPAUIBaseFilter@@ABU_GUID@@PA_WPB_W12@Z ; GetDeviceByValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter$89927[esp+324], eax

; 1455 :                         if(filter)

	test	eax, eax
	je	$LN155@ConfigureD

; 1456 :                         {
; 1457 :                             //--------------------------------
; 1458 :                             // get audio info
; 1459 : 
; 1460 :                             bool bHasAudio = false;
; 1461 : 
; 1462 :                             IPin *outputPin = GetOutputPin(filter, &MEDIATYPE_Audio);

	push	eax
	mov	ecx, OFFSET _MEDIATYPE_Audio
	mov	BYTE PTR _bHasAudio$89931[esp+328], 0
	call	?GetOutputPin@@YAPAUIPin@@PAUIBaseFilter@@PBU_GUID@@@Z ; GetOutputPin
	add	esp, 4

; 1463 :                             if(outputPin)

	test	eax, eax
	je	SHORT $LN74@ConfigureD

; 1464 :                             {
; 1465 :                                 bHasAudio = true;
; 1466 :                                 outputPin->Release();

	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR _bHasAudio$89931[esp+328], 1
	call	eax
$LN74@ConfigureD:

; 1467 :                             }
; 1468 : 
; 1469 :                             EnableWindow(GetDlgItem(hwnd, IDC_NOSOUND),          bHasAudio);

	movzx	eax, BYTE PTR _bHasAudio$89931[esp+324]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1031					; 00000407H
	push	esi
	mov	DWORD PTR tv3399[esp+336], eax
	call	edi
	mov	ebx, DWORD PTR __imp__EnableWindow@8
	push	eax
	call	ebx

; 1470 :                             EnableWindow(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), bHasAudio);

	mov	ecx, DWORD PTR tv3399[esp+324]
	push	ecx
	push	1030					; 00000406H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1471 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      bHasAudio);

	mov	edx, DWORD PTR tv3399[esp+324]
	push	edx
	push	1029					; 00000405H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1472 :                             EnableWindow(GetDlgItem(hwnd, IDC_VOLUME),           bHasAudio);

	mov	eax, DWORD PTR tv3399[esp+324]
	push	eax
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1473 :                             if(!configData->bDShowHasAudio) EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        bHasAudio);

	mov	ecx, DWORD PTR _configData$89923[esp+324]
	cmp	BYTE PTR [ecx+74], 0
	jne	SHORT $LN73@ConfigureD
	mov	edx, DWORD PTR tv3399[esp+324]
	push	edx
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	call	ebx
$LN73@ConfigureD:

; 1474 : 
; 1475 :                             if(!bHasAudio)

	cmp	BYTE PTR _bHasAudio$89931[esp+324], 0
	jne	SHORT $LN72@ConfigureD

; 1476 :                             {
; 1477 :                                 MessageBox(NULL, L"Auh.", L"Meh.", MB_OK);

	push	0
	push	OFFSET $SG-8207
	push	OFFSET $SG-8208
	push	0
	call	DWORD PTR __imp__MessageBoxW@16

; 1478 :                                 SendMessage(GetDlgItem(hwnd, IDC_NOSOUND),          BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1031					; 00000407H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1479 :                                 SendMessage(GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND), BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1030					; 00000406H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1480 :                                 SendMessage(GetDlgItem(hwnd, IDC_OUTPUTSOUND),      BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1029					; 00000405H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1481 : 
; 1482 :                                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET),      FALSE);

	push	0
	push	1033					; 00000409H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1483 :                                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), FALSE);

	push	0
	push	1032					; 00000408H
	push	esi
	call	edi
	push	eax
	call	ebx
$LN72@ConfigureD:

; 1484 :                             }
; 1485 : 
; 1486 :                             filter->Release();

	mov	eax, DWORD PTR _filter$89927[esp+324]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx

; 1487 :                         }
; 1488 : 
; 1489 :                             
; 1490 :                     }
; 1491 :                     break;

	jmp	$LN155@ConfigureD
$LN71@ConfigureD:

; 1492 : 
; 1493 :                 case IDC_RESOLUTION:
; 1494 :                     if(HIWORD(wParam) == CBN_EDITCHANGE || HIWORD(wParam) == CBN_SELCHANGE)

	shr	ebx, 16					; 00000010H
	cmp	bx, 5
	je	SHORT $LN69@ConfigureD
	cmp	bx, 1
	jne	$LN155@ConfigureD
$LN69@ConfigureD:

; 1495 :                     {
; 1496 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	edi, DWORD PTR _hwnd$[ebp]
	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1497 : 
; 1498 :                         HWND hwndResolution = (HWND)lParam;
; 1499 :                         HWND hwndFPS        = GetDlgItem(hwnd, IDC_FPS);

	push	1010					; 000003f2H
	push	edi
	mov	esi, eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	edi, eax

; 1500 : 
; 1501 :                         SIZE resolution;
; 1502 :                         FPSInfo fpsInfo;

	xor	eax, eax
	mov	DWORD PTR _hwndFPS$89949[esp+324], edi
	mov	DWORD PTR _fpsInfo$89951[esp+324], eax
	mov	DWORD PTR _fpsInfo$89951[esp+328], eax
	mov	DWORD PTR __$EHRec$[esp+332], 15	; 0000000fH

; 1503 : 
; 1504 :                         SendMessage(hwndFPS, CB_RESETCONTENT, 0, 0);

	push	eax
	push	eax
	push	331					; 0000014bH
	push	edi
	call	DWORD PTR __imp__SendMessageW@16

; 1505 :                         if(!GetResolution(hwndResolution, resolution, HIWORD(wParam) == CBN_SELCHANGE) || !configData->GetResolutionFPSInfo(resolution, fpsInfo))

	xor	eax, eax
	cmp	bx, 1
	sete	al
	lea	ecx, DWORD PTR _resolution$89950[esp+324]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _lParam$[ebp]
	call	?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z ; GetResolution
	add	esp, 8
	test	al, al
	je	$LN67@ConfigureD
	lea	edx, DWORD PTR _fpsInfo$89951[esp+324]
	push	edx
	lea	eax, DWORD PTR _resolution$89950[esp+328]
	push	eax
	push	esi
	call	?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z ; ConfigDialogData::GetResolutionFPSInfo
	test	al, al
	je	$LN67@ConfigureD

; 1509 :                         }
; 1510 : 
; 1511 :                         //-------------------------------------------------------
; 1512 : 
; 1513 :                         double bestFPS = 0.0f;

	fldz

; 1514 :                         UINT64 bestInterval = 0;
; 1515 :                         for(UINT i=0; i<fpsInfo.supportedIntervals.Num(); i++)

	mov	ebx, DWORD PTR __imp_??1String@@QAE@XZ
	xor	edi, edi
	fstp	QWORD PTR _bestFPS$89956[esp+324]
	cmp	DWORD PTR _fpsInfo$89951[esp+328], edi
	jbe	$LN64@ConfigureD
	npad	6
$LL66@ConfigureD:

; 1516 :                         {
; 1517 :                             double minFPS = 10000000.0/double(fpsInfo.supportedIntervals[i].maxFrameInterval);

	mov	eax, edi
	lea	esi, DWORD PTR _fpsInfo$89951[esp+324]
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR tv3610[esp+324], ecx
	mov	ecx, eax
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR tv3610[esp+328], eax
	fild	QWORD PTR tv3610[esp+324]
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv3607[esp+328], ecx
	mov	DWORD PTR tv3607[esp+324], 0
	fild	QWORD PTR tv3607[esp+324]

; 1518 :                             double maxFPS = 10000000.0/double(fpsInfo.supportedIntervals[i].minFrameInterval);

	mov	eax, edi
	fchs
	faddp	ST(1), ST(0)
	fdivr	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR _minFPS$89962[esp+324]
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, eax
	and	ecx, -2147483648			; 80000000H
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR tv3589[esp+328], ecx
	mov	DWORD PTR tv3592[esp+324], edx
	mov	DWORD PTR tv3592[esp+328], eax
	fild	QWORD PTR tv3592[esp+324]
	mov	DWORD PTR tv3589[esp+324], 0
	fild	QWORD PTR tv3589[esp+324]

; 1519 : 
; 1520 :                             String strFPS;

	lea	ecx, DWORD PTR _strFPS$89964[esp+324]
	fchs
	faddp	ST(1), ST(0)
	fdivr	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR _maxFPS$89963[esp+324]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+332], 16		; 00000010H

; 1521 :                             if(CloseDouble(minFPS, maxFPS))

	fld	QWORD PTR _minFPS$89962[esp+324]
	fld	ST(0)

; 1522 :                                 strFPS << FloatString(float(minFPS));

	sub	esp, 8
	fld	QWORD PTR _maxFPS$89963[esp+332]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fabs
	fcomp	QWORD PTR __real@3f50624dd2f1a9fc
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN358@ConfigureD
	fstp	ST(0)
	lea	eax, DWORD PTR $T106084[esp+332]
	fstp	DWORD PTR tv3576[esp+332]
	fld	DWORD PTR tv3576[esp+332]
	fstp	QWORD PTR [esp]
	push	eax
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 17		; 00000011H
	push	eax
	lea	ecx, DWORD PTR _strFPS$89964[esp+328]
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+332], 16		; 00000010H
	lea	ecx, DWORD PTR $T106084[esp+324]

; 1523 :                             else

	jmp	$LN371@ConfigureD
$LN358@ConfigureD:

; 1521 :                             if(CloseDouble(minFPS, maxFPS))

	fstp	ST(1)

; 1524 :                                 strFPS << FloatString(float(minFPS)) << TEXT("-") << FloatString(float(maxFPS));

	lea	ecx, DWORD PTR $T106086[esp+332]
	fstp	DWORD PTR tv3570[esp+332]
	fld	DWORD PTR tv3570[esp+332]
	fstp	QWORD PTR [esp]
	push	ecx
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	mov	esi, eax
	mov	BYTE PTR __$EHRec$[esp+344], 18		; 00000012H
	fld	QWORD PTR _minFPS$89962[esp+336]
	fstp	DWORD PTR tv3564[esp+336]
	add	esp, 4
	fld	DWORD PTR tv3564[esp+332]
	lea	edx, DWORD PTR $T106085[esp+332]
	fstp	QWORD PTR [esp]
	push	edx
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 19		; 00000013H
	push	esi
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	push	OFFSET $SG-8210
	push	eax
	lea	ecx, DWORD PTR _strFPS$89964[esp+336]
	call	esi
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	esi
	mov	BYTE PTR __$EHRec$[esp+332], 18		; 00000012H
	lea	ecx, DWORD PTR $T106085[esp+324]
	call	ebx
	mov	BYTE PTR __$EHRec$[esp+332], 16		; 00000010H
	lea	ecx, DWORD PTR $T106086[esp+324]
$LN371@ConfigureD:
	call	ebx

; 1525 : 
; 1526 :                             int id = (int)SendMessage(hwndFPS, CB_FINDSTRINGEXACT, -1, (LPARAM)strFPS.Array());

	mov	eax, DWORD PTR _strFPS$89964[esp+324]
	mov	esi, DWORD PTR _hwndFPS$89949[esp+324]
	push	eax
	push	-1
	push	344					; 00000158H
	push	esi
	call	DWORD PTR __imp__SendMessageW@16

; 1527 :                             if(id == CB_ERR)

	cmp	eax, -1
	jne	SHORT $LN61@ConfigureD

; 1528 :                                 SendMessage(hwndFPS, CB_ADDSTRING, 0, (LPARAM)strFPS.Array());

	mov	ecx, DWORD PTR _strFPS$89964[esp+324]
	push	ecx
	push	0
	push	323					; 00000143H
	push	esi
	call	DWORD PTR __imp__SendMessageW@16
$LN61@ConfigureD:

; 1529 : 
; 1530 :                             if(bestFPS < minFPS)

	fld	QWORD PTR _minFPS$89962[esp+324]
	fcom	QWORD PTR _bestFPS$89956[esp+324]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN361@ConfigureD

; 1531 :                             {
; 1532 :                                 bestFPS = minFPS;
; 1533 :                                 bestInterval = fpsInfo.supportedIntervals[i].maxFrameInterval;

	mov	eax, edi
	fstp	QWORD PTR _bestFPS$89956[esp+324]
	lea	esi, DWORD PTR _fpsInfo$89951[esp+324]
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	jmp	SHORT $LN60@ConfigureD
$LN361@ConfigureD:
	fstp	ST(0)
$LN60@ConfigureD:

; 1534 :                             }
; 1535 :                             if(bestFPS < maxFPS)

	fld	QWORD PTR _maxFPS$89963[esp+324]
	fcom	QWORD PTR _bestFPS$89956[esp+324]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN364@ConfigureD

; 1536 :                             {
; 1537 :                                 bestFPS = maxFPS;
; 1538 :                                 bestInterval = fpsInfo.supportedIntervals[i].minFrameInterval;

	mov	eax, edi
	fstp	QWORD PTR _bestFPS$89956[esp+324]
	lea	esi, DWORD PTR _fpsInfo$89951[esp+324]
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	jmp	SHORT $LN59@ConfigureD
$LN364@ConfigureD:
	fstp	ST(0)
$LN59@ConfigureD:

; 1539 :                             }
; 1540 :                         }

	mov	BYTE PTR __$EHRec$[esp+332], 15		; 0000000fH
	lea	ecx, DWORD PTR _strFPS$89964[esp+324]
	call	ebx
	inc	edi
	cmp	edi, DWORD PTR _fpsInfo$89951[esp+328]
	jb	$LL66@ConfigureD
$LN64@ConfigureD:

; 1541 : 
; 1542 :                         SetWindowText(hwndFPS, FloatString(float(bestFPS)));

	fld	QWORD PTR _bestFPS$89956[esp+324]
	sub	esp, 8
	fstp	DWORD PTR tv3544[esp+332]
	lea	edx, DWORD PTR $T106087[esp+332]
	fld	DWORD PTR tv3544[esp+332]
	fstp	QWORD PTR [esp]
	push	edx
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 20		; 00000014H
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR _hwndFPS$89949[esp+328]
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	mov	BYTE PTR __$EHRec$[esp+332], 15		; 0000000fH
	lea	ecx, DWORD PTR $T106087[esp+324]
	call	ebx

; 1543 : 
; 1544 :                         //-------------------------------------------------------
; 1545 : 
; 1546 :                         PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_FPS, CBN_EDITCHANGE), (LPARAM)GetDlgItem(hwnd, IDC_FPS));

	mov	esi, DWORD PTR _hwnd$[ebp]
	push	1010					; 000003f2H
	push	esi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	328690					; 000503f2H
	push	273					; 00000111H
	push	esi
	call	DWORD PTR __imp__PostMessageW@16
$LN375@ConfigureD:

; 1547 :                     }

	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _fpsInfo$89951[esp+324]
	push	ecx
	call	??1FPSInfo@@QAE@XZ

; 1548 :                     break;

	jmp	$LN155@ConfigureD
$LN67@ConfigureD:

; 1506 :                         {
; 1507 :                             SetWindowText(hwndFPS, TEXT("0"));

	push	OFFSET $SG-8209
	push	edi
	call	DWORD PTR __imp__SetWindowTextW@8

; 1508 :                             break;

	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	edx, DWORD PTR _fpsInfo$89951[esp+324]
	push	edx
	call	??1FPSInfo@@QAE@XZ
	jmp	$LN155@ConfigureD
$LN58@ConfigureD:

; 1549 : 
; 1550 :                 case IDC_FPS:
; 1551 :                     if(HIWORD(wParam) == CBN_SELCHANGE || HIWORD(wParam) == CBN_EDITCHANGE)

	shr	ebx, 16					; 00000010H
	cmp	bx, 1
	je	SHORT $LN56@ConfigureD
	cmp	bx, 5
	jne	$LN155@ConfigureD
$LN56@ConfigureD:

; 1552 :                     {
; 1553 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ebx, DWORD PTR _hwnd$[ebp]
	push	8
	push	ebx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	edi, eax

; 1554 : 
; 1555 :                         SIZE resolution;
; 1556 :                         if(!GetResolution(GetDlgItem(hwnd, IDC_RESOLUTION), resolution, FALSE))

	xor	esi, esi
	push	esi
	lea	eax, DWORD PTR _resolution$89997[esp+328]
	push	eax
	push	1008					; 000003f0H
	push	ebx
	mov	DWORD PTR _configData$89993[esp+340], edi
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, eax
	call	?GetResolution@@YA_NPAUHWND__@@AAUtagSIZE@@H@Z ; GetResolution
	add	esp, 8
	test	al, al
	je	$LN155@ConfigureD

; 1557 :                             break;
; 1558 : 
; 1559 :                         FPSInfo fpsInfo;

	mov	DWORD PTR _fpsInfo$89999[esp+324], esi
	mov	DWORD PTR _fpsInfo$89999[esp+328], esi
	mov	DWORD PTR __$EHRec$[esp+332], 22	; 00000016H

; 1560 :                         if(!configData->GetResolutionFPSInfo(resolution, fpsInfo))

	lea	ecx, DWORD PTR _fpsInfo$89999[esp+324]
	push	ecx
	lea	edx, DWORD PTR _resolution$89997[esp+328]
	push	edx
	push	edi
	call	?GetResolutionFPSInfo@ConfigDialogData@@QAE_NAAUtagSIZE@@AAUFPSInfo@@@Z ; ConfigDialogData::GetResolutionFPSInfo
	test	al, al
	jne	SHORT $LN54@ConfigureD

; 1561 :                             break;

	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	eax, DWORD PTR _fpsInfo$89999[esp+324]
	push	eax
	call	??1FPSInfo@@QAE@XZ
	jmp	$LN155@ConfigureD
$LN54@ConfigureD:

; 1562 : 
; 1563 :                         //--------------------------------------------
; 1564 : 
; 1565 :                         String strFPSVal = GetEditText((HWND)lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strFPSVal$90001[esp+328]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[esp+332], 23		; 00000017H

; 1566 :                         if(schr(strFPSVal, '-'))

	mov	eax, DWORD PTR _strFPSVal$90001[esp+324]
	push	45					; 0000002dH
	push	eax
	call	DWORD PTR __imp_?schr@@YGPA_WPB_W_W@Z
	test	eax, eax
	je	SHORT $LN53@ConfigureD

; 1567 :                         {
; 1568 :                             StringList tokens;

	lea	ecx, DWORD PTR _tokens$90005[esp+324]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+332], 24		; 00000018H

; 1569 :                             strFPSVal.GetTokenList(tokens, '-', FALSE);

	push	esi
	push	45					; 0000002dH
	lea	ecx, DWORD PTR _tokens$90005[esp+332]
	push	ecx
	lea	ecx, DWORD PTR _strFPSVal$90001[esp+336]
	call	DWORD PTR __imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z

; 1570 :                             if(tokens.Num())

	mov	eax, DWORD PTR _tokens$90005[esp+328]
	cmp	eax, esi
	je	SHORT $LN52@ConfigureD

; 1571 :                                 strFPSVal = tokens.Last();

	mov	edx, DWORD PTR _tokens$90005[esp+324]
	lea	eax, DWORD PTR [edx+eax*8-8]
	push	eax
	lea	ecx, DWORD PTR _strFPSVal$90001[esp+328]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z

; 1574 :                         }

	mov	BYTE PTR __$EHRec$[esp+332], 23		; 00000017H
	lea	ecx, DWORD PTR _tokens$90005[esp+324]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
$LN53@ConfigureD:

; 1575 : 
; 1576 :                         if(!ValidFloatString(strFPSVal))

	mov	edx, DWORD PTR _strFPSVal$90001[esp+324]
	push	edx
	call	DWORD PTR __imp_?ValidFloatString@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN50@ConfigureD

; 1577 :                             break;

	mov	BYTE PTR __$EHRec$[esp+332], 22		; 00000016H
	lea	ecx, DWORD PTR _strFPSVal$90001[esp+324]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	eax, DWORD PTR _fpsInfo$89999[esp+324]
	push	eax
	call	??1FPSInfo@@QAE@XZ
	jmp	$LN155@ConfigureD
$LN52@ConfigureD:

; 1572 :                             else
; 1573 :                                 break;

	mov	BYTE PTR __$EHRec$[esp+332], 23		; 00000017H
	lea	ecx, DWORD PTR _tokens$90005[esp+324]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+332], 22		; 00000016H
	lea	ecx, DWORD PTR _strFPSVal$90001[esp+324]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN375@ConfigureD
$LN50@ConfigureD:

; 1578 : 
; 1579 :                         float fps = strFPSVal.ToFloat();

	lea	ecx, DWORD PTR _strFPSVal$90001[esp+324]
	call	DWORD PTR __imp_?ToFloat@String@@QBEMXZ
	fstp	DWORD PTR _fps$90009[esp+324]

; 1580 :                         INT64 interval = INT64(10000000.0/double(fps));

	fld	DWORD PTR _fps$90009[esp+324]
	fdivr	QWORD PTR __real@416312d000000000
	call	__ftol2
	mov	DWORD PTR _interval$90010[esp+324], eax

; 1581 : 
; 1582 :                         UINT64 bestInterval;
; 1583 :                         UINT64 bestDist = 0xFFFFFFFFFFFFFFFFLL;

	or	eax, -1
	mov	DWORD PTR _interval$90010[esp+328], edx
	mov	DWORD PTR _bestDist$90012[esp+324], eax
	mov	DWORD PTR _bestDist$90012[esp+328], eax

; 1584 :                         for(UINT i=0; i<fpsInfo.supportedIntervals.Num(); i++)

	mov	DWORD PTR _i$90013[esp+324], esi
	cmp	DWORD PTR _fpsInfo$89999[esp+328], esi
	jbe	$LN47@ConfigureD
$LL49@ConfigureD:

; 1585 :                         {
; 1586 :                             UINT64 maxDist = (UINT64)_abs64(INT64(fpsInfo.supportedIntervals[i].maxFrameInterval)-interval);

	mov	ebx, DWORD PTR _i$90013[esp+324]
	mov	eax, ebx
	lea	esi, DWORD PTR _fpsInfo$89999[esp+324]
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	edi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	sub	edi, DWORD PTR _interval$90010[esp+324]
	sbb	eax, DWORD PTR _interval$90010[esp+328]
	cdq
	xor	eax, edx
	xor	edi, edx
	sub	edi, edx
	sbb	eax, edx
	mov	DWORD PTR _maxDist$90017[esp+328], eax

; 1587 :                             UINT64 minDist = (UINT64)_abs64(INT64(fpsInfo.supportedIntervals[i].minFrameInterval)-interval);

	mov	eax, ebx
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	ebx, DWORD PTR [eax]
	sub	ebx, DWORD PTR _interval$90010[esp+324]
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR _interval$90010[esp+328]

; 1588 : 
; 1589 :                             if(maxDist < bestDist)

	mov	ecx, DWORD PTR _bestDist$90012[esp+328]
	cdq
	xor	eax, edx
	xor	ebx, edx
	sub	ebx, edx
	sbb	eax, edx
	mov	DWORD PTR _minDist$90019[esp+328], eax
	cmp	DWORD PTR _maxDist$90017[esp+328], ecx
	ja	SHORT $LN46@ConfigureD
	jb	SHORT $LN334@ConfigureD
	cmp	edi, DWORD PTR _bestDist$90012[esp+324]
	jae	SHORT $LN46@ConfigureD
$LN334@ConfigureD:

; 1590 :                             {
; 1591 :                                 bestDist = maxDist;

	mov	edx, DWORD PTR _maxDist$90017[esp+328]

; 1592 :                                 bestInterval = fpsInfo.supportedIntervals[i].maxFrameInterval;

	mov	eax, DWORD PTR _i$90013[esp+324]
	lea	esi, DWORD PTR _fpsInfo$89999[esp+324]
	mov	DWORD PTR _bestDist$90012[esp+324], edi
	mov	DWORD PTR _bestDist$90012[esp+328], edx
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _bestInterval$90011[esp+324], ecx
	mov	DWORD PTR _bestInterval$90011[esp+328], edx
$LN46@ConfigureD:

; 1593 :                             }
; 1594 :                             if(minDist < bestDist)

	mov	eax, DWORD PTR _bestDist$90012[esp+328]
	cmp	DWORD PTR _minDist$90019[esp+328], eax
	ja	SHORT $LN48@ConfigureD
	jb	SHORT $LN335@ConfigureD
	cmp	ebx, DWORD PTR _bestDist$90012[esp+324]
	jae	SHORT $LN48@ConfigureD
$LN335@ConfigureD:

; 1595 :                             {
; 1596 :                                 bestDist = minDist;

	mov	ecx, DWORD PTR _minDist$90019[esp+328]

; 1597 :                                 bestInterval = fpsInfo.supportedIntervals[i].minFrameInterval;

	mov	eax, DWORD PTR _i$90013[esp+324]
	lea	esi, DWORD PTR _fpsInfo$89999[esp+324]
	mov	DWORD PTR _bestDist$90012[esp+324], ebx
	mov	DWORD PTR _bestDist$90012[esp+328], ecx
	call	??A?$List@UFPSInterval@@@@QAEAAUFPSInterval@@I@Z ; List<FPSInterval>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _bestInterval$90011[esp+324], edx
	mov	DWORD PTR _bestInterval$90011[esp+328], eax
$LN48@ConfigureD:

; 1584 :                         for(UINT i=0; i<fpsInfo.supportedIntervals.Num(); i++)

	mov	eax, DWORD PTR _i$90013[esp+324]
	inc	eax
	mov	DWORD PTR _i$90013[esp+324], eax
	cmp	eax, DWORD PTR _fpsInfo$89999[esp+328]
	jb	$LL49@ConfigureD
	mov	edi, DWORD PTR _configData$89993[esp+324]
	mov	ebx, DWORD PTR _hwnd$[ebp]
	xor	esi, esi
$LN47@ConfigureD:

; 1598 :                             }
; 1599 :                         }
; 1600 : 
; 1601 :                         //--------------------------------------------
; 1602 : 
; 1603 :                         HWND hwndPreferredList = GetDlgItem(hwnd, IDC_PREFERREDOUTPUT);

	push	1026					; 00000402H
	push	ebx
	call	DWORD PTR __imp__GetDlgItem@8

; 1604 :                         SendMessage(hwndPreferredList, CB_RESETCONTENT, 0, 0);

	push	esi
	push	esi
	mov	ebx, eax
	push	331					; 0000014bH
	push	ebx
	call	DWORD PTR __imp__SendMessageW@16

; 1605 : 
; 1606 :                         UINT preferredType = (UINT)configData->data->GetInt(TEXT("preferredType"), -1);

	mov	ecx, DWORD PTR [edi+4]
	push	-1
	push	OFFSET $SG-8211
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _preferredType$90024[esp+324], eax

; 1607 : 
; 1608 :                         List<VideoOutputType> types;

	mov	DWORD PTR _types$90134[esp+324], esi
	mov	DWORD PTR _types$90134[esp+328], esi
	mov	BYTE PTR __$EHRec$[esp+332], 25		; 00000019H

; 1609 :                         if(GetVideoOutputTypes(configData->outputList, resolution.cx, resolution.cy, bestInterval, types))

	mov	edx, DWORD PTR _bestInterval$90011[esp+328]
	mov	eax, DWORD PTR _bestInterval$90011[esp+324]
	lea	ecx, DWORD PTR _types$90134[esp+324]
	push	ecx
	mov	ecx, DWORD PTR _resolution$89997[esp+332]
	push	edx
	mov	edx, DWORD PTR _resolution$89997[esp+332]
	push	eax
	push	ecx
	push	edx
	add	edi, 8
	push	edi
	call	?GetVideoOutputTypes@@YA_NABV?$List@UMediaOutputInfo@@@@II_KAAV?$List@W4VideoOutputType@@@@@Z ; GetVideoOutputTypes
	add	esp, 24					; 00000018H
	test	al, al
	je	$LN39@ConfigureD

; 1610 :                         {
; 1611 :                             int preferredID = -1;
; 1612 : 
; 1613 :                             for(UINT i=0; i<types.Num(); i++)

	xor	edi, edi
	mov	DWORD PTR _preferredID$90136[esp+324], -1
	cmp	DWORD PTR _types$90134[esp+328], edi
	jbe	$LN328@ConfigureD
$LL43@ConfigureD:

; 1614 :                             {
; 1615 :                                 CTSTR lpName = EnumToName[(UINT)types[i]];

	mov	eax, edi
	lea	esi, DWORD PTR _types$90134[esp+324]
	call	??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z ; List<enum VideoOutputType>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR _EnumToName[eax*4]

; 1616 : 
; 1617 :                                 int id = (int)SendMessage(hwndPreferredList, CB_ADDSTRING, 0, (LPARAM)lpName);

	push	eax
	push	0
	push	323					; 00000143H
	push	ebx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$90143[esp+324], eax

; 1618 :                                 SendMessage(hwndPreferredList, CB_SETITEMDATA, id, (LPARAM)types[i]);

	mov	eax, edi
	call	??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z ; List<enum VideoOutputType>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _id$90143[esp+324]
	push	ecx
	push	edx
	push	337					; 00000151H
	push	ebx
	call	DWORD PTR __imp__SendMessageW@16

; 1619 : 
; 1620 :                                 if((UINT)types[i] == preferredType)

	mov	eax, edi
	call	??A?$List@W4VideoOutputType@@@@QAEAAW4VideoOutputType@@I@Z ; List<enum VideoOutputType>::operator[]
	mov	ecx, DWORD PTR _preferredType$90024[esp+324]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LN42@ConfigureD

; 1621 :                                 {
; 1622 :                                     SendMessage(hwndPreferredList, CB_SETCURSEL, id, 0);

	mov	esi, DWORD PTR _id$90143[esp+324]
	push	0
	push	esi
	push	334					; 0000014eH
	push	ebx
	call	DWORD PTR __imp__SendMessageW@16

; 1623 :                                     preferredID = id;

	mov	DWORD PTR _preferredID$90136[esp+324], esi
$LN42@ConfigureD:

; 1610 :                         {
; 1611 :                             int preferredID = -1;
; 1612 : 
; 1613 :                             for(UINT i=0; i<types.Num(); i++)

	inc	edi
	cmp	edi, DWORD PTR _types$90134[esp+328]
	jb	SHORT $LL43@ConfigureD

; 1624 :                                 }
; 1625 :                             }
; 1626 : 
; 1627 :                             if(preferredID == -1)

	cmp	DWORD PTR _preferredID$90136[esp+324], -1
	jne	SHORT $LN39@ConfigureD
$LN328@ConfigureD:

; 1628 :                                 SendMessage(hwndPreferredList, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	push	ebx
	call	DWORD PTR __imp__SendMessageW@16
$LN39@ConfigureD:

; 1629 :                         }
; 1630 :                     }

	mov	BYTE PTR __$EHRec$[esp+332], 23		; 00000017H
	mov	eax, DWORD PTR _types$90134[esp+324]
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $LN291@ConfigureD
	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _types$90134[esp+324], esi
	mov	DWORD PTR _types$90134[esp+328], esi
$LN291@ConfigureD:
	mov	BYTE PTR __$EHRec$[esp+332], 22		; 00000016H
	lea	ecx, DWORD PTR _strFPSVal$90001[esp+324]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1631 :                     break;

	jmp	$LN375@ConfigureD
$LN38@ConfigureD:

; 1632 : 
; 1633 :                     case IDC_CONFIG:
; 1634 :                     case IDC_CONFIGAUDIO:
; 1635 :                     case IDC_CROSSBAR:
; 1636 :                     {
; 1637 :                         UINT id;
; 1638 :                         ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	edi, DWORD PTR _hwnd$[ebp]
	push	8
	push	edi
	call	DWORD PTR __imp__GetWindowLongW@8

; 1639 :                         switch(LOWORD(wParam))

	sub	esi, 1002				; 000003eaH
	mov	ebx, eax
	je	$LN35@ConfigureD
	sub	esi, 2
	je	$LN33@ConfigureD
	sub	esi, 3
	jne	$LN155@ConfigureD

; 1649 :                             case IDC_CROSSBAR:
; 1650 :                                 id = (UINT)SendMessage(GetDlgItem(hwnd, IDC_CROSSBARLIST), CB_GETCURSEL, 0, 0);

	push	esi
	push	esi
	push	327					; 00000147H
	push	1006					; 000003eeH
	push	edi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	esi, eax

; 1651 :                                 if(id != CB_ERR) OpenPropertyPages(hwnd, configData->crossbarList[id], configData->crossbarIDList[id], AM_KSCATEGORY_CROSSBAR);

	cmp	esi, -1
	je	$LN155@ConfigureD
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+4
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+8
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+12
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	push	esi
	lea	ecx, DWORD PTR [ebx+64]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106092[esp+348], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[esp+356], 30	; 0000001eH
	push	esi
	lea	ecx, DWORD PTR [ebx+56]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106093[esp+356], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+364], 31		; 0000001fH

; 1652 :                                 break;

	jmp	$LN377@ConfigureD
$LN33@ConfigureD:

; 1644 :                                 break;
; 1645 :                             case IDC_CONFIGAUDIO:
; 1646 :                                 id = (UINT)SendMessage(GetDlgItem(hwnd, IDC_AUDIOLIST), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1003					; 000003ebH
	push	edi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	esi, eax

; 1647 :                                 if(id != CB_ERR) OpenPropertyPages(hwnd, configData->audioNameList[id], configData->audioIDList[id], CLSID_AudioInputDeviceCategory);

	cmp	esi, -1
	je	$LN155@ConfigureD
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory
	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory+4
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory+12
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	push	esi
	lea	ecx, DWORD PTR [ebx+48]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106090[esp+348], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[esp+356], 28	; 0000001cH
	push	esi
	lea	ecx, DWORD PTR [ebx+40]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106091[esp+356], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+364], 29		; 0000001dH

; 1648 :                                 break;

	jmp	$LN377@ConfigureD
$LN35@ConfigureD:

; 1640 :                         {
; 1641 :                             case IDC_CONFIG:
; 1642 :                                 id = (UINT)SendMessage(GetDlgItem(hwnd, IDC_DEVICELIST), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1001					; 000003e9H
	push	edi
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	esi, eax

; 1643 :                                 if(id != CB_ERR) OpenPropertyPages(hwnd, configData->deviceNameList[id], configData->deviceIDList[id], CLSID_VideoInputDeviceCategory);

	cmp	esi, -1
	je	$LN155@ConfigureD
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory
	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory+4
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	push	esi
	lea	ecx, DWORD PTR [ebx+32]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106088[esp+348], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[esp+356], 26	; 0000001aH
	push	esi
	lea	ecx, DWORD PTR [ebx+24]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T106089[esp+356], esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+364], 27		; 0000001bH
$LN377@ConfigureD:
	mov	DWORD PTR __$EHRec$[esp+364], -1
	mov	ecx, edi
	call	?OpenPropertyPages@@YAXPAUHWND__@@VString@@1U_GUID@@@Z ; OpenPropertyPages
	add	esp, 32					; 00000020H

; 1653 :                         }
; 1654 :                         break;

	jmp	$LN155@ConfigureD
$LN171@ConfigureD:

; 900  :     {
; 901  :         case WM_INITDIALOG:
; 902  :             {
; 903  :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)lParam);

	mov	edi, DWORD PTR _lParam$[ebp]
	mov	esi, DWORD PTR _hwnd$[ebp]
	push	edi
	push	8
	push	esi
	call	DWORD PTR __imp__SetWindowLongW@12

; 904  : 
; 905  :                 ConfigDialogData *configData = (ConfigDialogData*)lParam;
; 906  : 
; 907  :                 HWND hwndDeviceList     = GetDlgItem(hwnd, IDC_DEVICELIST);

	mov	ebx, DWORD PTR __imp__GetDlgItem@8
	push	1001					; 000003e9H
	push	esi
	call	ebx

; 908  :                 HWND hwndAudioList      = GetDlgItem(hwnd, IDC_AUDIOLIST);

	push	1003					; 000003ebH
	push	esi
	mov	DWORD PTR _hwndDeviceList$89462[esp+332], eax
	call	ebx

; 909  :                 HWND hwndCrossbarlist   = GetDlgItem(hwnd, IDC_CROSSBARLIST);

	push	1006					; 000003eeH
	push	esi
	mov	DWORD PTR _hwndAudioList$89463[esp+332], eax
	call	ebx

; 910  :                 HWND hwndResolutionList = GetDlgItem(hwnd, IDC_RESOLUTION);

	push	1008					; 000003f0H
	push	esi
	mov	DWORD PTR _hwndCrossbarlist$89464[esp+332], eax
	call	ebx

; 911  :                 HWND hwndFPS            = GetDlgItem(hwnd, IDC_FPS);

	push	1010					; 000003f2H
	push	esi
	mov	DWORD PTR _hwndResolutionList$89465[esp+332], eax
	call	ebx

; 912  :                 HWND hwndFlip           = GetDlgItem(hwnd, IDC_FLIPIMAGE);

	push	1014					; 000003f6H
	push	esi
	mov	DWORD PTR _hwndFPS$89466[esp+332], eax
	call	ebx

; 913  :                 HWND hwndFlipHorizontal = GetDlgItem(hwnd, IDC_FLIPIMAGEH);

	push	1025					; 00000401H
	push	esi
	mov	DWORD PTR _hwndFlip$89467[esp+332], eax
	call	ebx

; 914  : 
; 915  :                 //------------------------------------------
; 916  : 
; 917  :                 bool bFlipVertical   = configData->data->GetInt(TEXT("flipImage")) != 0;

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8166
	mov	DWORD PTR _hwndFlipHorizontal$89468[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 918  :                 bool bFlipHorizontal = configData->data->GetInt(TEXT("flipImageHorizontal")) != 0;

	mov	ecx, DWORD PTR [edi+4]
	push	0
	test	eax, eax
	push	OFFSET $SG-8167
	setne	BYTE PTR _bFlipVertical$89469[esp+332]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 919  :                 configData->bDShowHasAudio = configData->data->GetInt(TEXT("dshowHasAudio")) != 0;

	mov	ecx, DWORD PTR [edi+4]
	push	0
	test	eax, eax
	push	OFFSET $SG-8168
	setne	BYTE PTR _bFlipHorizontal$89471[esp+332]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 920  : 
; 921  :                 SendMessage(hwndFlip, BM_SETCHECK, bFlipVertical ? BST_CHECKED : BST_UNCHECKED, 0);

	mov	ecx, DWORD PTR _hwndFlip$89467[esp+324]
	test	eax, eax
	setne	dl
	xor	eax, eax
	cmp	BYTE PTR _bFlipVertical$89469[esp+324], al
	push	0
	setne	al
	mov	BYTE PTR [edi+74], dl
	push	eax
	push	241					; 000000f1H
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 922  :                 SendMessage(hwndFlipHorizontal, BM_SETCHECK, bFlipHorizontal ? BST_CHECKED : BST_UNCHECKED, 0);

	mov	eax, DWORD PTR _hwndFlipHorizontal$89468[esp+324]
	xor	edx, edx
	cmp	BYTE PTR _bFlipHorizontal$89471[esp+324], dl
	push	0
	setne	dl
	push	edx
	push	241					; 000000f1H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 923  : 
; 924  :                 //------------------------------------------
; 925  : 
; 926  :                 UINT opacity = configData->data->GetInt(TEXT("opacity"), 100);

	mov	ecx, DWORD PTR [edi+4]
	push	100					; 00000064H
	push	OFFSET $SG-8169
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 927  : 
; 928  :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	mov	DWORD PTR _opacity$89474[esp+336], eax
	push	1028					; 00000404H
	push	esi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 929  :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_SETPOS32, 0, opacity);

	mov	ecx, DWORD PTR _opacity$89474[esp+324]
	push	ecx
	push	0
	push	1137					; 00000471H
	push	1028					; 00000404H
	push	esi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 930  : 
; 931  :                 //------------------------------------------
; 932  : 
; 933  :                 String strDevice = configData->data->GetString(TEXT("device"));

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8170
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	lea	ecx, DWORD PTR _strDevice$89476[esp+328]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	DWORD PTR __$EHRec$[esp+332], 1

; 934  :                 String strAudioDevice = configData->data->GetString(TEXT("audioDevice"));

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8171
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	lea	ecx, DWORD PTR _strAudioDevice$89478[esp+328]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	BYTE PTR __$EHRec$[esp+332], 2

; 935  :                 UINT cx  = configData->data->GetInt(TEXT("resolutionWidth"));

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8172
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 936  :                 UINT cy  = configData->data->GetInt(TEXT("resolutionHeight"));

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8173
	mov	DWORD PTR _cx$89480[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 937  :                 UINT64 frameInterval = configData->data->GetInt(TEXT("frameInterval"));

	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	OFFSET $SG-8174
	mov	DWORD PTR _cy$89482[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 938  : 
; 939  :                 BOOL bCustomResolution = configData->data->GetInt(TEXT("customResolution"));

	mov	ecx, DWORD PTR [edi+4]
	cdq
	push	0
	push	OFFSET $SG-8175
	mov	DWORD PTR _frameInterval$89484[esp+332], eax
	mov	DWORD PTR _frameInterval$89484[esp+336], edx
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 940  :                 SendMessage(GetDlgItem(hwnd, IDC_CUSTOMRESOLUTION), BM_SETCHECK, bCustomResolution ? BST_CHECKED : BST_UNCHECKED, 0);

	xor	edx, edx
	test	eax, eax
	setne	dl
	push	0
	mov	DWORD PTR _bCustomResolution$89486[esp+328], eax
	push	edx
	push	241					; 000000f1H
	push	1016					; 000003f8H
	push	esi
	call	ebx
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 941  : 
; 942  :                 LocalizeWindow(hwnd, pluginLocale);

	mov	eax, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	push	eax
	push	esi
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z

; 943  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_DEVICELIST), CLSID_VideoInputDeviceCategory, &configData->deviceNameList, &configData->deviceIDList);

	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+4
	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_VideoInputDeviceCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_VideoInputDeviceCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR [edi+32]
	lea	ebx, DWORD PTR [edi+24]
	push	1001					; 000003e9H
	push	esi
	mov	DWORD PTR tv1890[esp+348], eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, DWORD PTR tv1890[esp+340]
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 944  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_AUDIOLIST), CLSID_AudioInputDeviceCategory, &configData->audioNameList, &configData->audioIDList);

	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+4
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CLSID_AudioInputDeviceCategory+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _CLSID_AudioInputDeviceCategory+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, edi
	push	1003					; 000003ebH
	push	esi
	lea	edi, DWORD PTR [eax+48]
	lea	ebx, DWORD PTR [eax+40]
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, edi
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 945  :                 FillOutListOfDevices(GetDlgItem(hwnd, IDC_CROSSBARLIST), AM_KSCATEGORY_CROSSBAR, &configData->crossbarList, &configData->crossbarIDList);

	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+4
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _AM_KSCATEGORY_CROSSBAR+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _lParam$[ebp]
	push	1006					; 000003eeH
	push	esi
	lea	edi, DWORD PTR [eax+64]
	lea	ebx, DWORD PTR [eax+56]
	call	DWORD PTR __imp__GetDlgItem@8
	mov	ecx, edi
	mov	edx, eax
	call	?FillOutListOfDevices@@YAXPAUHWND__@@U_GUID@@PAVStringList@@2@Z ; FillOutListOfDevices

; 946  : 
; 947  :                 SendMessage(hwndCrossbarlist, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndCrossbarlist$89464[esp+340]
	mov	ebx, DWORD PTR __imp__SendMessageW@16
	add	esp, 16					; 00000010H
	push	0
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 948  :                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_CROSSBARLIST, CBN_SELCHANGE), (LPARAM)hwndCrossbarlist);

	push	edi
	push	66542					; 000103eeH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 949  : 
; 950  :                 UINT deviceID = CB_ERR;

	or	eax, -1
	mov	DWORD PTR _deviceID$89497[esp+324], eax

; 951  :                 UINT audioDeviceID = CB_ERR;

	mov	DWORD PTR _audioDeviceID$89498[esp+324], eax

; 952  :                 if(strDevice.IsValid() && cx > 0 && cy > 0 && frameInterval > 0)

	mov	eax, DWORD PTR _strDevice$89476[esp+324]
	test	eax, eax
	je	SHORT $LN170@ConfigureD
	cmp	WORD PTR [eax], 0
	je	SHORT $LN170@ConfigureD
	cmp	DWORD PTR _strDevice$89476[esp+328], 0
	je	SHORT $LN170@ConfigureD
	cmp	DWORD PTR _cx$89480[esp+324], 0
	jbe	SHORT $LN170@ConfigureD
	cmp	DWORD PTR _cy$89482[esp+324], 0
	jbe	SHORT $LN170@ConfigureD
	cmp	DWORD PTR _frameInterval$89484[esp+328], 0
	ja	SHORT $LN336@ConfigureD
	cmp	DWORD PTR _frameInterval$89484[esp+324], 0
	jbe	SHORT $LN170@ConfigureD
$LN336@ConfigureD:

; 953  :                     deviceID = (UINT)SendMessage(hwndDeviceList, CB_FINDSTRINGEXACT, -1, (LPARAM)strDevice.Array());

	push	eax
	mov	eax, DWORD PTR _hwndDeviceList$89462[esp+328]
	push	-1
	push	344					; 00000158H
	push	eax
	call	ebx
	mov	DWORD PTR _deviceID$89497[esp+324], eax
$LN170@ConfigureD:

; 954  :                 if(strAudioDevice.IsValid())

	mov	eax, DWORD PTR _strAudioDevice$89478[esp+324]
	test	eax, eax
	je	SHORT $LN169@ConfigureD
	cmp	WORD PTR [eax], 0
	je	SHORT $LN169@ConfigureD
	cmp	DWORD PTR _strAudioDevice$89478[esp+328], 0
	je	SHORT $LN169@ConfigureD

; 955  :                     audioDeviceID = (UINT)SendMessage(hwndAudioList, CB_FINDSTRINGEXACT, -1, (LPARAM)strAudioDevice.Array());

	mov	ecx, DWORD PTR _hwndAudioList$89463[esp+324]
	push	eax
	push	-1
	push	344					; 00000158H
	push	ecx
	call	ebx
	mov	DWORD PTR _audioDeviceID$89498[esp+324], eax
$LN169@ConfigureD:

; 956  : 
; 957  : 
; 958  :                 if(deviceID == CB_ERR)

	cmp	DWORD PTR _deviceID$89497[esp+324], -1
	mov	edi, DWORD PTR __imp_??1String@@QAE@XZ

; 959  :                 {
; 960  :                     SendMessage(hwndDeviceList, CB_SETCURSEL, 0, 0);

	push	0
	jne	SHORT $LN168@ConfigureD
	mov	edi, DWORD PTR _hwndDeviceList$89462[esp+328]
	push	0
	push	334					; 0000014eH
	push	edi
	call	ebx

; 961  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_DEVICELIST, CBN_SELCHANGE), (LPARAM)hwndDeviceList);

	push	edi
	push	66537					; 000103e9H
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 962  :                 }
; 963  :                 else

	jmp	$LN166@ConfigureD
$LN168@ConfigureD:

; 964  :                 {
; 965  :                     SendMessage(hwndDeviceList, CB_SETCURSEL, deviceID, 0);

	mov	edx, DWORD PTR _deviceID$89497[esp+328]
	mov	eax, DWORD PTR _hwndDeviceList$89462[esp+328]
	push	edx
	push	334					; 0000014eH
	push	eax
	call	ebx

; 966  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_DEVICELIST, CBN_SELCHANGE), (LPARAM)hwndDeviceList);

	mov	ecx, DWORD PTR _hwndDeviceList$89462[esp+324]
	push	ecx
	push	66537					; 000103e9H
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 967  : 
; 968  :                     if(bCustomResolution)

	cmp	DWORD PTR _bCustomResolution$89486[esp+324], 0
	je	$LN166@ConfigureD

; 969  :                     {
; 970  :                         String strResolution;

	lea	ecx, DWORD PTR _strResolution$89526[esp+324]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+332], 3

; 971  :                         strResolution << UIntString(cx) << TEXT("x") << UIntString(cy);

	mov	edx, DWORD PTR _cy$89482[esp+324]
	push	10					; 0000000aH
	push	edx
	lea	eax, DWORD PTR $T106076[esp+332]
	push	eax
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv2860[esp+324], eax
	mov	BYTE PTR __$EHRec$[esp+332], 4
	mov	ecx, DWORD PTR _cx$89480[esp+324]
	push	10					; 0000000aH
	push	ecx
	lea	edx, DWORD PTR $T106075[esp+332]
	push	edx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 5
	mov	ecx, DWORD PTR tv2860[esp+324]
	push	ecx
	push	OFFSET $SG-8176
	push	eax
	lea	ecx, DWORD PTR _strResolution$89526[esp+336]
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	BYTE PTR __$EHRec$[esp+332], 4
	lea	ecx, DWORD PTR $T106075[esp+324]
	call	edi
	mov	BYTE PTR __$EHRec$[esp+332], 3
	lea	ecx, DWORD PTR $T106076[esp+324]
	call	edi

; 972  : 
; 973  :                         SendMessage(hwndResolutionList, WM_SETTEXT, 0, (LPARAM)strResolution.Array());

	mov	edx, DWORD PTR _strResolution$89526[esp+324]
	mov	eax, DWORD PTR _hwndResolutionList$89465[esp+324]
	push	edx
	push	0
	push	12					; 0000000cH
	push	eax
	call	ebx

; 974  :                         ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_RESOLUTION, CBN_EDITCHANGE), (LPARAM)hwndResolutionList);

	mov	ecx, DWORD PTR _hwndResolutionList$89465[esp+324]
	push	ecx
	push	328688					; 000503f0H
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 975  : 
; 976  :                         SetWindowText(hwndFPS, FloatString(10000000.0/double(frameInterval)));

	mov	eax, DWORD PTR _frameInterval$89484[esp+328]
	mov	edx, DWORD PTR _frameInterval$89484[esp+324]
	mov	ecx, eax
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR tv3301[esp+328], eax
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv3301[esp+324], edx
	fild	QWORD PTR tv3301[esp+324]
	mov	DWORD PTR tv3298[esp+328], ecx
	mov	DWORD PTR tv3298[esp+324], 0
	fild	QWORD PTR tv3298[esp+324]
	sub	esp, 8
	lea	eax, DWORD PTR $T106077[esp+332]
	fchs
	faddp	ST(1), ST(0)
	fdivr	QWORD PTR __real@416312d000000000
	fstp	QWORD PTR [esp]
	push	eax
	call	DWORD PTR __imp_?FloatString@@YA?AVString@@N@Z
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[esp+332], 6
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _hwndFPS$89466[esp+324]
	push	eax
	push	ecx
	call	DWORD PTR __imp__SetWindowTextW@8
	mov	BYTE PTR __$EHRec$[esp+332], 3
	lea	ecx, DWORD PTR $T106077[esp+324]
	call	edi

; 977  :                     }

	mov	BYTE PTR __$EHRec$[esp+332], 2
	lea	ecx, DWORD PTR _strResolution$89526[esp+324]
	call	edi
$LN166@ConfigureD:

; 978  :                 }
; 979  : 
; 980  :                 if(audioDeviceID == CB_ERR)

	mov	eax, DWORD PTR _audioDeviceID$89498[esp+324]

; 981  :                 {
; 982  :                     SendMessage(hwndAudioList, CB_SETCURSEL, 0, 0);

	mov	edi, DWORD PTR _hwndAudioList$89463[esp+324]
	push	0
	cmp	eax, -1
	jne	SHORT $LN165@ConfigureD
	push	0

; 983  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioList);
; 984  :                 }
; 985  :                 else

	jmp	SHORT $LN372@ConfigureD
$LN165@ConfigureD:

; 986  :                 {
; 987  :                     SendMessage(hwndAudioList, CB_SETCURSEL, audioDeviceID, 0);

	push	eax
$LN372@ConfigureD:
	push	334					; 0000014eH
	push	edi
	call	ebx

; 988  :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_AUDIOLIST, CBN_SELCHANGE), (LPARAM)hwndAudioList);

	push	edi
	push	66539					; 000103ebH
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 989  :                 }
; 990  : 
; 991  :                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_CUSTOMRESOLUTION, BN_CLICKED), (LPARAM)GetDlgItem(hwnd, IDC_CUSTOMRESOLUTION));

	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	1016					; 000003f8H
	push	esi
	call	edi
	push	eax
	push	1016					; 000003f8H
	push	273					; 00000111H
	push	esi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 992  : 
; 993  :                 HWND hwndPreferredList = GetDlgItem(hwnd, IDC_PREFERREDOUTPUT);

	push	1026					; 00000402H
	push	esi
	call	edi

; 994  : 
; 995  :                 BOOL bUsePreferredOutput = configData->data->GetInt(TEXT("usePreferredType"));

	mov	edx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	push	0
	push	OFFSET $SG-8177
	mov	DWORD PTR _hwndPreferredList$89570[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 996  :                 EnableWindow(hwndPreferredList, bUsePreferredOutput);

	push	eax
	mov	DWORD PTR _bUsePreferredOutput$89571[esp+328], eax
	mov	eax, DWORD PTR _hwndPreferredList$89570[esp+328]
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 997  : 
; 998  :                 SendMessage(GetDlgItem(hwnd, IDC_USEPREFERREDOUTPUT), BM_SETCHECK, bUsePreferredOutput ? BST_CHECKED : BST_UNCHECKED, 0);

	xor	ecx, ecx
	cmp	DWORD PTR _bUsePreferredOutput$89571[esp+324], ecx
	push	0
	setne	cl
	push	ecx
	push	241					; 000000f1H
	push	1012					; 000003f4H
	push	esi
	call	edi
	push	eax
	call	ebx

; 999  : 
; 1000 :                 //------------------------------------------
; 1001 : 
; 1002 :                 HWND hwndTemp;
; 1003 : 
; 1004 :                 int soundOutputType = configData->data->GetInt(TEXT("soundOutputType"));

	mov	edx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	push	0
	push	OFFSET $SG-8178
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _soundOutputType$89574[esp+324], eax

; 1005 :                 switch(soundOutputType)

	sub	eax, 0
	je	SHORT $LN161@ConfigureD
	dec	eax
	je	SHORT $LN160@ConfigureD
	dec	eax
	jne	SHORT $LN162@ConfigureD

; 1009 :                     case 2: hwndTemp = GetDlgItem(hwnd, IDC_PLAYDESKTOPSOUND); break;

	push	1030					; 00000406H
	jmp	SHORT $LN373@ConfigureD
$LN160@ConfigureD:

; 1008 :                     case 1: hwndTemp = GetDlgItem(hwnd, IDC_OUTPUTSOUND); break;

	push	1029					; 00000405H
	jmp	SHORT $LN373@ConfigureD
$LN161@ConfigureD:

; 1006 :                 {
; 1007 :                     case 0: hwndTemp = GetDlgItem(hwnd, IDC_NOSOUND); break;

	push	1031					; 00000407H
$LN373@ConfigureD:
	push	esi
	call	edi
	mov	DWORD PTR _hwndTemp$89573[esp+324], eax
$LN162@ConfigureD:

; 1010 :                 }
; 1011 :                 bool bForceCustomAudioDevice = configData->data->GetInt(TEXT("forceCustomAudioDevice")) != 0;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	0
	push	OFFSET $SG-8179
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	setne	al

; 1012 :                 SendMessage(GetDlgItem(hwnd, IDC_FORCECUSTOMAUDIO), BM_SETCHECK, bForceCustomAudioDevice ? BST_CHECKED : BST_UNCHECKED, 0);

	xor	ecx, ecx
	test	al, al
	setne	cl
	push	0
	mov	BYTE PTR _bForceCustomAudioDevice$89583[esp+328], al
	push	ecx
	push	241					; 000000f1H
	push	1034					; 0000040aH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1013 :                 EnableWindow(GetDlgItem(hwnd, IDC_AUDIOLIST),        bForceCustomAudioDevice);

	movzx	edx, BYTE PTR _bForceCustomAudioDevice$89583[esp+324]
	push	edx
	push	1003					; 000003ebH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1014 : 
; 1015 :                 SendMessage(hwndTemp, BM_SETCHECK, BST_CHECKED, 0);

	mov	eax, DWORD PTR _hwndTemp$89573[esp+324]
	push	0
	push	1
	push	241					; 000000f1H
	push	eax
	call	ebx

; 1016 : 
; 1017 :                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET), soundOutputType == 1);

	xor	eax, eax
	cmp	DWORD PTR _soundOutputType$89574[esp+324], 1
	sete	al
	push	eax
	push	1033					; 00000409H
	push	esi
	mov	DWORD PTR tv3552[esp+336], eax
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1018 :                 EnableWindow(GetDlgItem(hwnd, IDC_TIMEOFFSET_EDIT), soundOutputType == 1);

	mov	ecx, DWORD PTR tv3552[esp+324]
	push	ecx
	push	1032					; 00000408H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1019 :                 EnableWindow(GetDlgItem(hwnd, IDC_VOLUME), soundOutputType != 0);

	xor	edx, edx
	cmp	DWORD PTR _soundOutputType$89574[esp+324], edx
	setne	dl
	push	edx
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1020 : 
; 1021 :                 //------------------------------------------
; 1022 : 
; 1023 :                 float fVol = configData->data->GetFloat(TEXT("volume"), 1.0f);

	fld1
	mov	eax, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	fstp	DWORD PTR [esp]
	push	OFFSET $SG-8180
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	fstp	DWORD PTR _fVol$89585[esp+324]

; 1024 :                 SetVolumeControlValue(GetDlgItem(hwnd, IDC_VOLUME), fVol);

	fld	DWORD PTR _fVol$89585[esp+324]
	push	ecx
	fstp	DWORD PTR [esp]
	push	1035					; 0000040bH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp_?SetVolumeControlValue@@YAMPAUHWND__@@M@Z
	fstp	ST(0)

; 1025 : 
; 1026 :                 //------------------------------------------
; 1027 : 
; 1028 :                 int pos = configData->data->GetInt(TEXT("soundTimeOffset"));

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	esp, 8
	push	0
	push	OFFSET $SG-8181
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 1029 : 
; 1030 :                 SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_SETRANGE32, -150, 3000);

	push	3000					; 00000bb8H
	push	-150					; ffffff6aH
	push	1135					; 0000046fH
	push	1033					; 00000409H
	push	esi
	mov	DWORD PTR _pos$89587[esp+344], eax
	call	edi
	push	eax
	call	ebx

; 1031 :                 SendMessage(GetDlgItem(hwnd, IDC_TIMEOFFSET), UDM_SETPOS32, 0, pos);

	mov	edx, DWORD PTR _pos$89587[esp+324]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1033					; 00000409H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1032 : 
; 1033 :                 //------------------------------------------
; 1034 : 
; 1035 :                 BOOL  bUseChromaKey = configData->data->GetInt(TEXT("useChromaKey"), 0);

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	0
	push	OFFSET $SG-8182
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 1036 :                 DWORD keyColor      = configData->data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	-1
	push	OFFSET $SG-8183
	mov	DWORD PTR _bUseChromaKey$89589[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 1037 :                 UINT  similarity    = configData->data->GetInt(TEXT("keySimilarity"), 0);

	mov	edx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	push	0
	push	OFFSET $SG-8184
	mov	DWORD PTR _keyColor$89591[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _similarity$89593[esp+324], eax

; 1038 :                 UINT  blend         = configData->data->GetInt(TEXT("keyBlend"), 80);

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	80					; 00000050H
	push	OFFSET $SG-8185
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 1039 :                 UINT  gamma         = configData->data->GetInt(TEXT("keySpillReduction"), 50);

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	50					; 00000032H
	push	OFFSET $SG-8186
	mov	DWORD PTR _blend$89595[esp+332], eax
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z

; 1040 : 
; 1041 :                 SendMessage(GetDlgItem(hwnd, IDC_USECHROMAKEY), BM_SETCHECK, bUseChromaKey ? BST_CHECKED : BST_UNCHECKED, 0);

	xor	edx, edx
	cmp	DWORD PTR _bUseChromaKey$89589[esp+324], edx
	push	0
	setne	dl
	mov	DWORD PTR _gamma$89597[esp+328], eax
	push	edx
	push	241					; 000000f1H
	push	1017					; 000003f9H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1042 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), keyColor);

	mov	eax, DWORD PTR _keyColor$89591[esp+324]
	push	eax
	push	1018					; 000003faH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1043 : 
; 1044 :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETRANGE32, 0, 1000);

	push	1000					; 000003e8H
	push	0
	push	1135					; 0000046fH
	push	1019					; 000003fbH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1045 :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETPOS32, 0, similarity);

	mov	ecx, DWORD PTR _similarity$89593[esp+324]
	push	ecx
	push	0
	push	1137					; 00000471H
	push	1019					; 000003fbH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1046 : 
; 1047 :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETRANGE32, 0, 1000);

	push	1000					; 000003e8H
	push	0
	push	1135					; 0000046fH
	push	1022					; 000003feH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1048 :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETPOS32, 0, blend);

	mov	edx, DWORD PTR _blend$89595[esp+324]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1022					; 000003feH
	push	esi
	call	edi
	push	eax
	call	ebx

; 1049 : 
; 1050 :                 SendMessage(GetDlgItem(hwnd, IDC_SPILLREDUCTION), UDM_SETRANGE32, 0, 1000);

	push	1000					; 000003e8H
	push	0
	push	1135					; 0000046fH
	push	1024					; 00000400H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1051 :                 SendMessage(GetDlgItem(hwnd, IDC_SPILLREDUCTION), UDM_SETPOS32, 0, gamma);

	mov	eax, DWORD PTR _gamma$89597[esp+324]
	push	eax
	push	0
	push	1137					; 00000471H
	push	1024					; 00000400H
	push	esi
	call	edi
	push	eax
	call	ebx

; 1052 : 
; 1053 :                 EnableWindow(GetDlgItem(hwnd, IDC_COLOR), bUseChromaKey);

	mov	ebx, DWORD PTR _bUseChromaKey$89589[esp+324]
	push	ebx
	push	1018					; 000003faH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1054 :                 EnableWindow(GetDlgItem(hwnd, IDC_SELECTCOLOR), bUseChromaKey);

	push	ebx
	push	1015					; 000003f7H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1055 :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), bUseChromaKey);

	push	ebx
	push	1020					; 000003fcH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1056 :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), bUseChromaKey);

	push	ebx
	push	1019					; 000003fbH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1057 :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), bUseChromaKey);

	push	ebx
	push	1021					; 000003fdH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1058 :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND), bUseChromaKey);

	push	ebx
	push	1022					; 000003feH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1059 :                 EnableWindow(GetDlgItem(hwnd, IDC_SPILLREDUCTION_EDIT), bUseChromaKey);

	push	ebx
	push	1023					; 000003ffH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1060 :                 EnableWindow(GetDlgItem(hwnd, IDC_SPILLREDUCTION), bUseChromaKey);

	push	ebx
	push	1024					; 00000400H
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1061 : 
; 1062 :                 //------------------------------------------
; 1063 : 
; 1064 :                 return TRUE;

	mov	BYTE PTR __$EHRec$[esp+332], 1
	mov	esi, DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strAudioDevice$89478[esp+324]
	call	esi
	mov	DWORD PTR __$EHRec$[esp+332], -1
	lea	ecx, DWORD PTR _strDevice$89476[esp+324]
	call	esi
	mov	eax, 1

; 1832 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+324]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN158@ConfigureD:

; 1065 :             }
; 1066 : 
; 1067 :         case WM_DESTROY:
; 1068 :             if(colorData.bValid)

	cmp	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, 0
	je	$LN155@ConfigureD

; 1069 :             {
; 1070 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	eax
	push	1018					; 000003faH
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8
$LN130@ConfigureD:

; 1071 :                 colorData.Clear();

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear

; 1072 :             }
; 1073 :             break;

	jmp	$LN155@ConfigureD
$LN154@ConfigureD:

; 1081 :             }
; 1082 :             break;
; 1083 : 
; 1084 :         case WM_MOUSEMOVE:
; 1085 :             if(bSelectingColor && bMouseDown)

	cmp	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	je	$LN155@ConfigureD
	cmp	BYTE PTR ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	je	$LN155@ConfigureD

; 1086 :             {
; 1087 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());
; 1088 :                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));
; 1089 :             }
; 1090 :             break;

	jmp	$LN374@ConfigureD
$LN180@ConfigureD:

; 898  : 
; 899  :     switch(message)

	sub	eax, 513				; 00000201H
	je	$LN156@ConfigureD
	dec	eax
	je	$LN152@ConfigureD
	sub	eax, 19					; 00000013H
	jne	$LN155@ConfigureD

; 1106 : 
; 1107 :         case WM_CAPTURECHANGED:
; 1108 :             if(bSelectingColor)

	cmp	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, al
	je	$LN155@ConfigureD

; 1109 :             {
; 1110 :                 if(colorData.bValid)

	mov	edi, DWORD PTR _hwnd$[ebp]
	cmp	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, al
	je	SHORT $LN147@ConfigureD

; 1111 :                 {
; 1112 :                     CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	mov	esi, DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1018					; 000003faH
	push	edi
	call	esi
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1113 :                     ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));

	push	1018					; 000003faH
	push	edi
	call	esi
	push	eax
	push	1018					; 000003faH
	push	273					; 00000111H
	push	edi
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc

; 1114 :                     colorData.Clear();

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
$LN147@ConfigureD:

; 1115 :                 }
; 1116 : 
; 1117 :                 ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0

; 1118 :                 bMouseDown = false;
; 1119 :                 bSelectingColor = false;
; 1120 : 
; 1121 :                 ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	push	edi
	mov	BYTE PTR ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	mov	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	call	DWORD PTR __imp__GetWindowLongW@8

; 1122 :                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1123 :                 if(source)

	test	eax, eax
	je	$LN155@ConfigureD

; 1124 :                     source->SetInt(TEXT("useChromaKey"), true);

	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8188
	call	eax

; 1125 :             }
; 1126 :             break;

	jmp	$LN155@ConfigureD
$LN152@ConfigureD:

; 1091 : 
; 1092 :         case WM_LBUTTONUP:
; 1093 :             if(bSelectingColor)

	cmp	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	je	$LN155@ConfigureD

; 1094 :             {
; 1095 :                 colorData.Clear();

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear

; 1096 :                 ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0

; 1097 :                 bMouseDown = false;
; 1098 :                 bSelectingColor = false;
; 1099 : 
; 1100 :                 ConfigDialogData *configData = (ConfigDialogData*)GetWindowLongPtr(hwnd, DWLP_USER);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	8
	push	ecx
	mov	BYTE PTR ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	mov	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	call	DWORD PTR __imp__GetWindowLongW@8

; 1101 :                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource

; 1102 :                 if(source)

	test	eax, eax
	je	SHORT $LN155@ConfigureD

; 1103 :                     source->SetInt(TEXT("useChromaKey"), true);

	mov	edx, DWORD PTR [eax]
	push	1
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+36]
	push	OFFSET $SG-8187
	call	eax

; 1104 :             }
; 1105 :             break;

	jmp	SHORT $LN155@ConfigureD
$LN156@ConfigureD:

; 1074 : 
; 1075 :         case WM_LBUTTONDOWN:
; 1076 :             if(bSelectingColor)

	cmp	BYTE PTR ?bSelectingColor@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0
	je	SHORT $LN155@ConfigureD

; 1077 :             {
; 1078 :                 bMouseDown = true;

	mov	BYTE PTR ?bMouseDown@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1
$LN374@ConfigureD:

; 1079 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	esi, OFFSET ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	mov	esi, DWORD PTR _hwnd$[ebp]
	mov	edi, DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1018					; 000003faH
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1080 :                 ConfigureDialogProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));

	push	1018					; 000003faH
	push	esi
	call	edi
	push	eax
	push	1018					; 000003faH
$LN370@ConfigureD:
	push	273					; 00000111H
	push	esi
$LN368@ConfigureD:
	call	?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureDialogProc
$LN155@ConfigureD:

; 1828 :             }
; 1829 :     }
; 1830 : 
; 1831 :     return FALSE;

	xor	eax, eax

; 1832 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+324]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN379@ConfigureD:
	DD	$LN38@ConfigureD
	DD	$LN77@ConfigureD
	DD	$LN71@ConfigureD
	DD	$LN58@ConfigureD
	DD	$LN94@ConfigureD
	DD	$LN95@ConfigureD
	DD	$LN120@ConfigureD
	DD	$LN132@ConfigureD
	DD	$LN142@ConfigureD
	DD	$LN134@ConfigureD
	DD	$LN127@ConfigureD
	DD	$LN113@ConfigureD
	DD	$LN141@ConfigureD
	DD	$LN125@ConfigureD
	DD	$LN139@ConfigureD
	DD	$LN155@ConfigureD
$LN331@ConfigureD:
	DB	0
	DB	1
	DB	0
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	0
	DB	2
	DB	15					; 0000000fH
	DB	3
	DB	4
	DB	5
	DB	15					; 0000000fH
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	15					; 0000000fH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	15					; 0000000fH
	DB	11					; 0000000bH
	DB	15					; 0000000fH
	DB	6
	DB	15					; 0000000fH
	DB	11					; 0000000bH
	DB	15					; 0000000fH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	11					; 0000000bH
	DB	15					; 0000000fH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	npad	2
$LN380@ConfigureD:
	DD	$LN105@ConfigureD
	DD	$LN104@ConfigureD
	DD	$LN103@ConfigureD
	DD	$LN106@ConfigureD
	DD	$LN107@ConfigureD
	DD	$LN108@ConfigureD
$LN332@ConfigureD:
	DB	0
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	npad	3
$LN381@ConfigureD:
	DD	$LN98@ConfigureD
	DD	$LN97@ConfigureD
	DD	$LN96@ConfigureD
	DD	$LN99@ConfigureD
	DD	$LN100@ConfigureD
	DD	$LN155@ConfigureD
$LN333@ConfigureD:
	DB	0
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$0:
	mov	eax, DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4IA, eax
	ret	0
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$30:
	lea	ecx, DWORD PTR _strDevice$90191[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$31:
	lea	ecx, DWORD PTR _strAudioDevice$90193[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$32:
	lea	ecx, DWORD PTR _strFPS$90195[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$33:
	lea	ecx, DWORD PTR _tokens$90198[ebp]
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$7:
	lea	ecx, DWORD PTR _strResolution$89876[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$8:
	lea	ecx, DWORD PTR $T106080[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$9:
	lea	ecx, DWORD PTR $T106079[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$10:
	lea	ecx, DWORD PTR _strResolution$89890[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$11:
	lea	ecx, DWORD PTR $T106082[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$12:
	lea	ecx, DWORD PTR $T106081[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$13:
	lea	ecx, DWORD PTR $T106083[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$34:
	lea	esi, DWORD PTR _fpsInfo$89951[ebp]
	jmp	??1?$List@UFPSInterval@@@@QAE@XZ	; List<FPSInterval>::~List<FPSInterval>
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$14:
	lea	eax, DWORD PTR _fpsInfo$89951[ebp]
	push	eax
	call	??1FPSInfo@@QAE@XZ
	ret	0
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$15:
	lea	ecx, DWORD PTR _strFPS$89964[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$16:
	lea	ecx, DWORD PTR $T106084[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$17:
	lea	ecx, DWORD PTR $T106086[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$18:
	lea	ecx, DWORD PTR $T106085[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$19:
	lea	ecx, DWORD PTR $T106087[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$35:
	lea	esi, DWORD PTR _fpsInfo$89999[ebp]
	jmp	??1?$List@UFPSInterval@@@@QAE@XZ	; List<FPSInterval>::~List<FPSInterval>
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$20:
	lea	eax, DWORD PTR _fpsInfo$89999[ebp]
	push	eax
	call	??1FPSInfo@@QAE@XZ
	ret	0
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$21:
	lea	ecx, DWORD PTR _strFPSVal$90001[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$22:
	lea	ecx, DWORD PTR _tokens$90005[ebp]
	jmp	DWORD PTR __imp_??1StringList@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$23:
	lea	esi, DWORD PTR _types$90134[ebp]
	jmp	??1?$List@W4VideoOutputType@@@@QAE@XZ	; List<enum VideoOutputType>::~List<enum VideoOutputType>
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$28:
	mov	ecx, DWORD PTR $T106092[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$29:
	mov	ecx, DWORD PTR $T106093[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$26:
	mov	ecx, DWORD PTR $T106090[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$27:
	mov	ecx, DWORD PTR $T106091[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$24:
	mov	ecx, DWORD PTR $T106088[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$25:
	mov	ecx, DWORD PTR $T106089[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$1:
	lea	ecx, DWORD PTR _strDevice$89476[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$2:
	lea	ecx, DWORD PTR _strAudioDevice$89478[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$3:
	lea	ecx, DWORD PTR _strResolution$89526[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$4:
	lea	ecx, DWORD PTR $T106076[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$5:
	lea	ecx, DWORD PTR $T106075[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__unwindfunclet$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z$6:
	lea	ecx, DWORD PTR $T106077[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-308]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z ENDP		; ConfigureDialogProc
PUBLIC	?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z	; ConfigureDShowSource
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\alloc.h
xdata$x	SEGMENT
__unwindtable$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z$0
__ehfuncinfo$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT ?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T106460 = 8						; size = 4
_element$ = 8						; size = 4
_bCreating$ = 12					; size = 1
?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z PROC	; ConfigureDShowSource, COMDAT

; 1836 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1837 :     if(!element)

	mov	edi, DWORD PTR _element$[ebp]
	xor	esi, esi
	cmp	edi, esi
	jne	SHORT $LN3@ConfigureD@2

; 1838 :     {
; 1839 :         AppWarning(TEXT("ConfigureDShowSource: NULL element"));

	push	OFFSET $SG-8263
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 1840 :         return false;

	jmp	$LN52@ConfigureD@2
$LN3@ConfigureD@2:

; 1841 :     }
; 1842 : 
; 1843 :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG-8264
	mov	ecx, edi
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	ebx, eax

; 1844 :     if(!data)

	cmp	ebx, esi
	jne	SHORT $LN2@ConfigureD@2

; 1845 :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG-8265
	mov	ecx, edi
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	ebx, eax
$LN2@ConfigureD@2:

; 1846 : 
; 1847 :     ConfigDialogData *configData = new ConfigDialogData;

	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	80					; 00000050H
	call	eax
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], ecx
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], ecx
	mov	DWORD PTR $T106460[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	cmp	eax, esi
	je	SHORT $LN6@ConfigureD@2
	push	eax
	call	??0ConfigDialogData@@QAE@XZ
	mov	esi, eax
$LN6@ConfigureD@2:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1848 :     configData->lpName = element->GetName();

	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi], ecx

; 1849 :     configData->data = data;

	mov	DWORD PTR [esi+4], ebx

; 1850 :     configData->bGlobalSource = (scmpi(element->GetParent()->GetName(), TEXT("global sources")) == 0);

	mov	edx, DWORD PTR [edi+20]
	mov	eax, DWORD PTR [edx+4]
	push	OFFSET $SG-8266
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z

; 1851 :     configData->bCreating = bCreating;

	mov	cl, BYTE PTR _bCreating$[ebp]

; 1852 : 
; 1853 :     if(DialogBoxParam(hinstMain, MAKEINTRESOURCE(IDD_CONFIG), API->GetMainWindow(), ConfigureDialogProc, (LPARAM)configData) == IDOK)

	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	test	eax, eax
	sete	al
	mov	BYTE PTR [esi+72], al
	mov	BYTE PTR [esi+73], cl
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+96]
	push	esi
	call	edx
	push	eax
	call	_IsolationAwareDialogBoxParamW@20
	cmp	eax, 1
	jne	SHORT $LN1@ConfigureD@2

; 1854 :     {
; 1855 :         element->SetInt(TEXT("cx"), data->GetInt(TEXT("resolutionWidth")));

	push	0
	push	OFFSET $SG-8267
	mov	ecx, ebx
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG-8268
	mov	ecx, edi
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1856 :         element->SetInt(TEXT("cy"), data->GetInt(TEXT("resolutionHeight")));

	push	0
	push	OFFSET $SG-8269
	mov	ecx, ebx
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG-8270
	mov	ecx, edi
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1857 : 
; 1858 :         delete configData;

	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax

; 1859 :         return true;

	mov	al, 1

; 1864 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN1@ConfigureD@2:

; 1860 :     }
; 1861 : 
; 1862 :     delete configData;

	push	esi
	call	??1ConfigDialogData@@QAE@XZ		; ConfigDialogData::~ConfigDialogData
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
$LN52@ConfigureD@2:

; 1863 :     return false;

	xor	al, al

; 1864 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z$0:
	mov	eax, DWORD PTR $T106460[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z ENDP	; ConfigureDShowSource
PUBLIC	_LoadPlugin
;	COMDAT xdata$x
; File d:\installs\obs\gitshit\obsapi\utility\xstring.h
xdata$x	SEGMENT
__unwindtable$_LoadPlugin DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadPlugin$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_LoadPlugin$1
__ehfuncinfo$_LoadPlugin DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_LoadPlugin
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Ogtp
; File d:\installs\obs\gitshit\dshowplugin\dshowplugin.cpp
xdata$x	ENDS
;	COMDAT _LoadPlugin
_TEXT	SEGMENT
_pluginStringFile$90381 = -20				; size = 8
$T106567 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_LoadPlugin PROC					; COMDAT

; 1880 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_LoadPlugin
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1881 :     InitColorControl(hinstMain);

	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?InitColorControl@@YAXPAUHINSTANCE__@@@Z

; 1882 :     InitVolumeControl(hinstMain);

	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	ecx
	call	DWORD PTR __imp_?InitVolumeControl@@YAXPAUHINSTANCE__@@@Z

; 1883 :     InitVolumeMeter(hinstMain);

	mov	edx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	edx
	call	DWORD PTR __imp_?InitVolumeMeter@@YAXPAUHINSTANCE__@@@Z

; 1884 : 
; 1885 :     pluginLocale = new LocaleStringLookup;

	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	add	esp, 12					; 0000000cH
	push	12					; 0000000cH
	call	eax
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR $T106567[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], ecx
	test	eax, eax
	je	SHORT $LN6@LoadPlugin
	mov	ecx, eax
	call	DWORD PTR __imp_??0LocaleStringLookup@@QAE@XZ
	jmp	SHORT $LN7@LoadPlugin
$LN6@LoadPlugin:
	xor	eax, eax
$LN7@LoadPlugin:
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1886 : 
; 1887 :     if(!pluginLocale->LoadStringFile(TEXT("plugins/DShowPlugin/locale/en.txt")))

	mov	edi, DWORD PTR __imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z
	push	0
	push	OFFSET $SG-8271
	mov	ecx, eax
	mov	DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A, eax ; pluginLocale
	call	edi
	mov	ebx, DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	test	eax, eax
	jne	SHORT $LN3@LoadPlugin

; 1888 :         AppWarning(TEXT("Could not open locale string file '%s'"), TEXT("plugins/DShowPlugin/locale/en.txt"));

	push	OFFSET $SG-8272
	push	OFFSET $SG-8273
	call	ebx
	add	esp, 8
$LN3@LoadPlugin:

; 1889 : 
; 1890 :     if(scmpi(API->GetLanguage(), TEXT("en")) != 0)

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+92]
	push	OFFSET $SG-8274
	call	eax
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN2@LoadPlugin

; 1891 :     {
; 1892 :         String pluginStringFile;

	lea	ecx, DWORD PTR _pluginStringFile$90381[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1893 :         pluginStringFile << TEXT("plugins/DShowPlugin/locale/") << API->GetLanguage() << TEXT(".txt");

	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+92]
	push	OFFSET $SG-8276
	call	eax
	mov	esi, DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	push	eax
	push	OFFSET $SG-8275
	lea	ecx, DWORD PTR _pluginStringFile$90381[ebp]
	call	esi
	mov	ecx, eax
	call	esi
	mov	ecx, eax
	call	esi

; 1894 :         if(!pluginLocale->LoadStringFile(pluginStringFile))

	mov	ecx, DWORD PTR _pluginStringFile$90381[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	call	edi
	test	eax, eax
	jne	SHORT $LN1@LoadPlugin

; 1895 :             AppWarning(TEXT("Could not open locale string file '%s'"), pluginStringFile.Array());

	mov	edx, DWORD PTR _pluginStringFile$90381[ebp]
	push	edx
	push	OFFSET $SG-8277
	call	ebx
	add	esp, 8
$LN1@LoadPlugin:

; 1896 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pluginStringFile$90381[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN2@LoadPlugin:

; 1897 : 
; 1898 :     API->RegisterImageSourceClass(DSHOW_CLASSNAME, PluginStr("ClassName"), (OBSCREATEPROC)CreateDShowSource, (OBSCONFIGPROC)ConfigureDShowSource);

	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?pluginLocale@@3PAVLocaleStringLookup@@A ; pluginLocale
	mov	edi, DWORD PTR [esi]
	push	OFFSET ?ConfigureDShowSource@@YG_NPAVXElement@@_N@Z ; ConfigureDShowSource
	push	OFFSET ?CreateDShowSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateDShowSource
	push	OFFSET $SG-8278
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	edx, DWORD PTR [edi+20]
	push	eax
	push	OFFSET $SG-8279
	mov	ecx, esi
	call	edx

; 1899 : 
; 1900 :     return true;

	mov	al, 1

; 1901 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_LoadPlugin$0:
	mov	eax, DWORD PTR $T106567[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$_LoadPlugin$1:
	lea	ecx, DWORD PTR _pluginStringFile$90381[ebp]
	jmp	DWORD PTR __imp_??1String@@QAE@XZ
__ehhandler$_LoadPlugin:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_LoadPlugin
	jmp	___CxxFrameHandler3
text$x	ENDS
_LoadPlugin ENDP
; Function compile flags: /Ogtp
;	COMDAT ??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ
text$yd	SEGMENT
??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ PROC ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData'', COMDAT
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN7@dynamic
	push	eax
	push	ebx
	call	DWORD PTR __imp__ReleaseDC@8
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A, ebx
$LN7@dynamic:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4
	cmp	eax, ebx
	je	SHORT $LN6@dynamic
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+4, ebx
$LN6@dynamic:
	mov	eax, DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8
	cmp	eax, ebx
	je	SHORT $LN10@dynamic
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	mov	DWORD PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+8, ebx
$LN10@dynamic:
	mov	BYTE PTR ?colorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12, bl
	pop	ebx
	ret	0
??__FcolorData@?1??ConfigureDialogProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ENDP ; `ConfigureDialogProc'::`2'::`dynamic atexit destructor for 'colorData''
text$yd	ENDS
END
